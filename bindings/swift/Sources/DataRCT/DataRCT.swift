// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(DataRCTFFI)
    import DataRCTFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_data_rct_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_data_rct_ffi_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        throw CancellationError()

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol InternalDiscoveryProtocol {
    func addBleImplementation(implementation: BleDiscoveryImplementationDelegate)
    func parseDiscoveryMessage(data: Data)
    func start()
    func stop()
}

public class InternalDiscovery: InternalDiscoveryProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(delegate: DeviceListUpdateDelegate?) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeDiscoverySetupError.lift) {
            uniffi_data_rct_ffi_fn_constructor_internaldiscovery_new(
                FfiConverterOptionCallbackInterfaceDeviceListUpdateDelegate.lower(delegate), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_data_rct_ffi_fn_free_internaldiscovery(pointer, $0) }
    }

    public func addBleImplementation(implementation: BleDiscoveryImplementationDelegate) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internaldiscovery_add_ble_implementation(self.pointer,
                                                                                       FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.lower(implementation), $0)
            }
    }

    public func parseDiscoveryMessage(data: Data) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internaldiscovery_parse_discovery_message(self.pointer,
                                                                                        FfiConverterData.lower(data), $0)
            }
    }

    public func start() {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internaldiscovery_start(self.pointer, $0)
            }
    }

    public func stop() {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internaldiscovery_stop(self.pointer, $0)
            }
    }
}

public struct FfiConverterTypeInternalDiscovery: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = InternalDiscovery

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InternalDiscovery {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: InternalDiscovery, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalDiscovery {
        return InternalDiscovery(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: InternalDiscovery) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeInternalDiscovery_lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalDiscovery {
    return try FfiConverterTypeInternalDiscovery.lift(pointer)
}

public func FfiConverterTypeInternalDiscovery_lower(_ value: InternalDiscovery) -> UnsafeMutableRawPointer {
    return FfiConverterTypeInternalDiscovery.lower(value)
}

public protocol InternalNearbyServerProtocol {
    func addBleImplementation(implementation: BleServerImplementationDelegate)
    func changeDevice(device: Device)
    func getAdvertisementData() -> Data
    func start()
    func stop()
}

public class InternalNearbyServer: InternalNearbyServerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(myDevice: Device) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeTransmissionSetupError.lift) {
            uniffi_data_rct_ffi_fn_constructor_internalnearbyserver_new(
                FfiConverterTypeDevice.lower(myDevice), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_data_rct_ffi_fn_free_internalnearbyserver(pointer, $0) }
    }

    public func addBleImplementation(implementation: BleServerImplementationDelegate) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_add_ble_implementation(self.pointer,
                                                                                          FfiConverterCallbackInterfaceBleServerImplementationDelegate.lower(implementation), $0)
            }
    }

    public func changeDevice(device: Device) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_change_device(self.pointer,
                                                                                 FfiConverterTypeDevice.lower(device), $0)
            }
    }

    public func getAdvertisementData() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_data_rct_ffi_fn_method_internalnearbyserver_get_advertisement_data(self.pointer, $0)
                }
        )
    }

    public func start() {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_start(self.pointer, $0)
            }
    }

    public func stop() {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_stop(self.pointer, $0)
            }
    }
}

public struct FfiConverterTypeInternalNearbyServer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = InternalNearbyServer

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InternalNearbyServer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: InternalNearbyServer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalNearbyServer {
        return InternalNearbyServer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: InternalNearbyServer) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeInternalNearbyServer_lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalNearbyServer {
    return try FfiConverterTypeInternalNearbyServer.lift(pointer)
}

public func FfiConverterTypeInternalNearbyServer_lower(_ value: InternalNearbyServer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeInternalNearbyServer.lower(value)
}

public struct Device {
    public var id: String
    public var name: String
    public var deviceType: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, name: String, deviceType: Int32) {
        self.id = id
        self.name = name
        self.deviceType = deviceType
    }
}

extension Device: Equatable, Hashable {
    public static func == (lhs: Device, rhs: Device) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.deviceType != rhs.deviceType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(deviceType)
    }
}

public struct FfiConverterTypeDevice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Device {
        return try Device(
            id: FfiConverterString.read(from: &buf),
            name: FfiConverterString.read(from: &buf),
            deviceType: FfiConverterInt32.read(from: &buf)
        )
    }

    public static func write(_ value: Device, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterInt32.write(value.deviceType, into: &buf)
    }
}

public func FfiConverterTypeDevice_lift(_ buf: RustBuffer) throws -> Device {
    return try FfiConverterTypeDevice.lift(buf)
}

public func FfiConverterTypeDevice_lower(_ value: Device) -> RustBuffer {
    return FfiConverterTypeDevice.lower(value)
}

public enum DiscoverySetupError {
    // Simple error enums only carry a message
    case UnableToSetupUdp(message: String)

    // Simple error enums only carry a message
    case UnableToSetupMdns(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeDiscoverySetupError.lift(error)
    }
}

public struct FfiConverterTypeDiscoverySetupError: FfiConverterRustBuffer {
    typealias SwiftType = DiscoverySetupError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiscoverySetupError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .UnableToSetupUdp(
                message: try FfiConverterString.read(from: &buf)
            )

        case 2: return .UnableToSetupMdns(
                message: try FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DiscoverySetupError, into buf: inout [UInt8]) {
        switch value {
        case .UnableToSetupUdp(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .UnableToSetupMdns(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        }
    }
}

extension DiscoverySetupError: Equatable, Hashable {}

extension DiscoverySetupError: Error {}

public enum TransmissionSetupError {
    // Simple error enums only carry a message
    case UnableToStartTcpServer(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeTransmissionSetupError.lift(error)
    }
}

public struct FfiConverterTypeTransmissionSetupError: FfiConverterRustBuffer {
    typealias SwiftType = TransmissionSetupError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransmissionSetupError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .UnableToStartTcpServer(
                message: try FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransmissionSetupError, into buf: inout [UInt8]) {
        switch value {
        case .UnableToStartTcpServer(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        }
    }
}

extension TransmissionSetupError: Equatable, Hashable {}

extension TransmissionSetupError: Error {}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias UniFFICallbackHandle = UInt64
private class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for BleDiscoveryImplementationDelegate Callback Interface

public protocol BleDiscoveryImplementationDelegate: AnyObject {
    func startScanning()
    func stopScanning()
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceBleDiscoveryImplementationDelegate: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeStartScanning(_ swiftCallbackInterface: BleDiscoveryImplementationDelegate, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            func makeCall() throws -> Int32 {
                try swiftCallbackInterface.startScanning(
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        func invokeStopScanning(_ swiftCallbackInterface: BleDiscoveryImplementationDelegate, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            func makeCall() throws -> Int32 {
                try swiftCallbackInterface.stopScanning(
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: BleDiscoveryImplementationDelegate
            do {
                cb = try FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("BleDiscoveryImplementationDelegate: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeStartScanning(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            let cb: BleDiscoveryImplementationDelegate
            do {
                cb = try FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("BleDiscoveryImplementationDelegate: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeStopScanning(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_data_rct_ffi_fn_init_callback_blediscoveryimplementationdelegate(foreignCallbackCallbackInterfaceBleDiscoveryImplementationDelegate, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<BleDiscoveryImplementationDelegate>()
}

extension FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate: FfiConverter {
    typealias SwiftType = BleDiscoveryImplementationDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

// Declaration and FfiConverters for BleServerImplementationDelegate Callback Interface

public protocol BleServerImplementationDelegate: AnyObject {
    func startServer()
    func stopServer()
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceBleServerImplementationDelegate: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeStartServer(_ swiftCallbackInterface: BleServerImplementationDelegate, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            func makeCall() throws -> Int32 {
                try swiftCallbackInterface.startServer(
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        func invokeStopServer(_ swiftCallbackInterface: BleServerImplementationDelegate, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            func makeCall() throws -> Int32 {
                try swiftCallbackInterface.stopServer(
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceBleServerImplementationDelegate.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: BleServerImplementationDelegate
            do {
                cb = try FfiConverterCallbackInterfaceBleServerImplementationDelegate.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("BleServerImplementationDelegate: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeStartServer(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            let cb: BleServerImplementationDelegate
            do {
                cb = try FfiConverterCallbackInterfaceBleServerImplementationDelegate.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("BleServerImplementationDelegate: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeStopServer(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceBleServerImplementationDelegate {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_data_rct_ffi_fn_init_callback_bleserverimplementationdelegate(foreignCallbackCallbackInterfaceBleServerImplementationDelegate, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<BleServerImplementationDelegate>()
}

extension FfiConverterCallbackInterfaceBleServerImplementationDelegate: FfiConverter {
    typealias SwiftType = BleServerImplementationDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

// Declaration and FfiConverters for DeviceListUpdateDelegate Callback Interface

public protocol DeviceListUpdateDelegate: AnyObject {
    func deviceAdded(value: Device)
    func deviceRemoved(deviceId: String)
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceDeviceListUpdateDelegate: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeDeviceAdded(_ swiftCallbackInterface: DeviceListUpdateDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
            func makeCall() throws -> Int32 {
                try swiftCallbackInterface.deviceAdded(
                    value: try FfiConverterTypeDevice.read(from: &reader)
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        func invokeDeviceRemoved(_ swiftCallbackInterface: DeviceListUpdateDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
            func makeCall() throws -> Int32 {
                try swiftCallbackInterface.deviceRemoved(
                    deviceId: try FfiConverterString.read(from: &reader)
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceDeviceListUpdateDelegate.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: DeviceListUpdateDelegate
            do {
                cb = try FfiConverterCallbackInterfaceDeviceListUpdateDelegate.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("DeviceListUpdateDelegate: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeDeviceAdded(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            let cb: DeviceListUpdateDelegate
            do {
                cb = try FfiConverterCallbackInterfaceDeviceListUpdateDelegate.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("DeviceListUpdateDelegate: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeDeviceRemoved(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceDeviceListUpdateDelegate {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_data_rct_ffi_fn_init_callback_devicelistupdatedelegate(foreignCallbackCallbackInterfaceDeviceListUpdateDelegate, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<DeviceListUpdateDelegate>()
}

extension FfiConverterCallbackInterfaceDeviceListUpdateDelegate: FfiConverter {
    typealias SwiftType = DeviceListUpdateDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

private struct FfiConverterOptionCallbackInterfaceDeviceListUpdateDelegate: FfiConverterRustBuffer {
    typealias SwiftType = DeviceListUpdateDelegate?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterCallbackInterfaceDeviceListUpdateDelegate.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceDeviceListUpdateDelegate.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

public func getBleCharacteristicUuid() -> String {
    return try! FfiConverterString.lift(
        try! rustCall {
            uniffi_data_rct_ffi_fn_func_get_ble_characteristic_uuid($0)
        }
    )
}

public func getBleServiceUuid() -> String {
    return try! FfiConverterString.lift(
        try! rustCall {
            uniffi_data_rct_ffi_fn_func_get_ble_service_uuid($0)
        }
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_data_rct_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_data_rct_ffi_checksum_func_get_ble_characteristic_uuid() != 53557 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_func_get_ble_service_uuid() != 26941 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internaldiscovery_add_ble_implementation() != 64333 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internaldiscovery_parse_discovery_message() != 9633 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internaldiscovery_start() != 50475 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internaldiscovery_stop() != 51582 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_add_ble_implementation() != 20560 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_change_device() != 33780 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_get_advertisement_data() != 34600 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_start() != 39930 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_stop() != 39757 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_constructor_internaldiscovery_new() != 54735 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_constructor_internalnearbyserver_new() != 31012 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_blediscoveryimplementationdelegate_start_scanning() != 20220 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_blediscoveryimplementationdelegate_stop_scanning() != 49638 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_bleserverimplementationdelegate_start_server() != 14817 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_bleserverimplementationdelegate_stop_server() != 32196 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_devicelistupdatedelegate_device_added() != 27971 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_devicelistupdatedelegate_device_removed() != 65271 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
