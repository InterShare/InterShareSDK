// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(DataRCTFFI)
    import DataRCTFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_data_rct_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_data_rct_ffi_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol ConnectionRequestProtocol: AnyObject {
    func accept()

    func decline()

    func getClipboardIntent() -> ClipboardTransferIntent?

    func getFileTransferIntent() -> FileTransferIntent?

    func getIntentType() -> ConnectionIntentType

    func getSender() -> Device
}

public class ConnectionRequest:
    ConnectionRequestProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_data_rct_ffi_fn_clone_connectionrequest(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_data_rct_ffi_fn_free_connectionrequest(pointer, $0) }
    }

    public func accept() {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_connectionrequest_accept(self.uniffiClonePointer(), $0)
            }
    }

    public func decline() {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_connectionrequest_decline(self.uniffiClonePointer(), $0)
            }
    }

    public func getClipboardIntent() -> ClipboardTransferIntent? {
        return try! FfiConverterOptionTypeClipboardTransferIntent.lift(
            try!
                rustCall {
                    uniffi_data_rct_ffi_fn_method_connectionrequest_get_clipboard_intent(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func getFileTransferIntent() -> FileTransferIntent? {
        return try! FfiConverterOptionTypeFileTransferIntent.lift(
            try!
                rustCall {
                    uniffi_data_rct_ffi_fn_method_connectionrequest_get_file_transfer_intent(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func getIntentType() -> ConnectionIntentType {
        return try! FfiConverterTypeConnectionIntentType.lift(
            try!
                rustCall {
                    uniffi_data_rct_ffi_fn_method_connectionrequest_get_intent_type(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func getSender() -> Device {
        return try! FfiConverterTypeDevice.lift(
            try!
                rustCall {
                    uniffi_data_rct_ffi_fn_method_connectionrequest_get_sender(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeConnectionRequest: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ConnectionRequest

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ConnectionRequest {
        return ConnectionRequest(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ConnectionRequest) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionRequest {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ConnectionRequest, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeConnectionRequest_lift(_ pointer: UnsafeMutableRawPointer) throws -> ConnectionRequest {
    return try FfiConverterTypeConnectionRequest.lift(pointer)
}

public func FfiConverterTypeConnectionRequest_lower(_ value: ConnectionRequest) -> UnsafeMutableRawPointer {
    return FfiConverterTypeConnectionRequest.lower(value)
}

public protocol InternalDiscoveryProtocol: AnyObject {
    func addBleImplementation(implementation: BleDiscoveryImplementationDelegate)

    func parseDiscoveryMessage(data: Data, bleUuid: String?)

    func start()

    func stop()
}

public class InternalDiscovery:
    InternalDiscoveryProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_data_rct_ffi_fn_clone_internaldiscovery(self.pointer, $0) }
    }

    public convenience init(delegate: DeviceListUpdateDelegate?) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeDiscoverySetupError.lift) {
            uniffi_data_rct_ffi_fn_constructor_internaldiscovery_new(
                FfiConverterOptionCallbackInterfaceDeviceListUpdateDelegate.lower(delegate), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_data_rct_ffi_fn_free_internaldiscovery(pointer, $0) }
    }

    public func addBleImplementation(implementation: BleDiscoveryImplementationDelegate) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internaldiscovery_add_ble_implementation(self.uniffiClonePointer(),
                                                                                       FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.lower(implementation), $0)
            }
    }

    public func parseDiscoveryMessage(data: Data, bleUuid: String?) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internaldiscovery_parse_discovery_message(self.uniffiClonePointer(),
                                                                                        FfiConverterData.lower(data),
                                                                                        FfiConverterOptionString.lower(bleUuid), $0)
            }
    }

    public func start() {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internaldiscovery_start(self.uniffiClonePointer(), $0)
            }
    }

    public func stop() {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internaldiscovery_stop(self.uniffiClonePointer(), $0)
            }
    }
}

public struct FfiConverterTypeInternalDiscovery: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = InternalDiscovery

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalDiscovery {
        return InternalDiscovery(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: InternalDiscovery) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InternalDiscovery {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: InternalDiscovery, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeInternalDiscovery_lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalDiscovery {
    return try FfiConverterTypeInternalDiscovery.lift(pointer)
}

public func FfiConverterTypeInternalDiscovery_lower(_ value: InternalDiscovery) -> UnsafeMutableRawPointer {
    return FfiConverterTypeInternalDiscovery.lower(value)
}

public protocol InternalNearbyServerProtocol: AnyObject {
    func addBleImplementation(bleImplementation: BleServerImplementationDelegate)

    func addL2capClient(delegate: L2capClientDelegate)

    func changeDevice(newDevice: Device)

    func getAdvertisementData() async -> Data

    func sendFile(receiver: Device, filePath: String, progressDelegate: ProgressDelegate?) async throws

    func setBleConnectionDetails(bleDetails: BluetoothLeConnectionInfo)

    func setTcpDetails(tcpDetails: TcpConnectionInfo)

    func start() async

    func stop() async
}

public class InternalNearbyServer:
    InternalNearbyServerProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_data_rct_ffi_fn_clone_internalnearbyserver(self.pointer, $0) }
    }

    public convenience init(myDevice: Device, fileStorage: String, delegate: NearbyConnectionDelegate) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_data_rct_ffi_fn_constructor_internalnearbyserver_new(
                FfiConverterTypeDevice.lower(myDevice),
                FfiConverterString.lower(fileStorage),
                FfiConverterCallbackInterfaceNearbyConnectionDelegate.lower(delegate), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_data_rct_ffi_fn_free_internalnearbyserver(pointer, $0) }
    }

    public func addBleImplementation(bleImplementation: BleServerImplementationDelegate) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_add_ble_implementation(self.uniffiClonePointer(),
                                                                                          FfiConverterCallbackInterfaceBleServerImplementationDelegate.lower(bleImplementation), $0)
            }
    }

    public func addL2capClient(delegate: L2capClientDelegate) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_add_l2cap_client(self.uniffiClonePointer(),
                                                                                    FfiConverterCallbackInterfaceL2capClientDelegate.lower(delegate), $0)
            }
    }

    public func changeDevice(newDevice: Device) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_change_device(self.uniffiClonePointer(),
                                                                                 FfiConverterTypeDevice.lower(newDevice), $0)
            }
    }

    public func getAdvertisementData() async -> Data {
        return try! await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_get_advertisement_data(
                    self.uniffiClonePointer()
                )
            },
            pollFunc: ffi_data_rct_ffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_data_rct_ffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_data_rct_ffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterData.lift,
            errorHandler: nil
        )
    }

    public func sendFile(receiver: Device, filePath: String, progressDelegate: ProgressDelegate?) async throws {
        return try await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_send_file(
                    self.uniffiClonePointer(),
                    FfiConverterTypeDevice.lower(receiver),
                    FfiConverterString.lower(filePath),
                    FfiConverterOptionCallbackInterfaceProgressDelegate.lower(progressDelegate)
                )
            },
            pollFunc: ffi_data_rct_ffi_rust_future_poll_void,
            completeFunc: ffi_data_rct_ffi_rust_future_complete_void,
            freeFunc: ffi_data_rct_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeConnectErrors.lift
        )
    }

    public func setBleConnectionDetails(bleDetails: BluetoothLeConnectionInfo) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_set_ble_connection_details(self.uniffiClonePointer(),
                                                                                              FfiConverterTypeBluetoothLeConnectionInfo.lower(bleDetails), $0)
            }
    }

    public func setTcpDetails(tcpDetails: TcpConnectionInfo) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_set_tcp_details(self.uniffiClonePointer(),
                                                                                   FfiConverterTypeTcpConnectionInfo.lower(tcpDetails), $0)
            }
    }

    public func start() async {
        return try! await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_start(
                    self.uniffiClonePointer()
                )
            },
            pollFunc: ffi_data_rct_ffi_rust_future_poll_void,
            completeFunc: ffi_data_rct_ffi_rust_future_complete_void,
            freeFunc: ffi_data_rct_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
        )
    }

    public func stop() async {
        return try! await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_data_rct_ffi_fn_method_internalnearbyserver_stop(
                    self.uniffiClonePointer()
                )
            },
            pollFunc: ffi_data_rct_ffi_rust_future_poll_void,
            completeFunc: ffi_data_rct_ffi_rust_future_complete_void,
            freeFunc: ffi_data_rct_ffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
        )
    }
}

public struct FfiConverterTypeInternalNearbyServer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = InternalNearbyServer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalNearbyServer {
        return InternalNearbyServer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: InternalNearbyServer) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InternalNearbyServer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: InternalNearbyServer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeInternalNearbyServer_lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalNearbyServer {
    return try FfiConverterTypeInternalNearbyServer.lift(pointer)
}

public func FfiConverterTypeInternalNearbyServer_lower(_ value: InternalNearbyServer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeInternalNearbyServer.lower(value)
}

public protocol NativeStreamProtocol: AnyObject {
    func fillBuffer(data: Data)
}

public class NativeStream:
    NativeStreamProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_data_rct_ffi_fn_clone_nativestream(self.pointer, $0) }
    }

    public convenience init(delegate: NativeStreamDelegate) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_data_rct_ffi_fn_constructor_nativestream_new(
                FfiConverterCallbackInterfaceNativeStreamDelegate.lower(delegate), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_data_rct_ffi_fn_free_nativestream(pointer, $0) }
    }

    public func fillBuffer(data: Data) {
        try!
            rustCall {
                uniffi_data_rct_ffi_fn_method_nativestream_fill_buffer(self.uniffiClonePointer(),
                                                                       FfiConverterData.lower(data), $0)
            }
    }
}

public struct FfiConverterTypeNativeStream: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NativeStream

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NativeStream {
        return NativeStream(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NativeStream) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NativeStream {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NativeStream, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeNativeStream_lift(_ pointer: UnsafeMutableRawPointer) throws -> NativeStream {
    return try FfiConverterTypeNativeStream.lift(pointer)
}

public func FfiConverterTypeNativeStream_lower(_ value: NativeStream) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNativeStream.lower(value)
}

public struct BluetoothLeConnectionInfo {
    public var uuid: String
    public var psm: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        uuid: String,
        psm: UInt32
    ) {
        self.uuid = uuid
        self.psm = psm
    }
}

extension BluetoothLeConnectionInfo: Equatable, Hashable {
    public static func == (lhs: BluetoothLeConnectionInfo, rhs: BluetoothLeConnectionInfo) -> Bool {
        if lhs.uuid != rhs.uuid {
            return false
        }
        if lhs.psm != rhs.psm {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uuid)
        hasher.combine(psm)
    }
}

public struct FfiConverterTypeBluetoothLeConnectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BluetoothLeConnectionInfo {
        return
            try BluetoothLeConnectionInfo(
                uuid: FfiConverterString.read(from: &buf),
                psm: FfiConverterUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: BluetoothLeConnectionInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uuid, into: &buf)
        FfiConverterUInt32.write(value.psm, into: &buf)
    }
}

public func FfiConverterTypeBluetoothLeConnectionInfo_lift(_ buf: RustBuffer) throws -> BluetoothLeConnectionInfo {
    return try FfiConverterTypeBluetoothLeConnectionInfo.lift(buf)
}

public func FfiConverterTypeBluetoothLeConnectionInfo_lower(_ value: BluetoothLeConnectionInfo) -> RustBuffer {
    return FfiConverterTypeBluetoothLeConnectionInfo.lower(value)
}

public struct ClipboardTransferIntent {
    public var clipboardContent: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        clipboardContent: String)
    {
        self.clipboardContent = clipboardContent
    }
}

extension ClipboardTransferIntent: Equatable, Hashable {
    public static func == (lhs: ClipboardTransferIntent, rhs: ClipboardTransferIntent) -> Bool {
        if lhs.clipboardContent != rhs.clipboardContent {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(clipboardContent)
    }
}

public struct FfiConverterTypeClipboardTransferIntent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClipboardTransferIntent {
        return
            try ClipboardTransferIntent(
                clipboardContent: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: ClipboardTransferIntent, into buf: inout [UInt8]) {
        FfiConverterString.write(value.clipboardContent, into: &buf)
    }
}

public func FfiConverterTypeClipboardTransferIntent_lift(_ buf: RustBuffer) throws -> ClipboardTransferIntent {
    return try FfiConverterTypeClipboardTransferIntent.lift(buf)
}

public func FfiConverterTypeClipboardTransferIntent_lower(_ value: ClipboardTransferIntent) -> RustBuffer {
    return FfiConverterTypeClipboardTransferIntent.lower(value)
}

public struct Device {
    public var id: String
    public var name: String
    public var deviceType: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        id: String,
        name: String,
        deviceType: Int32
    ) {
        self.id = id
        self.name = name
        self.deviceType = deviceType
    }
}

extension Device: Equatable, Hashable {
    public static func == (lhs: Device, rhs: Device) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.deviceType != rhs.deviceType {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(deviceType)
    }
}

public struct FfiConverterTypeDevice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Device {
        return
            try Device(
                id: FfiConverterString.read(from: &buf),
                name: FfiConverterString.read(from: &buf),
                deviceType: FfiConverterInt32.read(from: &buf)
            )
    }

    public static func write(_ value: Device, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterInt32.write(value.deviceType, into: &buf)
    }
}

public func FfiConverterTypeDevice_lift(_ buf: RustBuffer) throws -> Device {
    return try FfiConverterTypeDevice.lift(buf)
}

public func FfiConverterTypeDevice_lower(_ value: Device) -> RustBuffer {
    return FfiConverterTypeDevice.lower(value)
}

public struct FileTransferIntent {
    public var fileName: String?
    public var fileSize: UInt64
    public var multiple: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        fileName: String?,
        fileSize: UInt64,
        multiple: Bool
    ) {
        self.fileName = fileName
        self.fileSize = fileSize
        self.multiple = multiple
    }
}

extension FileTransferIntent: Equatable, Hashable {
    public static func == (lhs: FileTransferIntent, rhs: FileTransferIntent) -> Bool {
        if lhs.fileName != rhs.fileName {
            return false
        }
        if lhs.fileSize != rhs.fileSize {
            return false
        }
        if lhs.multiple != rhs.multiple {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fileName)
        hasher.combine(fileSize)
        hasher.combine(multiple)
    }
}

public struct FfiConverterTypeFileTransferIntent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FileTransferIntent {
        return
            try FileTransferIntent(
                fileName: FfiConverterOptionString.read(from: &buf),
                fileSize: FfiConverterUInt64.read(from: &buf),
                multiple: FfiConverterBool.read(from: &buf)
            )
    }

    public static func write(_ value: FileTransferIntent, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.fileName, into: &buf)
        FfiConverterUInt64.write(value.fileSize, into: &buf)
        FfiConverterBool.write(value.multiple, into: &buf)
    }
}

public func FfiConverterTypeFileTransferIntent_lift(_ buf: RustBuffer) throws -> FileTransferIntent {
    return try FfiConverterTypeFileTransferIntent.lift(buf)
}

public func FfiConverterTypeFileTransferIntent_lower(_ value: FileTransferIntent) -> RustBuffer {
    return FfiConverterTypeFileTransferIntent.lower(value)
}

public struct TcpConnectionInfo {
    public var hostname: String
    public var port: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        hostname: String,
        port: UInt32
    ) {
        self.hostname = hostname
        self.port = port
    }
}

extension TcpConnectionInfo: Equatable, Hashable {
    public static func == (lhs: TcpConnectionInfo, rhs: TcpConnectionInfo) -> Bool {
        if lhs.hostname != rhs.hostname {
            return false
        }
        if lhs.port != rhs.port {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hostname)
        hasher.combine(port)
    }
}

public struct FfiConverterTypeTcpConnectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TcpConnectionInfo {
        return
            try TcpConnectionInfo(
                hostname: FfiConverterString.read(from: &buf),
                port: FfiConverterUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: TcpConnectionInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.hostname, into: &buf)
        FfiConverterUInt32.write(value.port, into: &buf)
    }
}

public func FfiConverterTypeTcpConnectionInfo_lift(_ buf: RustBuffer) throws -> TcpConnectionInfo {
    return try FfiConverterTypeTcpConnectionInfo.lift(buf)
}

public func FfiConverterTypeTcpConnectionInfo_lower(_ value: TcpConnectionInfo) -> RustBuffer {
    return FfiConverterTypeTcpConnectionInfo.lower(value)
}

public enum ConnectErrors {
    case Unreachable
    case FailedToGetConnectionDetails
    case Declined
    case FailedToGetTcpDetails
    case FailedToGetSocketAddress
    case FailedToOpenTcpStream
    case FailedToEncryptStream(
        error: String
    )
    case FailedToDetermineFileSize(
        error: String
    )
    case FailedToGetTransferRequestResponse(
        error: String
    )

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeConnectErrors.lift(error)
    }
}

public struct FfiConverterTypeConnectErrors: FfiConverterRustBuffer {
    typealias SwiftType = ConnectErrors

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectErrors {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .Unreachable
        case 2: return .FailedToGetConnectionDetails
        case 3: return .Declined
        case 4: return .FailedToGetTcpDetails
        case 5: return .FailedToGetSocketAddress
        case 6: return .FailedToOpenTcpStream
        case 7: return .FailedToEncryptStream(
                error: try FfiConverterString.read(from: &buf)
            )
        case 8: return .FailedToDetermineFileSize(
                error: try FfiConverterString.read(from: &buf)
            )
        case 9: return .FailedToGetTransferRequestResponse(
                error: try FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConnectErrors, into buf: inout [UInt8]) {
        switch value {
        case .Unreachable:
            writeInt(&buf, Int32(1))

        case .FailedToGetConnectionDetails:
            writeInt(&buf, Int32(2))

        case .Declined:
            writeInt(&buf, Int32(3))

        case .FailedToGetTcpDetails:
            writeInt(&buf, Int32(4))

        case .FailedToGetSocketAddress:
            writeInt(&buf, Int32(5))

        case .FailedToOpenTcpStream:
            writeInt(&buf, Int32(6))

        case let .FailedToEncryptStream(error):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(error, into: &buf)

        case let .FailedToDetermineFileSize(error):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(error, into: &buf)

        case let .FailedToGetTransferRequestResponse(error):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(error, into: &buf)
        }
    }
}

extension ConnectErrors: Equatable, Hashable {}

extension ConnectErrors: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ConnectionIntentType {
    case fileTransfer
    case clipboard
}

public struct FfiConverterTypeConnectionIntentType: FfiConverterRustBuffer {
    typealias SwiftType = ConnectionIntentType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionIntentType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .fileTransfer

        case 2: return .clipboard

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConnectionIntentType, into buf: inout [UInt8]) {
        switch value {
        case .fileTransfer:
            writeInt(&buf, Int32(1))

        case .clipboard:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeConnectionIntentType_lift(_ buf: RustBuffer) throws -> ConnectionIntentType {
    return try FfiConverterTypeConnectionIntentType.lift(buf)
}

public func FfiConverterTypeConnectionIntentType_lower(_ value: ConnectionIntentType) -> RustBuffer {
    return FfiConverterTypeConnectionIntentType.lower(value)
}

extension ConnectionIntentType: Equatable, Hashable {}

public enum DiscoverySetupError {
    case UnableToSetupUdp(message: String)

    case UnableToSetupMdns(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeDiscoverySetupError.lift(error)
    }
}

public struct FfiConverterTypeDiscoverySetupError: FfiConverterRustBuffer {
    typealias SwiftType = DiscoverySetupError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiscoverySetupError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .UnableToSetupUdp(
                message: try FfiConverterString.read(from: &buf)
            )

        case 2: return .UnableToSetupMdns(
                message: try FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DiscoverySetupError, into buf: inout [UInt8]) {
        switch value {
        case .UnableToSetupUdp(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .UnableToSetupMdns(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        }
    }
}

extension DiscoverySetupError: Equatable, Hashable {}

extension DiscoverySetupError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SendProgressState {
    case unknown
    case connecting
    case requesting
    case transferring(
        progress: Double
    )
    case finished
    case declined
}

public struct FfiConverterTypeSendProgressState: FfiConverterRustBuffer {
    typealias SwiftType = SendProgressState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendProgressState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .unknown

        case 2: return .connecting

        case 3: return .requesting

        case 4: return .transferring(
                progress: try FfiConverterDouble.read(from: &buf)
            )

        case 5: return .finished

        case 6: return .declined

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SendProgressState, into buf: inout [UInt8]) {
        switch value {
        case .unknown:
            writeInt(&buf, Int32(1))

        case .connecting:
            writeInt(&buf, Int32(2))

        case .requesting:
            writeInt(&buf, Int32(3))

        case let .transferring(progress):
            writeInt(&buf, Int32(4))
            FfiConverterDouble.write(progress, into: &buf)

        case .finished:
            writeInt(&buf, Int32(5))

        case .declined:
            writeInt(&buf, Int32(6))
        }
    }
}

public func FfiConverterTypeSendProgressState_lift(_ buf: RustBuffer) throws -> SendProgressState {
    return try FfiConverterTypeSendProgressState.lift(buf)
}

public func FfiConverterTypeSendProgressState_lower(_ value: SendProgressState) -> RustBuffer {
    return FfiConverterTypeSendProgressState.lower(value)
}

extension SendProgressState: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TransmissionSetupError {
    case unableToStartTcpServer(
        error: String
    )
}

public struct FfiConverterTypeTransmissionSetupError: FfiConverterRustBuffer {
    typealias SwiftType = TransmissionSetupError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransmissionSetupError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .unableToStartTcpServer(
                error: try FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransmissionSetupError, into buf: inout [UInt8]) {
        switch value {
        case let .unableToStartTcpServer(error):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(error, into: &buf)
        }
    }
}

public func FfiConverterTypeTransmissionSetupError_lift(_ buf: RustBuffer) throws -> TransmissionSetupError {
    return try FfiConverterTypeTransmissionSetupError.lift(buf)
}

public func FfiConverterTypeTransmissionSetupError_lower(_ value: TransmissionSetupError) -> RustBuffer {
    return FfiConverterTypeTransmissionSetupError.lower(value)
}

extension TransmissionSetupError: Equatable, Hashable {}

public protocol BleDiscoveryImplementationDelegate: AnyObject {
    func startScanning()

    func stopScanning()
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias UniFFICallbackHandle = UInt64
private class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 1
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for BleDiscoveryImplementationDelegate Callback Interface

private let uniffiCallbackHandlerBleDiscoveryImplementationDelegate: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeStartScanning(_ swiftCallbackInterface: BleDiscoveryImplementationDelegate, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            func makeCall() throws -> Int32 {
                swiftCallbackInterface.startScanning(
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        func invokeStopScanning(_ swiftCallbackInterface: BleDiscoveryImplementationDelegate, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            func makeCall() throws -> Int32 {
                swiftCallbackInterface.stopScanning(
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.handleMap.remove(handle: handle)
            // Successful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            guard let cb = FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeStartScanning(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            guard let cb = FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeStopScanning(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

private func uniffiCallbackInitBleDiscoveryImplementationDelegate() {
    uniffi_data_rct_ffi_fn_init_callback_blediscoveryimplementationdelegate(uniffiCallbackHandlerBleDiscoveryImplementationDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<BleDiscoveryImplementationDelegate>()
}

extension FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate: FfiConverter {
    typealias SwiftType = BleDiscoveryImplementationDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol BleServerImplementationDelegate: AnyObject {
    func startServer()

    func stopServer()
}

// Declaration and FfiConverters for BleServerImplementationDelegate Callback Interface

private let uniffiCallbackHandlerBleServerImplementationDelegate: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeStartServer(_ swiftCallbackInterface: BleServerImplementationDelegate, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            func makeCall() throws -> Int32 {
                swiftCallbackInterface.startServer(
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        func invokeStopServer(_ swiftCallbackInterface: BleServerImplementationDelegate, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            func makeCall() throws -> Int32 {
                swiftCallbackInterface.stopServer(
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceBleServerImplementationDelegate.handleMap.remove(handle: handle)
            // Successful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            guard let cb = FfiConverterCallbackInterfaceBleServerImplementationDelegate.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeStartServer(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            guard let cb = FfiConverterCallbackInterfaceBleServerImplementationDelegate.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeStopServer(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

private func uniffiCallbackInitBleServerImplementationDelegate() {
    uniffi_data_rct_ffi_fn_init_callback_bleserverimplementationdelegate(uniffiCallbackHandlerBleServerImplementationDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceBleServerImplementationDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<BleServerImplementationDelegate>()
}

extension FfiConverterCallbackInterfaceBleServerImplementationDelegate: FfiConverter {
    typealias SwiftType = BleServerImplementationDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol DeviceListUpdateDelegate: AnyObject {
    func deviceAdded(value: Device)

    func deviceRemoved(deviceId: String)
}

// Declaration and FfiConverters for DeviceListUpdateDelegate Callback Interface

private let uniffiCallbackHandlerDeviceListUpdateDelegate: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeDeviceAdded(_ swiftCallbackInterface: DeviceListUpdateDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
            func makeCall() throws -> Int32 {
                swiftCallbackInterface.deviceAdded(
                    value: try FfiConverterTypeDevice.read(from: &reader)
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        func invokeDeviceRemoved(_ swiftCallbackInterface: DeviceListUpdateDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
            func makeCall() throws -> Int32 {
                swiftCallbackInterface.deviceRemoved(
                    deviceId: try FfiConverterString.read(from: &reader)
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceDeviceListUpdateDelegate.handleMap.remove(handle: handle)
            // Successful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            guard let cb = FfiConverterCallbackInterfaceDeviceListUpdateDelegate.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeDeviceAdded(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            guard let cb = FfiConverterCallbackInterfaceDeviceListUpdateDelegate.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeDeviceRemoved(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

private func uniffiCallbackInitDeviceListUpdateDelegate() {
    uniffi_data_rct_ffi_fn_init_callback_devicelistupdatedelegate(uniffiCallbackHandlerDeviceListUpdateDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceDeviceListUpdateDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<DeviceListUpdateDelegate>()
}

extension FfiConverterCallbackInterfaceDeviceListUpdateDelegate: FfiConverter {
    typealias SwiftType = DeviceListUpdateDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol L2capClientDelegate: AnyObject {
    func openL2capConnection(peripheralUuid: String, psm: UInt32) -> NativeStream?
}

// Declaration and FfiConverters for L2capClientDelegate Callback Interface

private let uniffiCallbackHandlerL2CAPClientDelegate: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeOpenL2capConnection(_ swiftCallbackInterface: L2capClientDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
            func makeCall() throws -> Int32 {
                let result = swiftCallbackInterface.openL2capConnection(
                    peripheralUuid: try FfiConverterString.read(from: &reader),
                    psm: try FfiConverterUInt32.read(from: &reader)
                )
                var writer = [UInt8]()
                FfiConverterOptionTypeNativeStream.write(result, into: &writer)
                out_buf.pointee = RustBuffer(bytes: writer)
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceL2capClientDelegate.handleMap.remove(handle: handle)
            // Successful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            guard let cb = FfiConverterCallbackInterfaceL2capClientDelegate.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeOpenL2capConnection(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

private func uniffiCallbackInitL2CAPClientDelegate() {
    uniffi_data_rct_ffi_fn_init_callback_l2capclientdelegate(uniffiCallbackHandlerL2CAPClientDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceL2capClientDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<L2capClientDelegate>()
}

extension FfiConverterCallbackInterfaceL2capClientDelegate: FfiConverter {
    typealias SwiftType = L2capClientDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol NativeStreamDelegate: AnyObject {
    func write(data: Data) -> UInt64

    func close()
}

// Declaration and FfiConverters for NativeStreamDelegate Callback Interface

private let uniffiCallbackHandlerNativeStreamDelegate: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeWrite(_ swiftCallbackInterface: NativeStreamDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
            func makeCall() throws -> Int32 {
                let result = swiftCallbackInterface.write(
                    data: try FfiConverterData.read(from: &reader)
                )
                var writer = [UInt8]()
                FfiConverterUInt64.write(result, into: &writer)
                out_buf.pointee = RustBuffer(bytes: writer)
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        func invokeClose(_ swiftCallbackInterface: NativeStreamDelegate, _: UnsafePointer<UInt8>, _: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            func makeCall() throws -> Int32 {
                swiftCallbackInterface.close(
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceNativeStreamDelegate.handleMap.remove(handle: handle)
            // Successful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            guard let cb = FfiConverterCallbackInterfaceNativeStreamDelegate.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeWrite(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            guard let cb = FfiConverterCallbackInterfaceNativeStreamDelegate.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeClose(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

private func uniffiCallbackInitNativeStreamDelegate() {
    uniffi_data_rct_ffi_fn_init_callback_nativestreamdelegate(uniffiCallbackHandlerNativeStreamDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceNativeStreamDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<NativeStreamDelegate>()
}

extension FfiConverterCallbackInterfaceNativeStreamDelegate: FfiConverter {
    typealias SwiftType = NativeStreamDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol NearbyConnectionDelegate: AnyObject {
    func receivedConnectionRequest(request: ConnectionRequest)
}

// Declaration and FfiConverters for NearbyConnectionDelegate Callback Interface

private let uniffiCallbackHandlerNearbyConnectionDelegate: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeReceivedConnectionRequest(_ swiftCallbackInterface: NearbyConnectionDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
            func makeCall() throws -> Int32 {
                swiftCallbackInterface.receivedConnectionRequest(
                    request: try FfiConverterTypeConnectionRequest.read(from: &reader)
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceNearbyConnectionDelegate.handleMap.remove(handle: handle)
            // Successful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            guard let cb = FfiConverterCallbackInterfaceNearbyConnectionDelegate.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeReceivedConnectionRequest(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

private func uniffiCallbackInitNearbyConnectionDelegate() {
    uniffi_data_rct_ffi_fn_init_callback_nearbyconnectiondelegate(uniffiCallbackHandlerNearbyConnectionDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceNearbyConnectionDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<NearbyConnectionDelegate>()
}

extension FfiConverterCallbackInterfaceNearbyConnectionDelegate: FfiConverter {
    typealias SwiftType = NearbyConnectionDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol ProgressDelegate: AnyObject {
    func progressChanged(progress: SendProgressState)
}

// Declaration and FfiConverters for ProgressDelegate Callback Interface

private let uniffiCallbackHandlerProgressDelegate: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeProgressChanged(_ swiftCallbackInterface: ProgressDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
            func makeCall() throws -> Int32 {
                swiftCallbackInterface.progressChanged(
                    progress: try FfiConverterTypeSendProgressState.read(from: &reader)
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceProgressDelegate.handleMap.remove(handle: handle)
            // Successful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            guard let cb = FfiConverterCallbackInterfaceProgressDelegate.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeProgressChanged(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

private func uniffiCallbackInitProgressDelegate() {
    uniffi_data_rct_ffi_fn_init_callback_progressdelegate(uniffiCallbackHandlerProgressDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceProgressDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<ProgressDelegate>()
}

extension FfiConverterCallbackInterfaceProgressDelegate: FfiConverter {
    typealias SwiftType = ProgressDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeNativeStream: FfiConverterRustBuffer {
    typealias SwiftType = NativeStream?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeNativeStream.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeNativeStream.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeClipboardTransferIntent: FfiConverterRustBuffer {
    typealias SwiftType = ClipboardTransferIntent?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeClipboardTransferIntent.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeClipboardTransferIntent.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeFileTransferIntent: FfiConverterRustBuffer {
    typealias SwiftType = FileTransferIntent?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFileTransferIntent.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFileTransferIntent.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionCallbackInterfaceDeviceListUpdateDelegate: FfiConverterRustBuffer {
    typealias SwiftType = DeviceListUpdateDelegate?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterCallbackInterfaceDeviceListUpdateDelegate.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceDeviceListUpdateDelegate.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionCallbackInterfaceProgressDelegate: FfiConverterRustBuffer {
    typealias SwiftType = ProgressDelegate?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterCallbackInterfaceProgressDelegate.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceProgressDelegate.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

private func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UnsafeMutableRawPointer,
    pollFunc: (UnsafeMutableRawPointer, @escaping UniFfiRustFutureContinuation, UnsafeMutableRawPointer) -> Void,
    completeFunc: (UnsafeMutableRawPointer, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UnsafeMutableRawPointer) -> Void,
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(rustFuture, uniffiFutureContinuationCallback, ContinuationHolder($0).toOpaque())
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureContinuationCallback(ptr: UnsafeMutableRawPointer, pollResult: Int8) {
    ContinuationHolder.fromOpaque(ptr).resume(pollResult)
}

// Wraps UnsafeContinuation in a class so that we can use reference counting when passing it across
// the FFI
private class ContinuationHolder {
    let continuation: UnsafeContinuation<Int8, Never>

    init(_ continuation: UnsafeContinuation<Int8, Never>) {
        self.continuation = continuation
    }

    func resume(_ pollResult: Int8) {
        continuation.resume(returning: pollResult)
    }

    func toOpaque() -> UnsafeMutableRawPointer {
        return Unmanaged<ContinuationHolder>.passRetained(self).toOpaque()
    }

    static func fromOpaque(_ ptr: UnsafeRawPointer) -> ContinuationHolder {
        return Unmanaged<ContinuationHolder>.fromOpaque(ptr).takeRetainedValue()
    }
}

public func getBleCharacteristicUuid() -> String {
    return try! FfiConverterString.lift(
        try! rustCall {
            uniffi_data_rct_ffi_fn_func_get_ble_characteristic_uuid($0)
        }
    )
}

public func getBleServiceUuid() -> String {
    return try! FfiConverterString.lift(
        try! rustCall {
            uniffi_data_rct_ffi_fn_func_get_ble_service_uuid($0)
        }
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_data_rct_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_data_rct_ffi_checksum_func_get_ble_characteristic_uuid() != 53557 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_func_get_ble_service_uuid() != 26941 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_connectionrequest_accept() != 65071 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_connectionrequest_decline() != 22570 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_connectionrequest_get_clipboard_intent() != 15310 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_connectionrequest_get_file_transfer_intent() != 7548 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_connectionrequest_get_intent_type() != 43069 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_connectionrequest_get_sender() != 11619 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internaldiscovery_add_ble_implementation() != 43846 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internaldiscovery_parse_discovery_message() != 65291 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internaldiscovery_start() != 50475 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internaldiscovery_stop() != 51582 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_nativestream_fill_buffer() != 47959 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_add_ble_implementation() != 33524 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_add_l2cap_client() != 29751 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_change_device() != 39335 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_get_advertisement_data() != 9521 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_send_file() != 851 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_set_ble_connection_details() != 32984 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_set_tcp_details() != 26676 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_start() != 36830 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_internalnearbyserver_stop() != 4904 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_constructor_internaldiscovery_new() != 38932 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_constructor_nativestream_new() != 61593 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_constructor_internalnearbyserver_new() != 19105 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_blediscoveryimplementationdelegate_start_scanning() != 20220 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_blediscoveryimplementationdelegate_stop_scanning() != 49638 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_bleserverimplementationdelegate_start_server() != 14817 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_bleserverimplementationdelegate_stop_server() != 32196 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_devicelistupdatedelegate_device_added() != 5039 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_devicelistupdatedelegate_device_removed() != 65271 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_l2capclientdelegate_open_l2cap_connection() != 18200 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_nativestreamdelegate_write() != 8086 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_nativestreamdelegate_close() != 25937 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_nearbyconnectiondelegate_received_connection_request() != 34830 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_data_rct_ffi_checksum_method_progressdelegate_progress_changed() != 52611 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitBleDiscoveryImplementationDelegate()
    uniffiCallbackInitBleServerImplementationDelegate()
    uniffiCallbackInitDeviceListUpdateDelegate()
    uniffiCallbackInitL2CAPClientDelegate()
    uniffiCallbackInitNativeStreamDelegate()
    uniffiCallbackInitNearbyConnectionDelegate()
    uniffiCallbackInitProgressDelegate()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
