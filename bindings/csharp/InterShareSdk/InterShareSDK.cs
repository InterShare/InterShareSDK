// <auto-generated>
//     This file was generated by uniffi-bindgen-cs v0.8.3+v0.25.0
//     See https://github.com/NordSecurity/uniffi-bindgen-cs for more information.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;

namespace InterShareSdk;

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

[StructLayout(LayoutKind.Sequential)]
internal struct RustBuffer
{
    public int capacity;
    public int len;
    public IntPtr data;

    public static RustBuffer Alloc(int size)
    {
        return _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                var buffer = _UniFFILib.ffi_intershare_sdk_ffi_rustbuffer_alloc(size, ref status);
                if (buffer.data == IntPtr.Zero)
                {
                    throw new AllocationException(
                        $"RustBuffer.Alloc() returned null data pointer (size={size})"
                    );
                }
                return buffer;
            }
        );
    }

    public static void Free(RustBuffer buffer)
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.ffi_intershare_sdk_ffi_rustbuffer_free(buffer, ref status);
            }
        );
    }

    public static BigEndianStream MemoryStream(IntPtr data, int length)
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), length));
        }
    }

    public BigEndianStream AsStream()
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), len));
        }
    }

    public BigEndianStream AsWriteableStream()
    {
        unsafe
        {
            return new BigEndianStream(
                new UnmanagedMemoryStream(
                    (byte*)data.ToPointer(),
                    capacity,
                    capacity,
                    FileAccess.Write
                )
            );
        }
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to managed memory, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

[StructLayout(LayoutKind.Sequential)]
internal struct ForeignBytes
{
    public int length;
    public IntPtr data;
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
internal abstract class FfiConverter<CsType, FfiType>
{
    // Convert an FFI type to a C# type
    public abstract CsType Lift(FfiType value);

    // Convert C# type to an FFI type
    public abstract FfiType Lower(CsType value);

    // Read a C# type from a `ByteBuffer`
    public abstract CsType Read(BigEndianStream stream);

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    public abstract int AllocationSize(CsType value);

    // Write a C# type to a `ByteBuffer`
    public abstract void Write(CsType value, BigEndianStream stream);

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    public RustBuffer LowerIntoRustBuffer(CsType value)
    {
        var rbuf = RustBuffer.Alloc(AllocationSize(value));
        try
        {
            var stream = rbuf.AsWriteableStream();
            Write(value, stream);
            rbuf.len = Convert.ToInt32(stream.Position);
            return rbuf;
        }
        catch
        {
            RustBuffer.Free(rbuf);
            throw;
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    protected CsType LiftFromRustBuffer(RustBuffer rbuf)
    {
        var stream = rbuf.AsStream();
        try
        {
            var item = Read(stream);
            if (stream.HasRemaining())
            {
                throw new InternalException(
                    "junk remaining in buffer after lifting, something is very wrong!!"
                );
            }
            return item;
        }
        finally
        {
            RustBuffer.Free(rbuf);
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
internal abstract class FfiConverterRustBuffer<CsType> : FfiConverter<CsType, RustBuffer>
{
    public override CsType Lift(RustBuffer value)
    {
        return LiftFromRustBuffer(value);
    }

    public override RustBuffer Lower(CsType value)
    {
        return LowerIntoRustBuffer(value);
    }
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
[StructLayout(LayoutKind.Sequential)]
struct RustCallStatus
{
    public sbyte code;
    public RustBuffer error_buf;

    public bool IsSuccess()
    {
        return code == 0;
    }

    public bool IsError()
    {
        return code == 1;
    }

    public bool IsPanic()
    {
        return code == 2;
    }
}

// Base class for all uniffi exceptions
public class UniffiException : Exception
{
    public UniffiException()
        : base() { }

    public UniffiException(string message)
        : base(message) { }
}

public class UndeclaredErrorException : UniffiException
{
    public UndeclaredErrorException(string message)
        : base(message) { }
}

public class PanicException : UniffiException
{
    public PanicException(string message)
        : base(message) { }
}

public class AllocationException : UniffiException
{
    public AllocationException(string message)
        : base(message) { }
}

public class InternalException : UniffiException
{
    public InternalException(string message)
        : base(message) { }
}

public class InvalidEnumException : InternalException
{
    public InvalidEnumException(string message)
        : base(message) { }
}

public class UniffiContractVersionException : UniffiException
{
    public UniffiContractVersionException(string message)
        : base(message) { }
}

public class UniffiContractChecksumException : UniffiException
{
    public UniffiContractChecksumException(string message)
        : base(message) { }
}

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E>
    where E : Exception
{
    E Lift(RustBuffer error_buf);
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
class NullCallStatusErrorHandler : CallStatusErrorHandler<UniffiException>
{
    public static NullCallStatusErrorHandler INSTANCE = new NullCallStatusErrorHandler();

    public UniffiException Lift(RustBuffer error_buf)
    {
        RustBuffer.Free(error_buf);
        return new UndeclaredErrorException(
            "library has returned an error not declared in UNIFFI interface file"
        );
    }
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
class _UniffiHelpers
{
    public delegate void RustCallAction(ref RustCallStatus status);
    public delegate U RustCallFunc<out U>(ref RustCallStatus status);

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static U RustCallWithError<U, E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallFunc<U> callback
    )
        where E : UniffiException
    {
        var status = new RustCallStatus();
        var return_value = callback(ref status);
        if (status.IsSuccess())
        {
            return return_value;
        }
        else if (status.IsError())
        {
            throw errorHandler.Lift(status.error_buf);
        }
        else if (status.IsPanic())
        {
            // when the rust code sees a panic, it tries to construct a rustbuffer
            // with the message.  but if that code panics, then it just sends back
            // an empty buffer.
            if (status.error_buf.len > 0)
            {
                throw new PanicException(FfiConverterString.INSTANCE.Lift(status.error_buf));
            }
            else
            {
                throw new PanicException("Rust panic");
            }
        }
        else
        {
            throw new InternalException($"Unknown rust call status: {status.code}");
        }
    }

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static void RustCallWithError<E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallAction callback
    )
        where E : UniffiException
    {
        _UniffiHelpers.RustCallWithError(
            errorHandler,
            (ref RustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }

    // Call a rust function that returns a plain value
    public static U RustCall<U>(RustCallFunc<U> callback)
    {
        return _UniffiHelpers.RustCallWithError(NullCallStatusErrorHandler.INSTANCE, callback);
    }

    // Call a rust function that returns a plain value
    public static void RustCall(RustCallAction callback)
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }
}

// Big endian streams are not yet available in dotnet :'(
// https://github.com/dotnet/runtime/issues/26904

class StreamUnderflowException : Exception
{
    public StreamUnderflowException() { }
}

class BigEndianStream
{
    Stream stream;

    public BigEndianStream(Stream stream)
    {
        this.stream = stream;
    }

    public bool HasRemaining()
    {
        return (stream.Length - stream.Position) > 0;
    }

    public long Position
    {
        get => stream.Position;
        set => stream.Position = value;
    }

    public void WriteBytes(byte[] value)
    {
        stream.Write(value, 0, value.Length);
    }

    public void WriteByte(byte value)
    {
        stream.WriteByte(value);
    }

    public void WriteUShort(ushort value)
    {
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteUInt(uint value)
    {
        stream.WriteByte((byte)(value >> 24));
        stream.WriteByte((byte)(value >> 16));
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteULong(ulong value)
    {
        WriteUInt((uint)(value >> 32));
        WriteUInt((uint)value);
    }

    public void WriteSByte(sbyte value)
    {
        stream.WriteByte((byte)value);
    }

    public void WriteShort(short value)
    {
        WriteUShort((ushort)value);
    }

    public void WriteInt(int value)
    {
        WriteUInt((uint)value);
    }

    public void WriteFloat(float value)
    {
        unsafe
        {
            WriteInt(*((int*)&value));
        }
    }

    public void WriteLong(long value)
    {
        WriteULong((ulong)value);
    }

    public void WriteDouble(double value)
    {
        WriteLong(BitConverter.DoubleToInt64Bits(value));
    }

    public byte[] ReadBytes(int length)
    {
        CheckRemaining(length);
        byte[] result = new byte[length];
        stream.Read(result, 0, length);
        return result;
    }

    public byte ReadByte()
    {
        CheckRemaining(1);
        return Convert.ToByte(stream.ReadByte());
    }

    public ushort ReadUShort()
    {
        CheckRemaining(2);
        return (ushort)(stream.ReadByte() << 8 | stream.ReadByte());
    }

    public uint ReadUInt()
    {
        CheckRemaining(4);
        return (uint)(
            stream.ReadByte() << 24
            | stream.ReadByte() << 16
            | stream.ReadByte() << 8
            | stream.ReadByte()
        );
    }

    public ulong ReadULong()
    {
        return (ulong)ReadUInt() << 32 | (ulong)ReadUInt();
    }

    public sbyte ReadSByte()
    {
        return (sbyte)ReadByte();
    }

    public short ReadShort()
    {
        return (short)ReadUShort();
    }

    public int ReadInt()
    {
        return (int)ReadUInt();
    }

    public float ReadFloat()
    {
        unsafe
        {
            int value = ReadInt();
            return *((float*)&value);
        }
    }

    public long ReadLong()
    {
        return (long)ReadULong();
    }

    public double ReadDouble()
    {
        return BitConverter.Int64BitsToDouble(ReadLong());
    }

    private void CheckRemaining(int length)
    {
        if (stream.Length - stream.Position < length)
        {
            throw new StreamUnderflowException();
        }
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.


// This is an implementation detail which will be called internally by the public API.
static class _UniFFILib
{
    static _UniFFILib()
    {
        _UniFFILib.uniffiCheckContractApiVersion();
        _UniFFILib.uniffiCheckApiChecksums();

        FfiConverterTypeDiscoveryDelegate.INSTANCE.Register();
        FfiConverterTypeNearbyConnectionDelegate.INSTANCE.Register();
        FfiConverterTypeReceiveProgressDelegate.INSTANCE.Register();
        FfiConverterTypeSendProgressDelegate.INSTANCE.Register();
    }

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_free_connectionrequest(
        IntPtr ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern RustBuffer uniffi_intershare_sdk_ffi_fn_method_connectionrequest_accept(
        ConnectionRequestSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_method_connectionrequest_cancel(
        ConnectionRequestSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_method_connectionrequest_decline(
        ConnectionRequestSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern RustBuffer uniffi_intershare_sdk_ffi_fn_method_connectionrequest_get_clipboard_intent(
        ConnectionRequestSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern RustBuffer uniffi_intershare_sdk_ffi_fn_method_connectionrequest_get_file_transfer_intent(
        ConnectionRequestSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern RustBuffer uniffi_intershare_sdk_ffi_fn_method_connectionrequest_get_intent_type(
        ConnectionRequestSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern RustBuffer uniffi_intershare_sdk_ffi_fn_method_connectionrequest_get_sender(
        ConnectionRequestSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_method_connectionrequest_set_progress_delegate(
        ConnectionRequestSafeHandle @ptr,
        ulong @delegate,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_free_discovery(
        IntPtr ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern DiscoverySafeHandle uniffi_intershare_sdk_ffi_fn_constructor_discovery_new(
        RustBuffer @delegate,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern RustBuffer uniffi_intershare_sdk_ffi_fn_method_discovery_get_devices(
        DiscoverySafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_method_discovery_start(
        DiscoverySafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_method_discovery_stop(
        DiscoverySafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_free_nearbyserver(
        IntPtr ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern NearbyServerSafeHandle uniffi_intershare_sdk_ffi_fn_constructor_nearbyserver_new(
        RustBuffer @myDevice,
        RustBuffer @delegate,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_method_nearbyserver_restart_server(
        NearbyServerSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_method_nearbyserver_send_files(
        NearbyServerSafeHandle @ptr,
        RustBuffer @receiver,
        RustBuffer @filePaths,
        RustBuffer @progressDelegate,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_method_nearbyserver_start(
        NearbyServerSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_method_nearbyserver_stop(
        NearbyServerSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_init_callback_discoverydelegate(
        ForeignCallback @callbackStub,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_init_callback_nearbyconnectiondelegate(
        ForeignCallback @callbackStub,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_init_callback_receiveprogressdelegate(
        ForeignCallback @callbackStub,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void uniffi_intershare_sdk_ffi_fn_init_callback_sendprogressdelegate(
        ForeignCallback @callbackStub,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern RustBuffer ffi_intershare_sdk_ffi_rustbuffer_alloc(
        int @size,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern RustBuffer ffi_intershare_sdk_ffi_rustbuffer_from_bytes(
        ForeignBytes @bytes,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rustbuffer_free(
        RustBuffer @buf,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern RustBuffer ffi_intershare_sdk_ffi_rustbuffer_reserve(
        RustBuffer @buf,
        int @additional,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_continuation_callback_set(
        IntPtr @callback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_u8(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_u8(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_u8(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern byte ffi_intershare_sdk_ffi_rust_future_complete_u8(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_i8(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_i8(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_i8(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern sbyte ffi_intershare_sdk_ffi_rust_future_complete_i8(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_u16(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_u16(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_u16(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort ffi_intershare_sdk_ffi_rust_future_complete_u16(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_i16(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_i16(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_i16(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern short ffi_intershare_sdk_ffi_rust_future_complete_i16(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_u32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_u32(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_u32(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern uint ffi_intershare_sdk_ffi_rust_future_complete_u32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_i32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_i32(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_i32(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern int ffi_intershare_sdk_ffi_rust_future_complete_i32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_u64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_u64(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_u64(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern ulong ffi_intershare_sdk_ffi_rust_future_complete_u64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_i64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_i64(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_i64(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern long ffi_intershare_sdk_ffi_rust_future_complete_i64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_f32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_f32(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_f32(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern float ffi_intershare_sdk_ffi_rust_future_complete_f32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_f64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_f64(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_f64(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern double ffi_intershare_sdk_ffi_rust_future_complete_f64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_pointer(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_pointer(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_pointer(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern SafeHandle ffi_intershare_sdk_ffi_rust_future_complete_pointer(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_rust_buffer(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_rust_buffer(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_rust_buffer(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern RustBuffer ffi_intershare_sdk_ffi_rust_future_complete_rust_buffer(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_poll_void(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_cancel_void(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_free_void(IntPtr @handle);

    [DllImport("intershare_sdk_ffi")]
    public static extern void ffi_intershare_sdk_ffi_rust_future_complete_void(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_accept();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_cancel();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_decline();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_clipboard_intent();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_file_transfer_intent();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_intent_type();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_sender();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_set_progress_delegate();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_discovery_get_devices();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_discovery_start();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_discovery_stop();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_restart_server();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_send_files();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_start();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_stop();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_constructor_discovery_new();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_constructor_nearbyserver_new();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_discoverydelegate_device_added();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_discoverydelegate_device_removed();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_nearbyconnectiondelegate_received_connection_request();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_receiveprogressdelegate_progress_changed();

    [DllImport("intershare_sdk_ffi")]
    public static extern ushort uniffi_intershare_sdk_ffi_checksum_method_sendprogressdelegate_progress_changed();

    [DllImport("intershare_sdk_ffi")]
    public static extern uint ffi_intershare_sdk_ffi_uniffi_contract_version();

    static void uniffiCheckContractApiVersion()
    {
        var scaffolding_contract_version =
            _UniFFILib.ffi_intershare_sdk_ffi_uniffi_contract_version();
        if (24 != scaffolding_contract_version)
        {
            throw new UniffiContractVersionException(
                $"InterShareSdk: uniffi bindings expected version `24`, library returned `{scaffolding_contract_version}`"
            );
        }
    }

    static void uniffiCheckApiChecksums()
    {
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_accept();
            if (checksum != 45482)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_accept` checksum `45482`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_cancel();
            if (checksum != 18599)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_cancel` checksum `18599`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_decline();
            if (checksum != 63855)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_decline` checksum `63855`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_clipboard_intent();
            if (checksum != 37755)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_clipboard_intent` checksum `37755`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_file_transfer_intent();
            if (checksum != 26190)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_file_transfer_intent` checksum `26190`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_intent_type();
            if (checksum != 23754)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_intent_type` checksum `23754`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_sender();
            if (checksum != 63299)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_get_sender` checksum `63299`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_set_progress_delegate();
            if (checksum != 55403)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_connectionrequest_set_progress_delegate` checksum `55403`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_discovery_get_devices();
            if (checksum != 5476)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_discovery_get_devices` checksum `5476`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_discovery_start();
            if (checksum != 56670)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_discovery_start` checksum `56670`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_discovery_stop();
            if (checksum != 58263)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_discovery_stop` checksum `58263`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_restart_server();
            if (checksum != 25605)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_restart_server` checksum `25605`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_send_files();
            if (checksum != 47236)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_send_files` checksum `47236`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_start();
            if (checksum != 15360)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_start` checksum `15360`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_stop();
            if (checksum != 6880)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_nearbyserver_stop` checksum `6880`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_constructor_discovery_new();
            if (checksum != 45174)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_constructor_discovery_new` checksum `45174`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_constructor_nearbyserver_new();
            if (checksum != 37931)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_constructor_nearbyserver_new` checksum `37931`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_discoverydelegate_device_added();
            if (checksum != 25589)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_discoverydelegate_device_added` checksum `25589`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_discoverydelegate_device_removed();
            if (checksum != 47625)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_discoverydelegate_device_removed` checksum `47625`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_nearbyconnectiondelegate_received_connection_request();
            if (checksum != 25692)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_nearbyconnectiondelegate_received_connection_request` checksum `25692`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_receiveprogressdelegate_progress_changed();
            if (checksum != 41019)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_receiveprogressdelegate_progress_changed` checksum `41019`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_ffi_checksum_method_sendprogressdelegate_progress_changed();
            if (checksum != 36451)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_ffi_checksum_method_sendprogressdelegate_progress_changed` checksum `36451`, library returned `{checksum}`"
                );
            }
        }
    }
}

// Public interface members begin here.

#pragma warning disable 8625




class FfiConverterUInt32 : FfiConverter<uint, uint>
{
    public static FfiConverterUInt32 INSTANCE = new FfiConverterUInt32();

    public override uint Lift(uint value)
    {
        return value;
    }

    public override uint Read(BigEndianStream stream)
    {
        return stream.ReadUInt();
    }

    public override uint Lower(uint value)
    {
        return value;
    }

    public override int AllocationSize(uint value)
    {
        return 4;
    }

    public override void Write(uint value, BigEndianStream stream)
    {
        stream.WriteUInt(value);
    }
}

class FfiConverterInt32 : FfiConverter<int, int>
{
    public static FfiConverterInt32 INSTANCE = new FfiConverterInt32();

    public override int Lift(int value)
    {
        return value;
    }

    public override int Read(BigEndianStream stream)
    {
        return stream.ReadInt();
    }

    public override int Lower(int value)
    {
        return value;
    }

    public override int AllocationSize(int value)
    {
        return 4;
    }

    public override void Write(int value, BigEndianStream stream)
    {
        stream.WriteInt(value);
    }
}

class FfiConverterUInt64 : FfiConverter<ulong, ulong>
{
    public static FfiConverterUInt64 INSTANCE = new FfiConverterUInt64();

    public override ulong Lift(ulong value)
    {
        return value;
    }

    public override ulong Read(BigEndianStream stream)
    {
        return stream.ReadULong();
    }

    public override ulong Lower(ulong value)
    {
        return value;
    }

    public override int AllocationSize(ulong value)
    {
        return 8;
    }

    public override void Write(ulong value, BigEndianStream stream)
    {
        stream.WriteULong(value);
    }
}

class FfiConverterDouble : FfiConverter<double, double>
{
    public static FfiConverterDouble INSTANCE = new FfiConverterDouble();

    public override double Lift(double value)
    {
        return value;
    }

    public override double Read(BigEndianStream stream)
    {
        return stream.ReadDouble();
    }

    public override double Lower(double value)
    {
        return value;
    }

    public override int AllocationSize(double value)
    {
        return 8;
    }

    public override void Write(double value, BigEndianStream stream)
    {
        stream.WriteDouble(value);
    }
}

class FfiConverterString : FfiConverter<string, RustBuffer>
{
    public static FfiConverterString INSTANCE = new FfiConverterString();

    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    public override string Lift(RustBuffer value)
    {
        try
        {
            var bytes = value.AsStream().ReadBytes(value.len);
            return System.Text.Encoding.UTF8.GetString(bytes);
        }
        finally
        {
            RustBuffer.Free(value);
        }
    }

    public override string Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var bytes = stream.ReadBytes(length);
        return System.Text.Encoding.UTF8.GetString(bytes);
    }

    public override RustBuffer Lower(string value)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        var rbuf = RustBuffer.Alloc(bytes.Length);
        rbuf.AsWriteableStream().WriteBytes(bytes);
        return rbuf;
    }

    // TODO(CS)
    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    public override int AllocationSize(string value)
    {
        const int sizeForLength = 4;
        var sizeForString = value.Length * 3;
        return sizeForLength + sizeForString;
    }

    public override void Write(string value, BigEndianStream stream)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        stream.WriteInt(bytes.Length);
        stream.WriteBytes(bytes);
    }
}

// `SafeHandle` implements the semantics outlined below, i.e. its thread safe, and the dispose
// method will only be called once, once all outstanding native calls have completed.
// https://github.com/mozilla/uniffi-rs/blob/0dc031132d9493ca812c3af6e7dd60ad2ea95bf0/uniffi_bindgen/src/bindings/kotlin/templates/ObjectRuntime.kt#L31
// https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.criticalhandle

public abstract class FFIObject<THandle> : IDisposable
    where THandle : FFISafeHandle
{
    private THandle handle;

    public FFIObject(THandle handle)
    {
        this.handle = handle;
    }

    public THandle GetHandle()
    {
        return handle;
    }

    public void Dispose()
    {
        handle.Dispose();
    }
}

public abstract class FFISafeHandle : SafeHandle
{
    public FFISafeHandle()
        : base(new IntPtr(0), true) { }

    public FFISafeHandle(IntPtr pointer)
        : this()
    {
        this.SetHandle(pointer);
    }

    public override bool IsInvalid
    {
        get { return handle.ToInt64() == 0; }
    }

    // TODO(CS) this completely breaks any guarantees offered by SafeHandle.. Extracting
    // raw value from SafeHandle puts responsiblity on the consumer of this function to
    // ensure that SafeHandle outlives the stream, and anyone who might have read the raw
    // value from the stream and are holding onto it. Otherwise, the result might be a use
    // after free, or free while method calls are still in flight.
    //
    // This is also relevant for Kotlin.
    //
    public IntPtr DangerousGetRawFfiValue()
    {
        return handle;
    }
}

static class FFIObjectUtil
{
    public static void DisposeAll(params Object?[] list)
    {
        foreach (var obj in list)
        {
            Dispose(obj);
        }
    }

    // Dispose is implemented by recursive type inspection at runtime. This is because
    // generating correct Dispose calls for recursive complex types, e.g. List<List<int>>
    // is quite cumbersome.
    private static void Dispose(dynamic? obj)
    {
        if (obj == null)
        {
            return;
        }

        if (obj is IDisposable disposable)
        {
            disposable.Dispose();
            return;
        }

        var type = obj.GetType();
        if (type != null)
        {
            if (type.IsGenericType)
            {
                if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))
                {
                    foreach (var value in obj)
                    {
                        Dispose(value);
                    }
                }
                else if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(Dictionary<,>)))
                {
                    foreach (var value in obj.Values)
                    {
                        Dispose(value);
                    }
                }
            }
        }
    }
}

public interface IConnectionRequest
{
    List<String>? Accept();

    void Cancel();

    void Decline();

    ClipboardTransferIntent? GetClipboardIntent();

    FileTransferIntent? GetFileTransferIntent();

    ConnectionIntentType GetIntentType();

    Device GetSender();

    void SetProgressDelegate(ReceiveProgressDelegate @delegate);
}

public class ConnectionRequestSafeHandle : FFISafeHandle
{
    public ConnectionRequestSafeHandle()
        : base() { }

    public ConnectionRequestSafeHandle(IntPtr pointer)
        : base(pointer) { }

    protected override bool ReleaseHandle()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_free_connectionrequest(
                    this.handle,
                    ref status
                );
            }
        );
        return true;
    }
}

public class ConnectionRequest : FFIObject<ConnectionRequestSafeHandle>, IConnectionRequest
{
    public ConnectionRequest(ConnectionRequestSafeHandle pointer)
        : base(pointer) { }

    public List<String>? Accept()
    {
        return FfiConverterOptionalSequenceString.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_connectionrequest_accept(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    public void Cancel()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_connectionrequest_cancel(
                    this.GetHandle(),
                    ref _status
                )
        );
    }

    public void Decline()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_connectionrequest_decline(
                    this.GetHandle(),
                    ref _status
                )
        );
    }

    public ClipboardTransferIntent? GetClipboardIntent()
    {
        return FfiConverterOptionalTypeClipboardTransferIntent.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_connectionrequest_get_clipboard_intent(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    public FileTransferIntent? GetFileTransferIntent()
    {
        return FfiConverterOptionalTypeFileTransferIntent.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_connectionrequest_get_file_transfer_intent(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    public ConnectionIntentType GetIntentType()
    {
        return FfiConverterTypeConnectionIntentType.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_connectionrequest_get_intent_type(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    public Device GetSender()
    {
        return FfiConverterTypeDevice.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_connectionrequest_get_sender(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    public void SetProgressDelegate(ReceiveProgressDelegate @delegate)
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_connectionrequest_set_progress_delegate(
                    this.GetHandle(),
                    FfiConverterTypeReceiveProgressDelegate.INSTANCE.Lower(@delegate),
                    ref _status
                )
        );
    }
}

class FfiConverterTypeConnectionRequest
    : FfiConverter<ConnectionRequest, ConnectionRequestSafeHandle>
{
    public static FfiConverterTypeConnectionRequest INSTANCE =
        new FfiConverterTypeConnectionRequest();

    public override ConnectionRequestSafeHandle Lower(ConnectionRequest value)
    {
        return value.GetHandle();
    }

    public override ConnectionRequest Lift(ConnectionRequestSafeHandle value)
    {
        return new ConnectionRequest(value);
    }

    public override ConnectionRequest Read(BigEndianStream stream)
    {
        return Lift(new ConnectionRequestSafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(ConnectionRequest value)
    {
        return 8;
    }

    public override void Write(ConnectionRequest value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}

public interface IDiscovery
{
    List<Device> GetDevices();

    void Start();

    void Stop();
}

public class DiscoverySafeHandle : FFISafeHandle
{
    public DiscoverySafeHandle()
        : base() { }

    public DiscoverySafeHandle(IntPtr pointer)
        : base(pointer) { }

    protected override bool ReleaseHandle()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_free_discovery(this.handle, ref status);
            }
        );
        return true;
    }
}

public class Discovery : FFIObject<DiscoverySafeHandle>, IDiscovery
{
    public Discovery(DiscoverySafeHandle pointer)
        : base(pointer) { }

    public Discovery(DiscoveryDelegate? @delegate)
        : this(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeDiscoverySetupException.INSTANCE,
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_ffi_fn_constructor_discovery_new(
                        FfiConverterOptionalTypeDiscoveryDelegate.INSTANCE.Lower(@delegate),
                        ref _status
                    )
            )
        ) { }

    public List<Device> GetDevices()
    {
        return FfiConverterSequenceTypeDevice.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_discovery_get_devices(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    public void Start()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_discovery_start(
                    this.GetHandle(),
                    ref _status
                )
        );
    }

    public void Stop()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_discovery_stop(
                    this.GetHandle(),
                    ref _status
                )
        );
    }
}

class FfiConverterTypeDiscovery : FfiConverter<Discovery, DiscoverySafeHandle>
{
    public static FfiConverterTypeDiscovery INSTANCE = new FfiConverterTypeDiscovery();

    public override DiscoverySafeHandle Lower(Discovery value)
    {
        return value.GetHandle();
    }

    public override Discovery Lift(DiscoverySafeHandle value)
    {
        return new Discovery(value);
    }

    public override Discovery Read(BigEndianStream stream)
    {
        return Lift(new DiscoverySafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(Discovery value)
    {
        return 8;
    }

    public override void Write(Discovery value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}

public interface INearbyServer
{
    void RestartServer();

    /// <exception cref="ConnectErrors"></exception>
    void SendFiles(
        Device @receiver,
        List<String> @filePaths,
        SendProgressDelegate? @progressDelegate
    );

    void Start();

    void Stop();
}

public class NearbyServerSafeHandle : FFISafeHandle
{
    public NearbyServerSafeHandle()
        : base() { }

    public NearbyServerSafeHandle(IntPtr pointer)
        : base(pointer) { }

    protected override bool ReleaseHandle()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_free_nearbyserver(this.handle, ref status);
            }
        );
        return true;
    }
}

public class NearbyServer : FFIObject<NearbyServerSafeHandle>, INearbyServer
{
    public NearbyServer(NearbyServerSafeHandle pointer)
        : base(pointer) { }

    public NearbyServer(Device @myDevice, NearbyConnectionDelegate? @delegate)
        : this(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_ffi_fn_constructor_nearbyserver_new(
                        FfiConverterTypeDevice.INSTANCE.Lower(@myDevice),
                        FfiConverterOptionalTypeNearbyConnectionDelegate.INSTANCE.Lower(@delegate),
                        ref _status
                    )
            )
        ) { }

    public void RestartServer()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_nearbyserver_restart_server(
                    this.GetHandle(),
                    ref _status
                )
        );
    }

    /// <exception cref="ConnectErrors"></exception>
    public void SendFiles(
        Device @receiver,
        List<String> @filePaths,
        SendProgressDelegate? @progressDelegate
    )
    {
        _UniffiHelpers.RustCallWithError(
            FfiConverterTypeConnectErrors.INSTANCE,
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_nearbyserver_send_files(
                    this.GetHandle(),
                    FfiConverterTypeDevice.INSTANCE.Lower(@receiver),
                    FfiConverterSequenceString.INSTANCE.Lower(@filePaths),
                    FfiConverterOptionalTypeSendProgressDelegate.INSTANCE.Lower(@progressDelegate),
                    ref _status
                )
        );
    }

    public void Start()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_nearbyserver_start(
                    this.GetHandle(),
                    ref _status
                )
        );
    }

    public void Stop()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus _status) =>
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_method_nearbyserver_stop(
                    this.GetHandle(),
                    ref _status
                )
        );
    }
}

class FfiConverterTypeNearbyServer : FfiConverter<NearbyServer, NearbyServerSafeHandle>
{
    public static FfiConverterTypeNearbyServer INSTANCE = new FfiConverterTypeNearbyServer();

    public override NearbyServerSafeHandle Lower(NearbyServer value)
    {
        return value.GetHandle();
    }

    public override NearbyServer Lift(NearbyServerSafeHandle value)
    {
        return new NearbyServer(value);
    }

    public override NearbyServer Read(BigEndianStream stream)
    {
        return Lift(new NearbyServerSafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(NearbyServer value)
    {
        return 8;
    }

    public override void Write(NearbyServer value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}

public record BluetoothLeConnectionInfo(String @uuid, uint @psm) { }

class FfiConverterTypeBluetoothLeConnectionInfo : FfiConverterRustBuffer<BluetoothLeConnectionInfo>
{
    public static FfiConverterTypeBluetoothLeConnectionInfo INSTANCE =
        new FfiConverterTypeBluetoothLeConnectionInfo();

    public override BluetoothLeConnectionInfo Read(BigEndianStream stream)
    {
        return new BluetoothLeConnectionInfo(
            @uuid: FfiConverterString.INSTANCE.Read(stream),
            @psm: FfiConverterUInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(BluetoothLeConnectionInfo value)
    {
        return FfiConverterString.INSTANCE.AllocationSize(value.@uuid)
            + FfiConverterUInt32.INSTANCE.AllocationSize(value.@psm);
    }

    public override void Write(BluetoothLeConnectionInfo value, BigEndianStream stream)
    {
        FfiConverterString.INSTANCE.Write(value.@uuid, stream);
        FfiConverterUInt32.INSTANCE.Write(value.@psm, stream);
    }
}

public record ClipboardTransferIntent(String @clipboardContent) { }

class FfiConverterTypeClipboardTransferIntent : FfiConverterRustBuffer<ClipboardTransferIntent>
{
    public static FfiConverterTypeClipboardTransferIntent INSTANCE =
        new FfiConverterTypeClipboardTransferIntent();

    public override ClipboardTransferIntent Read(BigEndianStream stream)
    {
        return new ClipboardTransferIntent(
            @clipboardContent: FfiConverterString.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(ClipboardTransferIntent value)
    {
        return FfiConverterString.INSTANCE.AllocationSize(value.@clipboardContent);
    }

    public override void Write(ClipboardTransferIntent value, BigEndianStream stream)
    {
        FfiConverterString.INSTANCE.Write(value.@clipboardContent, stream);
    }
}

public record Device(String @id, String @name, int @deviceType) { }

class FfiConverterTypeDevice : FfiConverterRustBuffer<Device>
{
    public static FfiConverterTypeDevice INSTANCE = new FfiConverterTypeDevice();

    public override Device Read(BigEndianStream stream)
    {
        return new Device(
            @id: FfiConverterString.INSTANCE.Read(stream),
            @name: FfiConverterString.INSTANCE.Read(stream),
            @deviceType: FfiConverterInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(Device value)
    {
        return FfiConverterString.INSTANCE.AllocationSize(value.@id)
            + FfiConverterString.INSTANCE.AllocationSize(value.@name)
            + FfiConverterInt32.INSTANCE.AllocationSize(value.@deviceType);
    }

    public override void Write(Device value, BigEndianStream stream)
    {
        FfiConverterString.INSTANCE.Write(value.@id, stream);
        FfiConverterString.INSTANCE.Write(value.@name, stream);
        FfiConverterInt32.INSTANCE.Write(value.@deviceType, stream);
    }
}

public record FileTransferIntent(String? @fileName, ulong @fileSize, ulong @fileCount) { }

class FfiConverterTypeFileTransferIntent : FfiConverterRustBuffer<FileTransferIntent>
{
    public static FfiConverterTypeFileTransferIntent INSTANCE =
        new FfiConverterTypeFileTransferIntent();

    public override FileTransferIntent Read(BigEndianStream stream)
    {
        return new FileTransferIntent(
            @fileName: FfiConverterOptionalString.INSTANCE.Read(stream),
            @fileSize: FfiConverterUInt64.INSTANCE.Read(stream),
            @fileCount: FfiConverterUInt64.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(FileTransferIntent value)
    {
        return FfiConverterOptionalString.INSTANCE.AllocationSize(value.@fileName)
            + FfiConverterUInt64.INSTANCE.AllocationSize(value.@fileSize)
            + FfiConverterUInt64.INSTANCE.AllocationSize(value.@fileCount);
    }

    public override void Write(FileTransferIntent value, BigEndianStream stream)
    {
        FfiConverterOptionalString.INSTANCE.Write(value.@fileName, stream);
        FfiConverterUInt64.INSTANCE.Write(value.@fileSize, stream);
        FfiConverterUInt64.INSTANCE.Write(value.@fileCount, stream);
    }
}

public record TcpConnectionInfo(String @hostname, uint @port) { }

class FfiConverterTypeTcpConnectionInfo : FfiConverterRustBuffer<TcpConnectionInfo>
{
    public static FfiConverterTypeTcpConnectionInfo INSTANCE =
        new FfiConverterTypeTcpConnectionInfo();

    public override TcpConnectionInfo Read(BigEndianStream stream)
    {
        return new TcpConnectionInfo(
            @hostname: FfiConverterString.INSTANCE.Read(stream),
            @port: FfiConverterUInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(TcpConnectionInfo value)
    {
        return FfiConverterString.INSTANCE.AllocationSize(value.@hostname)
            + FfiConverterUInt32.INSTANCE.AllocationSize(value.@port);
    }

    public override void Write(TcpConnectionInfo value, BigEndianStream stream)
    {
        FfiConverterString.INSTANCE.Write(value.@hostname, stream);
        FfiConverterUInt32.INSTANCE.Write(value.@port, stream);
    }
}

public class ConnectErrors : UniffiException
{
    // Each variant is a nested class

    public class Unreachable : ConnectErrors { }

    public class NoFilesProvided : ConnectErrors { }

    public class FailedToGetConnectionDetails : ConnectErrors { }

    public class Declined : ConnectErrors { }

    public class FailedToGetTcpDetails : ConnectErrors { }

    public class FailedToGetSocketAddress : ConnectErrors { }

    public class FailedToOpenTcpStream : ConnectErrors { }

    public class FailedToEncryptStream : ConnectErrors
    {
        // Members
        public String @error;

        // Constructor
        public FailedToEncryptStream(String @error)
        {
            this.@error = @error;
        }
    }

    public class FailedToDetermineFileSize : ConnectErrors
    {
        // Members
        public String @error;

        // Constructor
        public FailedToDetermineFileSize(String @error)
        {
            this.@error = @error;
        }
    }

    public class FailedToGetTransferRequestResponse : ConnectErrors
    {
        // Members
        public String @error;

        // Constructor
        public FailedToGetTransferRequestResponse(String @error)
        {
            this.@error = @error;
        }
    }

    public class FailedToGetBleDetails : ConnectErrors { }

    public class InternalBleHandlerNotAvailable : ConnectErrors { }

    public class FailedToEstablishBleConnection : ConnectErrors { }
}

class FfiConverterTypeConnectErrors
    : FfiConverterRustBuffer<ConnectErrors>,
        CallStatusErrorHandler<ConnectErrors>
{
    public static FfiConverterTypeConnectErrors INSTANCE = new FfiConverterTypeConnectErrors();

    public override ConnectErrors Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new ConnectErrors.Unreachable();
            case 2:
                return new ConnectErrors.NoFilesProvided();
            case 3:
                return new ConnectErrors.FailedToGetConnectionDetails();
            case 4:
                return new ConnectErrors.Declined();
            case 5:
                return new ConnectErrors.FailedToGetTcpDetails();
            case 6:
                return new ConnectErrors.FailedToGetSocketAddress();
            case 7:
                return new ConnectErrors.FailedToOpenTcpStream();
            case 8:
                return new ConnectErrors.FailedToEncryptStream(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            case 9:
                return new ConnectErrors.FailedToDetermineFileSize(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            case 10:
                return new ConnectErrors.FailedToGetTransferRequestResponse(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            case 11:
                return new ConnectErrors.FailedToGetBleDetails();
            case 12:
                return new ConnectErrors.InternalBleHandlerNotAvailable();
            case 13:
                return new ConnectErrors.FailedToEstablishBleConnection();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeConnectErrors.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(ConnectErrors value)
    {
        switch (value)
        {
            case ConnectErrors.Unreachable variant_value:
                return 4;
            case ConnectErrors.NoFilesProvided variant_value:
                return 4;
            case ConnectErrors.FailedToGetConnectionDetails variant_value:
                return 4;
            case ConnectErrors.Declined variant_value:
                return 4;
            case ConnectErrors.FailedToGetTcpDetails variant_value:
                return 4;
            case ConnectErrors.FailedToGetSocketAddress variant_value:
                return 4;
            case ConnectErrors.FailedToOpenTcpStream variant_value:
                return 4;
            case ConnectErrors.FailedToEncryptStream variant_value:
                return 4 + FfiConverterString.INSTANCE.AllocationSize(variant_value.@error);
            case ConnectErrors.FailedToDetermineFileSize variant_value:
                return 4 + FfiConverterString.INSTANCE.AllocationSize(variant_value.@error);
            case ConnectErrors.FailedToGetTransferRequestResponse variant_value:
                return 4 + FfiConverterString.INSTANCE.AllocationSize(variant_value.@error);
            case ConnectErrors.FailedToGetBleDetails variant_value:
                return 4;
            case ConnectErrors.InternalBleHandlerNotAvailable variant_value:
                return 4;
            case ConnectErrors.FailedToEstablishBleConnection variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeConnectErrors.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(ConnectErrors value, BigEndianStream stream)
    {
        switch (value)
        {
            case ConnectErrors.Unreachable variant_value:
                stream.WriteInt(1);
                break;
            case ConnectErrors.NoFilesProvided variant_value:
                stream.WriteInt(2);
                break;
            case ConnectErrors.FailedToGetConnectionDetails variant_value:
                stream.WriteInt(3);
                break;
            case ConnectErrors.Declined variant_value:
                stream.WriteInt(4);
                break;
            case ConnectErrors.FailedToGetTcpDetails variant_value:
                stream.WriteInt(5);
                break;
            case ConnectErrors.FailedToGetSocketAddress variant_value:
                stream.WriteInt(6);
                break;
            case ConnectErrors.FailedToOpenTcpStream variant_value:
                stream.WriteInt(7);
                break;
            case ConnectErrors.FailedToEncryptStream variant_value:
                stream.WriteInt(8);
                FfiConverterString.INSTANCE.Write(variant_value.@error, stream);
                break;
            case ConnectErrors.FailedToDetermineFileSize variant_value:
                stream.WriteInt(9);
                FfiConverterString.INSTANCE.Write(variant_value.@error, stream);
                break;
            case ConnectErrors.FailedToGetTransferRequestResponse variant_value:
                stream.WriteInt(10);
                FfiConverterString.INSTANCE.Write(variant_value.@error, stream);
                break;
            case ConnectErrors.FailedToGetBleDetails variant_value:
                stream.WriteInt(11);
                break;
            case ConnectErrors.InternalBleHandlerNotAvailable variant_value:
                stream.WriteInt(12);
                break;
            case ConnectErrors.FailedToEstablishBleConnection variant_value:
                stream.WriteInt(13);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeConnectErrors.Write()",
                        value
                    )
                );
        }
    }
}

public enum ConnectionIntentType : int
{
    FileTransfer,
    Clipboard,
}

class FfiConverterTypeConnectionIntentType : FfiConverterRustBuffer<ConnectionIntentType>
{
    public static FfiConverterTypeConnectionIntentType INSTANCE =
        new FfiConverterTypeConnectionIntentType();

    public override ConnectionIntentType Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(ConnectionIntentType), value))
        {
            return (ConnectionIntentType)value;
        }
        else
        {
            throw new InternalException(
                String.Format(
                    "invalid enum value '{0}' in FfiConverterTypeConnectionIntentType.Read()",
                    value
                )
            );
        }
    }

    public override int AllocationSize(ConnectionIntentType value)
    {
        return 4;
    }

    public override void Write(ConnectionIntentType value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

public enum ConnectionMedium : int
{
    Ble,
    WiFi,
}

class FfiConverterTypeConnectionMedium : FfiConverterRustBuffer<ConnectionMedium>
{
    public static FfiConverterTypeConnectionMedium INSTANCE =
        new FfiConverterTypeConnectionMedium();

    public override ConnectionMedium Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(ConnectionMedium), value))
        {
            return (ConnectionMedium)value;
        }
        else
        {
            throw new InternalException(
                String.Format(
                    "invalid enum value '{0}' in FfiConverterTypeConnectionMedium.Read()",
                    value
                )
            );
        }
    }

    public override int AllocationSize(ConnectionMedium value)
    {
        return 4;
    }

    public override void Write(ConnectionMedium value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

public class DiscoverySetupException : UniffiException
{
    DiscoverySetupException(string message)
        : base(message) { }

    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.

    public class UnableToSetupUdp : DiscoverySetupException
    {
        public UnableToSetupUdp(string message)
            : base(message) { }
    }

    public class UnableToSetupMdns : DiscoverySetupException
    {
        public UnableToSetupMdns(string message)
            : base(message) { }
    }
}

class FfiConverterTypeDiscoverySetupException
    : FfiConverterRustBuffer<DiscoverySetupException>,
        CallStatusErrorHandler<DiscoverySetupException>
{
    public static FfiConverterTypeDiscoverySetupException INSTANCE =
        new FfiConverterTypeDiscoverySetupException();

    public override DiscoverySetupException Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new DiscoverySetupException.UnableToSetupUdp(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            case 2:
                return new DiscoverySetupException.UnableToSetupMdns(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeDiscoverySetupException.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(DiscoverySetupException value)
    {
        return 4 + FfiConverterString.INSTANCE.AllocationSize(value.Message);
    }

    public override void Write(DiscoverySetupException value, BigEndianStream stream)
    {
        switch (value)
        {
            case DiscoverySetupException.UnableToSetupUdp:
                stream.WriteInt(1);
                break;
            case DiscoverySetupException.UnableToSetupMdns:
                stream.WriteInt(2);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeDiscoverySetupException.Write()",
                        value
                    )
                );
        }
    }
}

public record ReceiveProgressState
{
    public record Unknown : ReceiveProgressState { }

    public record Handshake : ReceiveProgressState { }

    public record Receiving(double @progress) : ReceiveProgressState { }

    public record Extracting : ReceiveProgressState { }

    public record Cancelled : ReceiveProgressState { }

    public record Finished : ReceiveProgressState { }
}

class FfiConverterTypeReceiveProgressState : FfiConverterRustBuffer<ReceiveProgressState>
{
    public static FfiConverterRustBuffer<ReceiveProgressState> INSTANCE =
        new FfiConverterTypeReceiveProgressState();

    public override ReceiveProgressState Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new ReceiveProgressState.Unknown();
            case 2:
                return new ReceiveProgressState.Handshake();
            case 3:
                return new ReceiveProgressState.Receiving(FfiConverterDouble.INSTANCE.Read(stream));
            case 4:
                return new ReceiveProgressState.Extracting();
            case 5:
                return new ReceiveProgressState.Cancelled();
            case 6:
                return new ReceiveProgressState.Finished();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeReceiveProgressState.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(ReceiveProgressState value)
    {
        switch (value)
        {
            case ReceiveProgressState.Unknown variant_value:
                return 4;
            case ReceiveProgressState.Handshake variant_value:
                return 4;
            case ReceiveProgressState.Receiving variant_value:
                return 4 + FfiConverterDouble.INSTANCE.AllocationSize(variant_value.@progress);
            case ReceiveProgressState.Extracting variant_value:
                return 4;
            case ReceiveProgressState.Cancelled variant_value:
                return 4;
            case ReceiveProgressState.Finished variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeReceiveProgressState.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(ReceiveProgressState value, BigEndianStream stream)
    {
        switch (value)
        {
            case ReceiveProgressState.Unknown variant_value:
                stream.WriteInt(1);
                break;
            case ReceiveProgressState.Handshake variant_value:
                stream.WriteInt(2);
                break;
            case ReceiveProgressState.Receiving variant_value:
                stream.WriteInt(3);
                FfiConverterDouble.INSTANCE.Write(variant_value.@progress, stream);
                break;
            case ReceiveProgressState.Extracting variant_value:
                stream.WriteInt(4);
                break;
            case ReceiveProgressState.Cancelled variant_value:
                stream.WriteInt(5);
                break;
            case ReceiveProgressState.Finished variant_value:
                stream.WriteInt(6);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeReceiveProgressState.Write()",
                        value
                    )
                );
        }
    }
}

public record SendProgressState
{
    public record Unknown : SendProgressState { }

    public record Connecting : SendProgressState { }

    public record Requesting : SendProgressState { }

    public record ConnectionMediumUpdate(ConnectionMedium @medium) : SendProgressState { }

    public record Compressing : SendProgressState { }

    public record Transferring(double @progress) : SendProgressState { }

    public record Cancelled : SendProgressState { }

    public record Finished : SendProgressState { }

    public record Declined : SendProgressState { }
}

class FfiConverterTypeSendProgressState : FfiConverterRustBuffer<SendProgressState>
{
    public static FfiConverterRustBuffer<SendProgressState> INSTANCE =
        new FfiConverterTypeSendProgressState();

    public override SendProgressState Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new SendProgressState.Unknown();
            case 2:
                return new SendProgressState.Connecting();
            case 3:
                return new SendProgressState.Requesting();
            case 4:
                return new SendProgressState.ConnectionMediumUpdate(
                    FfiConverterTypeConnectionMedium.INSTANCE.Read(stream)
                );
            case 5:
                return new SendProgressState.Compressing();
            case 6:
                return new SendProgressState.Transferring(FfiConverterDouble.INSTANCE.Read(stream));
            case 7:
                return new SendProgressState.Cancelled();
            case 8:
                return new SendProgressState.Finished();
            case 9:
                return new SendProgressState.Declined();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeSendProgressState.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(SendProgressState value)
    {
        switch (value)
        {
            case SendProgressState.Unknown variant_value:
                return 4;
            case SendProgressState.Connecting variant_value:
                return 4;
            case SendProgressState.Requesting variant_value:
                return 4;
            case SendProgressState.ConnectionMediumUpdate variant_value:
                return 4
                    + FfiConverterTypeConnectionMedium.INSTANCE.AllocationSize(
                        variant_value.@medium
                    );
            case SendProgressState.Compressing variant_value:
                return 4;
            case SendProgressState.Transferring variant_value:
                return 4 + FfiConverterDouble.INSTANCE.AllocationSize(variant_value.@progress);
            case SendProgressState.Cancelled variant_value:
                return 4;
            case SendProgressState.Finished variant_value:
                return 4;
            case SendProgressState.Declined variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeSendProgressState.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(SendProgressState value, BigEndianStream stream)
    {
        switch (value)
        {
            case SendProgressState.Unknown variant_value:
                stream.WriteInt(1);
                break;
            case SendProgressState.Connecting variant_value:
                stream.WriteInt(2);
                break;
            case SendProgressState.Requesting variant_value:
                stream.WriteInt(3);
                break;
            case SendProgressState.ConnectionMediumUpdate variant_value:
                stream.WriteInt(4);
                FfiConverterTypeConnectionMedium.INSTANCE.Write(variant_value.@medium, stream);
                break;
            case SendProgressState.Compressing variant_value:
                stream.WriteInt(5);
                break;
            case SendProgressState.Transferring variant_value:
                stream.WriteInt(6);
                FfiConverterDouble.INSTANCE.Write(variant_value.@progress, stream);
                break;
            case SendProgressState.Cancelled variant_value:
                stream.WriteInt(7);
                break;
            case SendProgressState.Finished variant_value:
                stream.WriteInt(8);
                break;
            case SendProgressState.Declined variant_value:
                stream.WriteInt(9);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeSendProgressState.Write()",
                        value
                    )
                );
        }
    }
}

public class TransmissionSetupException : UniffiException
{
    // Each variant is a nested class


    public class UnableToStartTcpServer : TransmissionSetupException
    {
        // Members
        public String @error;

        // Constructor
        public UnableToStartTcpServer(String @error)
        {
            this.@error = @error;
        }
    }
}

class FfiConverterTypeTransmissionSetupException
    : FfiConverterRustBuffer<TransmissionSetupException>,
        CallStatusErrorHandler<TransmissionSetupException>
{
    public static FfiConverterTypeTransmissionSetupException INSTANCE =
        new FfiConverterTypeTransmissionSetupException();

    public override TransmissionSetupException Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new TransmissionSetupException.UnableToStartTcpServer(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeTransmissionSetupException.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(TransmissionSetupException value)
    {
        switch (value)
        {
            case TransmissionSetupException.UnableToStartTcpServer variant_value:
                return 4 + FfiConverterString.INSTANCE.AllocationSize(variant_value.@error);
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeTransmissionSetupException.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(TransmissionSetupException value, BigEndianStream stream)
    {
        switch (value)
        {
            case TransmissionSetupException.UnableToStartTcpServer variant_value:
                stream.WriteInt(1);
                FfiConverterString.INSTANCE.Write(variant_value.@error, stream);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeTransmissionSetupException.Write()",
                        value
                    )
                );
        }
    }
}

static class UniffiCallbackResponseCode
{
    public static int SUCCESS = 0;
    public static int ERROR = 1;
    public static int UNEXPECTED_ERROR = 2;
}

class ConcurrentHandleMap<T>
    where T : notnull
{
    Dictionary<ulong, T> map = new Dictionary<ulong, T>();

    Object lock_ = new Object();
    ulong currentHandle = 0;

    public ulong Insert(T obj)
    {
        lock (lock_)
        {
            currentHandle += 1;
            map[currentHandle] = obj;
            return currentHandle;
        }
    }

    public bool TryGet(ulong handle, out T result)
    {
        lock (lock_)
        {
#pragma warning disable 8601 // Possible null reference assignment
            return map.TryGetValue(handle, out result);
#pragma warning restore 8601
        }
    }

    public bool Remove(ulong handle)
    {
        return Remove(handle, out T result);
    }

    public bool Remove(ulong handle, out T result)
    {
        lock (lock_)
        {
            // Possible null reference assignment
#pragma warning disable 8601
            if (map.TryGetValue(handle, out result))
            {
#pragma warning restore 8601
                map.Remove(handle);
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate int ForeignCallback(
    ulong handle,
    uint method,
    IntPtr argsData,
    int argsLength,
    ref RustBuffer outBuf
);

internal abstract class FfiConverterCallbackInterface<CallbackInterface>
    : FfiConverter<CallbackInterface, ulong>
    where CallbackInterface : notnull
{
    ConcurrentHandleMap<CallbackInterface> handleMap = new ConcurrentHandleMap<CallbackInterface>();

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    public abstract void Register();

    public RustBuffer Drop(ulong handle)
    {
        handleMap.Remove(handle);
        return new RustBuffer();
    }

    public override CallbackInterface Lift(ulong handle)
    {
        if (!handleMap.TryGet(handle, out CallbackInterface result))
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
        return result;
    }

    public override CallbackInterface Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override ulong Lower(CallbackInterface value)
    {
        return handleMap.Insert(value);
    }

    public override int AllocationSize(CallbackInterface value)
    {
        return 8;
    }

    public override void Write(CallbackInterface value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

public interface DiscoveryDelegate
{
    void DeviceAdded(Device @value);
    void DeviceRemoved(String @deviceId);
}

// The ForeignCallback that is passed to Rust.
class ForeignCallbackTypeDiscoveryDelegate
{
    public static readonly ForeignCallback INSTANCE = INSTANCE_FUNC;

#if IOS
    [ObjCRuntime.MonoPInvokeCallback(typeof(ForeignCallback))]
#endif
    private static int INSTANCE_FUNC(
        ulong handle,
        uint method,
        IntPtr argsData,
        int argsLength,
        ref RustBuffer outBuf
    )
    {
        var cb = FfiConverterTypeDiscoveryDelegate.INSTANCE.Lift(handle);
        switch (method)
        {
            case 0:
            {
                // 0 means Rust is done with the callback, and the callback
                // can be dropped by the foreign language.
                FfiConverterTypeDiscoveryDelegate.INSTANCE.Drop(handle);
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 0;
            }

            case 1:
            {
                try
                {
                    outBuf = InvokeDeviceAdded(cb, RustBuffer.MemoryStream(argsData, argsLength));
                    return UniffiCallbackResponseCode.SUCCESS;
                }
                catch (Exception e)
                {
                    // Unexpected error
                    try
                    {
                        // Try to serialize the error into a string
                        outBuf = FfiConverterString.INSTANCE.Lower(e.Message);
                    }
                    catch
                    {
                        // If that fails, then it's time to give up and just return
                    }
                    return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
                }
            }

            case 2:
            {
                try
                {
                    outBuf = InvokeDeviceRemoved(cb, RustBuffer.MemoryStream(argsData, argsLength));
                    return UniffiCallbackResponseCode.SUCCESS;
                }
                catch (Exception e)
                {
                    // Unexpected error
                    try
                    {
                        // Try to serialize the error into a string
                        outBuf = FfiConverterString.INSTANCE.Lower(e.Message);
                    }
                    catch
                    {
                        // If that fails, then it's time to give up and just return
                    }
                    return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
                }
            }

            default:
            {
                // This should never happen, because an out of bounds method index won't
                // ever be used. Once we can catch errors, we should return an InternalException.
                // https://github.com/mozilla/uniffi-rs/issues/351
                return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
            }
        }
    }

    static RustBuffer InvokeDeviceAdded(DiscoveryDelegate callback, BigEndianStream stream)
    {
        callback.DeviceAdded(FfiConverterTypeDevice.INSTANCE.Read(stream));
        return new RustBuffer();
    }

    static RustBuffer InvokeDeviceRemoved(DiscoveryDelegate callback, BigEndianStream stream)
    {
        callback.DeviceRemoved(FfiConverterString.INSTANCE.Read(stream));
        return new RustBuffer();
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeDiscoveryDelegate : FfiConverterCallbackInterface<DiscoveryDelegate>
{
    public static FfiConverterTypeDiscoveryDelegate INSTANCE =
        new FfiConverterTypeDiscoveryDelegate();

    public override void Register()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_init_callback_discoverydelegate(
                    ForeignCallbackTypeDiscoveryDelegate.INSTANCE,
                    ref status
                );
            }
        );
    }
}

public interface NearbyConnectionDelegate
{
    void ReceivedConnectionRequest(ConnectionRequest @request);
}

// The ForeignCallback that is passed to Rust.
class ForeignCallbackTypeNearbyConnectionDelegate
{
    public static readonly ForeignCallback INSTANCE = INSTANCE_FUNC;

#if IOS
    [ObjCRuntime.MonoPInvokeCallback(typeof(ForeignCallback))]
#endif
    private static int INSTANCE_FUNC(
        ulong handle,
        uint method,
        IntPtr argsData,
        int argsLength,
        ref RustBuffer outBuf
    )
    {
        var cb = FfiConverterTypeNearbyConnectionDelegate.INSTANCE.Lift(handle);
        switch (method)
        {
            case 0:
            {
                // 0 means Rust is done with the callback, and the callback
                // can be dropped by the foreign language.
                FfiConverterTypeNearbyConnectionDelegate.INSTANCE.Drop(handle);
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 0;
            }

            case 1:
            {
                try
                {
                    outBuf = InvokeReceivedConnectionRequest(
                        cb,
                        RustBuffer.MemoryStream(argsData, argsLength)
                    );
                    return UniffiCallbackResponseCode.SUCCESS;
                }
                catch (Exception e)
                {
                    // Unexpected error
                    try
                    {
                        // Try to serialize the error into a string
                        outBuf = FfiConverterString.INSTANCE.Lower(e.Message);
                    }
                    catch
                    {
                        // If that fails, then it's time to give up and just return
                    }
                    return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
                }
            }

            default:
            {
                // This should never happen, because an out of bounds method index won't
                // ever be used. Once we can catch errors, we should return an InternalException.
                // https://github.com/mozilla/uniffi-rs/issues/351
                return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
            }
        }
    }

    static RustBuffer InvokeReceivedConnectionRequest(
        NearbyConnectionDelegate callback,
        BigEndianStream stream
    )
    {
        callback.ReceivedConnectionRequest(FfiConverterTypeConnectionRequest.INSTANCE.Read(stream));
        return new RustBuffer();
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeNearbyConnectionDelegate
    : FfiConverterCallbackInterface<NearbyConnectionDelegate>
{
    public static FfiConverterTypeNearbyConnectionDelegate INSTANCE =
        new FfiConverterTypeNearbyConnectionDelegate();

    public override void Register()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_init_callback_nearbyconnectiondelegate(
                    ForeignCallbackTypeNearbyConnectionDelegate.INSTANCE,
                    ref status
                );
            }
        );
    }
}

public interface ReceiveProgressDelegate
{
    void ProgressChanged(ReceiveProgressState @progress);
}

// The ForeignCallback that is passed to Rust.
class ForeignCallbackTypeReceiveProgressDelegate
{
    public static readonly ForeignCallback INSTANCE = INSTANCE_FUNC;

#if IOS
    [ObjCRuntime.MonoPInvokeCallback(typeof(ForeignCallback))]
#endif
    private static int INSTANCE_FUNC(
        ulong handle,
        uint method,
        IntPtr argsData,
        int argsLength,
        ref RustBuffer outBuf
    )
    {
        var cb = FfiConverterTypeReceiveProgressDelegate.INSTANCE.Lift(handle);
        switch (method)
        {
            case 0:
            {
                // 0 means Rust is done with the callback, and the callback
                // can be dropped by the foreign language.
                FfiConverterTypeReceiveProgressDelegate.INSTANCE.Drop(handle);
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 0;
            }

            case 1:
            {
                try
                {
                    outBuf = InvokeProgressChanged(
                        cb,
                        RustBuffer.MemoryStream(argsData, argsLength)
                    );
                    return UniffiCallbackResponseCode.SUCCESS;
                }
                catch (Exception e)
                {
                    // Unexpected error
                    try
                    {
                        // Try to serialize the error into a string
                        outBuf = FfiConverterString.INSTANCE.Lower(e.Message);
                    }
                    catch
                    {
                        // If that fails, then it's time to give up and just return
                    }
                    return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
                }
            }

            default:
            {
                // This should never happen, because an out of bounds method index won't
                // ever be used. Once we can catch errors, we should return an InternalException.
                // https://github.com/mozilla/uniffi-rs/issues/351
                return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
            }
        }
    }

    static RustBuffer InvokeProgressChanged(
        ReceiveProgressDelegate callback,
        BigEndianStream stream
    )
    {
        callback.ProgressChanged(FfiConverterTypeReceiveProgressState.INSTANCE.Read(stream));
        return new RustBuffer();
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeReceiveProgressDelegate
    : FfiConverterCallbackInterface<ReceiveProgressDelegate>
{
    public static FfiConverterTypeReceiveProgressDelegate INSTANCE =
        new FfiConverterTypeReceiveProgressDelegate();

    public override void Register()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_init_callback_receiveprogressdelegate(
                    ForeignCallbackTypeReceiveProgressDelegate.INSTANCE,
                    ref status
                );
            }
        );
    }
}

public interface SendProgressDelegate
{
    void ProgressChanged(SendProgressState @progress);
}

// The ForeignCallback that is passed to Rust.
class ForeignCallbackTypeSendProgressDelegate
{
    public static readonly ForeignCallback INSTANCE = INSTANCE_FUNC;

#if IOS
    [ObjCRuntime.MonoPInvokeCallback(typeof(ForeignCallback))]
#endif
    private static int INSTANCE_FUNC(
        ulong handle,
        uint method,
        IntPtr argsData,
        int argsLength,
        ref RustBuffer outBuf
    )
    {
        var cb = FfiConverterTypeSendProgressDelegate.INSTANCE.Lift(handle);
        switch (method)
        {
            case 0:
            {
                // 0 means Rust is done with the callback, and the callback
                // can be dropped by the foreign language.
                FfiConverterTypeSendProgressDelegate.INSTANCE.Drop(handle);
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 0;
            }

            case 1:
            {
                try
                {
                    outBuf = InvokeProgressChanged(
                        cb,
                        RustBuffer.MemoryStream(argsData, argsLength)
                    );
                    return UniffiCallbackResponseCode.SUCCESS;
                }
                catch (Exception e)
                {
                    // Unexpected error
                    try
                    {
                        // Try to serialize the error into a string
                        outBuf = FfiConverterString.INSTANCE.Lower(e.Message);
                    }
                    catch
                    {
                        // If that fails, then it's time to give up and just return
                    }
                    return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
                }
            }

            default:
            {
                // This should never happen, because an out of bounds method index won't
                // ever be used. Once we can catch errors, we should return an InternalException.
                // https://github.com/mozilla/uniffi-rs/issues/351
                return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
            }
        }
    }

    static RustBuffer InvokeProgressChanged(SendProgressDelegate callback, BigEndianStream stream)
    {
        callback.ProgressChanged(FfiConverterTypeSendProgressState.INSTANCE.Read(stream));
        return new RustBuffer();
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeSendProgressDelegate : FfiConverterCallbackInterface<SendProgressDelegate>
{
    public static FfiConverterTypeSendProgressDelegate INSTANCE =
        new FfiConverterTypeSendProgressDelegate();

    public override void Register()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_intershare_sdk_ffi_fn_init_callback_sendprogressdelegate(
                    ForeignCallbackTypeSendProgressDelegate.INSTANCE,
                    ref status
                );
            }
        );
    }
}

class FfiConverterOptionalString : FfiConverterRustBuffer<String?>
{
    public static FfiConverterOptionalString INSTANCE = new FfiConverterOptionalString();

    public override String? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterString.INSTANCE.Read(stream);
    }

    public override int AllocationSize(String? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterString.INSTANCE.AllocationSize((String)value);
        }
    }

    public override void Write(String? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterString.INSTANCE.Write((String)value, stream);
        }
    }
}

class FfiConverterOptionalTypeClipboardTransferIntent
    : FfiConverterRustBuffer<ClipboardTransferIntent?>
{
    public static FfiConverterOptionalTypeClipboardTransferIntent INSTANCE =
        new FfiConverterOptionalTypeClipboardTransferIntent();

    public override ClipboardTransferIntent? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeClipboardTransferIntent.INSTANCE.Read(stream);
    }

    public override int AllocationSize(ClipboardTransferIntent? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1
                + FfiConverterTypeClipboardTransferIntent.INSTANCE.AllocationSize(
                    (ClipboardTransferIntent)value
                );
        }
    }

    public override void Write(ClipboardTransferIntent? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeClipboardTransferIntent.INSTANCE.Write(
                (ClipboardTransferIntent)value,
                stream
            );
        }
    }
}

class FfiConverterOptionalTypeFileTransferIntent : FfiConverterRustBuffer<FileTransferIntent?>
{
    public static FfiConverterOptionalTypeFileTransferIntent INSTANCE =
        new FfiConverterOptionalTypeFileTransferIntent();

    public override FileTransferIntent? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeFileTransferIntent.INSTANCE.Read(stream);
    }

    public override int AllocationSize(FileTransferIntent? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1
                + FfiConverterTypeFileTransferIntent.INSTANCE.AllocationSize(
                    (FileTransferIntent)value
                );
        }
    }

    public override void Write(FileTransferIntent? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeFileTransferIntent.INSTANCE.Write((FileTransferIntent)value, stream);
        }
    }
}

class FfiConverterOptionalTypeDiscoveryDelegate : FfiConverterRustBuffer<DiscoveryDelegate?>
{
    public static FfiConverterOptionalTypeDiscoveryDelegate INSTANCE =
        new FfiConverterOptionalTypeDiscoveryDelegate();

    public override DiscoveryDelegate? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeDiscoveryDelegate.INSTANCE.Read(stream);
    }

    public override int AllocationSize(DiscoveryDelegate? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1
                + FfiConverterTypeDiscoveryDelegate.INSTANCE.AllocationSize(
                    (DiscoveryDelegate)value
                );
        }
    }

    public override void Write(DiscoveryDelegate? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeDiscoveryDelegate.INSTANCE.Write((DiscoveryDelegate)value, stream);
        }
    }
}

class FfiConverterOptionalTypeNearbyConnectionDelegate
    : FfiConverterRustBuffer<NearbyConnectionDelegate?>
{
    public static FfiConverterOptionalTypeNearbyConnectionDelegate INSTANCE =
        new FfiConverterOptionalTypeNearbyConnectionDelegate();

    public override NearbyConnectionDelegate? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeNearbyConnectionDelegate.INSTANCE.Read(stream);
    }

    public override int AllocationSize(NearbyConnectionDelegate? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1
                + FfiConverterTypeNearbyConnectionDelegate.INSTANCE.AllocationSize(
                    (NearbyConnectionDelegate)value
                );
        }
    }

    public override void Write(NearbyConnectionDelegate? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeNearbyConnectionDelegate.INSTANCE.Write(
                (NearbyConnectionDelegate)value,
                stream
            );
        }
    }
}

class FfiConverterOptionalTypeSendProgressDelegate : FfiConverterRustBuffer<SendProgressDelegate?>
{
    public static FfiConverterOptionalTypeSendProgressDelegate INSTANCE =
        new FfiConverterOptionalTypeSendProgressDelegate();

    public override SendProgressDelegate? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeSendProgressDelegate.INSTANCE.Read(stream);
    }

    public override int AllocationSize(SendProgressDelegate? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1
                + FfiConverterTypeSendProgressDelegate.INSTANCE.AllocationSize(
                    (SendProgressDelegate)value
                );
        }
    }

    public override void Write(SendProgressDelegate? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeSendProgressDelegate.INSTANCE.Write(
                (SendProgressDelegate)value,
                stream
            );
        }
    }
}

class FfiConverterOptionalSequenceString : FfiConverterRustBuffer<List<String>?>
{
    public static FfiConverterOptionalSequenceString INSTANCE =
        new FfiConverterOptionalSequenceString();

    public override List<String>? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterSequenceString.INSTANCE.Read(stream);
    }

    public override int AllocationSize(List<String>? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterSequenceString.INSTANCE.AllocationSize((List<String>)value);
        }
    }

    public override void Write(List<String>? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterSequenceString.INSTANCE.Write((List<String>)value, stream);
        }
    }
}

class FfiConverterSequenceString : FfiConverterRustBuffer<List<String>>
{
    public static FfiConverterSequenceString INSTANCE = new FfiConverterSequenceString();

    public override List<String> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<String>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterString.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<String> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item => FfiConverterString.INSTANCE.AllocationSize(item))
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<String> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterString.INSTANCE.Write(item, stream));
    }
}

class FfiConverterSequenceTypeDevice : FfiConverterRustBuffer<List<Device>>
{
    public static FfiConverterSequenceTypeDevice INSTANCE = new FfiConverterSequenceTypeDevice();

    public override List<Device> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<Device>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterTypeDevice.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<Device> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item => FfiConverterTypeDevice.INSTANCE.AllocationSize(item))
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<Device> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeDevice.INSTANCE.Write(item, stream));
    }
}
#pragma warning restore 8625
public static class InterShareSdkMethods { }
