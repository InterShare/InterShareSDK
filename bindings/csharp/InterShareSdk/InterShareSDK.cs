// <auto-generated>
//     This file was generated by uniffi-bindgen-cs v0.8.4+v0.25.0
//     See https://github.com/NordSecurity/uniffi-bindgen-cs for more information.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;

namespace InterShareSdk;

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

[StructLayout(LayoutKind.Sequential)]
internal struct RustBuffer
{
    public ulong capacity;
    public ulong len;
    public IntPtr data;

    public static RustBuffer Alloc(int size)
    {
        return _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                var buffer = _UniFFILib.ffi_intershare_sdk_rustbuffer_alloc(
                    Convert.ToUInt64(size),
                    ref status
                );
                if (buffer.data == IntPtr.Zero)
                {
                    throw new AllocationException(
                        $"RustBuffer.Alloc() returned null data pointer (size={size})"
                    );
                }
                return buffer;
            }
        );
    }

    public static void Free(RustBuffer buffer)
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.ffi_intershare_sdk_rustbuffer_free(buffer, ref status);
            }
        );
    }

    public static BigEndianStream MemoryStream(IntPtr data, long length)
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), length));
        }
    }

    public BigEndianStream AsStream()
    {
        unsafe
        {
            return new BigEndianStream(
                new UnmanagedMemoryStream((byte*)data.ToPointer(), Convert.ToInt64(len))
            );
        }
    }

    public BigEndianStream AsWriteableStream()
    {
        unsafe
        {
            return new BigEndianStream(
                new UnmanagedMemoryStream(
                    (byte*)data.ToPointer(),
                    Convert.ToInt64(capacity),
                    Convert.ToInt64(capacity),
                    FileAccess.Write
                )
            );
        }
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to managed memory, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

[StructLayout(LayoutKind.Sequential)]
internal struct ForeignBytes
{
    public int length;
    public IntPtr data;
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
internal abstract class FfiConverter<CsType, FfiType>
{
    // Convert an FFI type to a C# type
    public abstract CsType Lift(FfiType value);

    // Convert C# type to an FFI type
    public abstract FfiType Lower(CsType value);

    // Read a C# type from a `ByteBuffer`
    public abstract CsType Read(BigEndianStream stream);

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    public abstract int AllocationSize(CsType value);

    // Write a C# type to a `ByteBuffer`
    public abstract void Write(CsType value, BigEndianStream stream);

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    public RustBuffer LowerIntoRustBuffer(CsType value)
    {
        var rbuf = RustBuffer.Alloc(AllocationSize(value));
        try
        {
            var stream = rbuf.AsWriteableStream();
            Write(value, stream);
            rbuf.len = Convert.ToUInt64(stream.Position);
            return rbuf;
        }
        catch
        {
            RustBuffer.Free(rbuf);
            throw;
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    protected CsType LiftFromRustBuffer(RustBuffer rbuf)
    {
        var stream = rbuf.AsStream();
        try
        {
            var item = Read(stream);
            if (stream.HasRemaining())
            {
                throw new InternalException(
                    "junk remaining in buffer after lifting, something is very wrong!!"
                );
            }
            return item;
        }
        finally
        {
            RustBuffer.Free(rbuf);
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
internal abstract class FfiConverterRustBuffer<CsType> : FfiConverter<CsType, RustBuffer>
{
    public override CsType Lift(RustBuffer value)
    {
        return LiftFromRustBuffer(value);
    }

    public override RustBuffer Lower(CsType value)
    {
        return LowerIntoRustBuffer(value);
    }
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
[StructLayout(LayoutKind.Sequential)]
struct UniffiRustCallStatus
{
    public sbyte code;
    public RustBuffer error_buf;

    public bool IsSuccess()
    {
        return code == 0;
    }

    public bool IsError()
    {
        return code == 1;
    }

    public bool IsPanic()
    {
        return code == 2;
    }
}

// Base class for all uniffi exceptions
public class UniffiException : System.Exception
{
    public UniffiException()
        : base() { }

    public UniffiException(string message)
        : base(message) { }
}

public class UndeclaredErrorException : UniffiException
{
    public UndeclaredErrorException(string message)
        : base(message) { }
}

public class PanicException : UniffiException
{
    public PanicException(string message)
        : base(message) { }
}

public class AllocationException : UniffiException
{
    public AllocationException(string message)
        : base(message) { }
}

public class InternalException : UniffiException
{
    public InternalException(string message)
        : base(message) { }
}

public class InvalidEnumException : InternalException
{
    public InvalidEnumException(string message)
        : base(message) { }
}

public class UniffiContractVersionException : UniffiException
{
    public UniffiContractVersionException(string message)
        : base(message) { }
}

public class UniffiContractChecksumException : UniffiException
{
    public UniffiContractChecksumException(string message)
        : base(message) { }
}

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E>
    where E : System.Exception
{
    E Lift(RustBuffer error_buf);
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
class NullCallStatusErrorHandler : CallStatusErrorHandler<UniffiException>
{
    public static NullCallStatusErrorHandler INSTANCE = new NullCallStatusErrorHandler();

    public UniffiException Lift(RustBuffer error_buf)
    {
        RustBuffer.Free(error_buf);
        return new UndeclaredErrorException(
            "library has returned an error not declared in UNIFFI interface file"
        );
    }
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
class _UniffiHelpers
{
    public delegate void RustCallAction(ref UniffiRustCallStatus status);
    public delegate U RustCallFunc<out U>(ref UniffiRustCallStatus status);

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static U RustCallWithError<U, E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallFunc<U> callback
    )
        where E : UniffiException
    {
        var status = new UniffiRustCallStatus();
        var return_value = callback(ref status);
        if (status.IsSuccess())
        {
            return return_value;
        }
        else if (status.IsError())
        {
            throw errorHandler.Lift(status.error_buf);
        }
        else if (status.IsPanic())
        {
            // when the rust code sees a panic, it tries to construct a rustbuffer
            // with the message.  but if that code panics, then it just sends back
            // an empty buffer.
            if (status.error_buf.len > 0)
            {
                throw new PanicException(FfiConverterString.INSTANCE.Lift(status.error_buf));
            }
            else
            {
                throw new PanicException("Rust panic");
            }
        }
        else
        {
            throw new InternalException($"Unknown rust call status: {status.code}");
        }
    }

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static void RustCallWithError<E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallAction callback
    )
        where E : UniffiException
    {
        _UniffiHelpers.RustCallWithError(
            errorHandler,
            (ref UniffiRustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }

    // Call a rust function that returns a plain value
    public static U RustCall<U>(RustCallFunc<U> callback)
    {
        return _UniffiHelpers.RustCallWithError(NullCallStatusErrorHandler.INSTANCE, callback);
    }

    // Call a rust function that returns a plain value
    public static void RustCall(RustCallAction callback)
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }
}

static class FFIObjectUtil
{
    public static void DisposeAll(params Object?[] list)
    {
        foreach (var obj in list)
        {
            Dispose(obj);
        }
    }

    // Dispose is implemented by recursive type inspection at runtime. This is because
    // generating correct Dispose calls for recursive complex types, e.g. List<List<int>>
    // is quite cumbersome.
    private static void Dispose(dynamic? obj)
    {
        if (obj == null)
        {
            return;
        }

        if (obj is IDisposable disposable)
        {
            disposable.Dispose();
            return;
        }

        var type = obj.GetType();
        if (type != null)
        {
            if (type.IsGenericType)
            {
                if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))
                {
                    foreach (var value in obj)
                    {
                        Dispose(value);
                    }
                }
                else if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(Dictionary<,>)))
                {
                    foreach (var value in obj.Values)
                    {
                        Dispose(value);
                    }
                }
            }
        }
    }
}

// Big endian streams are not yet available in dotnet :'(
// https://github.com/dotnet/runtime/issues/26904

class StreamUnderflowException : System.Exception
{
    public StreamUnderflowException() { }
}

class BigEndianStream
{
    Stream stream;

    public BigEndianStream(Stream stream)
    {
        this.stream = stream;
    }

    public bool HasRemaining()
    {
        return (stream.Length - stream.Position) > 0;
    }

    public long Position
    {
        get => stream.Position;
        set => stream.Position = value;
    }

    public void WriteBytes(byte[] value)
    {
        stream.Write(value, 0, value.Length);
    }

    public void WriteByte(byte value)
    {
        stream.WriteByte(value);
    }

    public void WriteUShort(ushort value)
    {
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteUInt(uint value)
    {
        stream.WriteByte((byte)(value >> 24));
        stream.WriteByte((byte)(value >> 16));
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteULong(ulong value)
    {
        WriteUInt((uint)(value >> 32));
        WriteUInt((uint)value);
    }

    public void WriteSByte(sbyte value)
    {
        stream.WriteByte((byte)value);
    }

    public void WriteShort(short value)
    {
        WriteUShort((ushort)value);
    }

    public void WriteInt(int value)
    {
        WriteUInt((uint)value);
    }

    public void WriteFloat(float value)
    {
        unsafe
        {
            WriteInt(*((int*)&value));
        }
    }

    public void WriteLong(long value)
    {
        WriteULong((ulong)value);
    }

    public void WriteDouble(double value)
    {
        WriteLong(BitConverter.DoubleToInt64Bits(value));
    }

    public byte[] ReadBytes(int length)
    {
        CheckRemaining(length);
        byte[] result = new byte[length];
        stream.Read(result, 0, length);
        return result;
    }

    public byte ReadByte()
    {
        CheckRemaining(1);
        return Convert.ToByte(stream.ReadByte());
    }

    public ushort ReadUShort()
    {
        CheckRemaining(2);
        return (ushort)(stream.ReadByte() << 8 | stream.ReadByte());
    }

    public uint ReadUInt()
    {
        CheckRemaining(4);
        return (uint)(
            stream.ReadByte() << 24
            | stream.ReadByte() << 16
            | stream.ReadByte() << 8
            | stream.ReadByte()
        );
    }

    public ulong ReadULong()
    {
        return (ulong)ReadUInt() << 32 | (ulong)ReadUInt();
    }

    public sbyte ReadSByte()
    {
        return (sbyte)ReadByte();
    }

    public short ReadShort()
    {
        return (short)ReadUShort();
    }

    public int ReadInt()
    {
        return (int)ReadUInt();
    }

    public float ReadFloat()
    {
        unsafe
        {
            int value = ReadInt();
            return *((float*)&value);
        }
    }

    public long ReadLong()
    {
        return (long)ReadULong();
    }

    public double ReadDouble()
    {
        return BitConverter.Int64BitsToDouble(ReadLong());
    }

    private void CheckRemaining(int length)
    {
        if (stream.Length - stream.Position < length)
        {
            throw new StreamUnderflowException();
        }
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.


// This is an implementation detail that will be called internally by the public API.
static class _UniFFILib
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiRustFutureContinuationCallback(ulong @data, sbyte @pollResult);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureFree(ulong @handle);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceFree(ulong @handle);

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFuture
    {
        public ulong @handle;
        public IntPtr @free;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU8
    {
        public byte @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU8(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU8 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI8
    {
        public sbyte @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI8(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI8 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU16
    {
        public ushort @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU16(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU16 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI16
    {
        public short @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI16(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI16 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU32
    {
        public uint @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI32
    {
        public int @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU64
    {
        public ulong @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI64
    {
        public long @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructF32
    {
        public float @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteF32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructF32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructF64
    {
        public double @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteF64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructF64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructPointer
    {
        public IntPtr @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompletePointer(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructPointer @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructRustBuffer
    {
        public RustBuffer @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteRustBuffer(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructRustBuffer @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructVoid
    {
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteVoid(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructVoid @result
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceSendProgressDelegateMethod0(
        ulong @uniffiHandle,
        RustBuffer @progress,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceBleDiscoveryImplementationDelegateMethod0(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceBleDiscoveryImplementationDelegateMethod1(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceBleServerImplementationDelegateMethod0(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceBleServerImplementationDelegateMethod1(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceDeviceListUpdateDelegateMethod0(
        ulong @uniffiHandle,
        RustBuffer @value,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceDeviceListUpdateDelegateMethod1(
        ulong @uniffiHandle,
        RustBuffer @deviceId,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceL2CapDelegateMethod0(
        ulong @uniffiHandle,
        RustBuffer @connectionId,
        RustBuffer @peripheralUuid,
        uint @psm,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceNativeStreamDelegateMethod0(
        ulong @uniffiHandle,
        ulong @bufferLength,
        ref RustBuffer @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceNativeStreamDelegateMethod1(
        ulong @uniffiHandle,
        RustBuffer @data,
        ref ulong @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceNativeStreamDelegateMethod2(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceNativeStreamDelegateMethod3(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceNearbyConnectionDelegateMethod0(
        ulong @uniffiHandle,
        IntPtr @request,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceNearbyInstantReceiveDelegateMethod0(
        ulong @uniffiHandle,
        RustBuffer @device,
        RustBuffer @requestId,
        ref sbyte @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceReceiveProgressDelegateMethod0(
        ulong @uniffiHandle,
        RustBuffer @progress,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceShareProgressDelegateMethod0(
        ulong @uniffiHandle,
        RustBuffer @progress,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiVTableCallbackInterfaceSendProgressDelegate
    {
        public IntPtr @progressChanged;
        public IntPtr @uniffiFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiVTableCallbackInterfaceBleDiscoveryImplementationDelegate
    {
        public IntPtr @startScanning;
        public IntPtr @stopScanning;
        public IntPtr @uniffiFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiVTableCallbackInterfaceBleServerImplementationDelegate
    {
        public IntPtr @startServer;
        public IntPtr @stopServer;
        public IntPtr @uniffiFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiVTableCallbackInterfaceDeviceListUpdateDelegate
    {
        public IntPtr @deviceAdded;
        public IntPtr @deviceRemoved;
        public IntPtr @uniffiFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiVTableCallbackInterfaceL2CapDelegate
    {
        public IntPtr @openL2capConnection;
        public IntPtr @uniffiFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiVTableCallbackInterfaceNativeStreamDelegate
    {
        public IntPtr @read;
        public IntPtr @write;
        public IntPtr @flush;
        public IntPtr @disconnect;
        public IntPtr @uniffiFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiVTableCallbackInterfaceNearbyConnectionDelegate
    {
        public IntPtr @receivedConnectionRequest;
        public IntPtr @uniffiFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiVTableCallbackInterfaceNearbyInstantReceiveDelegate
    {
        public IntPtr @requestedInstantFileReceive;
        public IntPtr @uniffiFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiVTableCallbackInterfaceReceiveProgressDelegate
    {
        public IntPtr @progressChanged;
        public IntPtr @uniffiFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiVTableCallbackInterfaceShareProgressDelegate
    {
        public IntPtr @progressChanged;
        public IntPtr @uniffiFree;
    }

    static _UniFFILib()
    {
        _UniFFILib.uniffiCheckContractApiVersion();
        _UniFFILib.uniffiCheckApiChecksums();

        UniffiCallbackInterfaceBleDiscoveryImplementationDelegate.Register();
        UniffiCallbackInterfaceBleServerImplementationDelegate.Register();
        UniffiCallbackInterfaceDeviceListUpdateDelegate.Register();
        UniffiCallbackInterfaceL2CapDelegate.Register();
        UniffiCallbackInterfaceNativeStreamDelegate.Register();
        UniffiCallbackInterfaceNearbyConnectionDelegate.Register();
        UniffiCallbackInterfaceNearbyInstantReceiveDelegate.Register();
        UniffiCallbackInterfaceReceiveProgressDelegate.Register();
        UniffiCallbackInterfaceSendProgressDelegate.Register();
        UniffiCallbackInterfaceShareProgressDelegate.Register();
    }

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_clone_sharestore(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_free_sharestore(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_method_sharestore_generate_link(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_method_sharestore_generate_qr_code(
        IntPtr @ptr,
        sbyte @darkMode,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_method_sharestore_send_to(
        IntPtr @ptr,
        RustBuffer @receiver,
        RustBuffer @progressDelegate
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_clone_connectionrequest(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_free_connectionrequest(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_method_connectionrequest_accept(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_connectionrequest_cancel(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_connectionrequest_decline(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_method_connectionrequest_get_clipboard_intent(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_method_connectionrequest_get_file_transfer_intent(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_method_connectionrequest_get_intent_type(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_method_connectionrequest_get_sender(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern sbyte uniffi_intershare_sdk_fn_method_connectionrequest_is_link(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_connectionrequest_set_progress_delegate(
        IntPtr @ptr,
        ulong @delegate,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_connectionrequest_update_progress(
        IntPtr @ptr,
        RustBuffer @newState,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_clone_internaldiscovery(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_free_internaldiscovery(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_constructor_internaldiscovery_new(
        RustBuffer @delegate,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internaldiscovery_add_ble_implementation(
        IntPtr @ptr,
        ulong @implementation,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internaldiscovery_add_discovered_device(
        IntPtr @ptr,
        RustBuffer @device,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_method_internaldiscovery_get_devices(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internaldiscovery_parse_discovery_message(
        IntPtr @ptr,
        RustBuffer @data,
        RustBuffer @bleUuid,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internaldiscovery_remove_discovered_device(
        IntPtr @ptr,
        RustBuffer @deviceId,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internaldiscovery_start(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internaldiscovery_stop(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_clone_internalnearbyserver(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_free_internalnearbyserver(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_constructor_internalnearbyserver_new(
        RustBuffer @myDevice,
        RustBuffer @fileStorage,
        RustBuffer @delegate,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internalnearbyserver_add_bluetooth_implementation(
        IntPtr @ptr,
        ulong @implementation,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internalnearbyserver_add_l2_cap_client(
        IntPtr @ptr,
        ulong @delegate,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internalnearbyserver_change_device(
        IntPtr @ptr,
        RustBuffer @newDevice,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_method_internalnearbyserver_get_advertisement_data(
        IntPtr @ptr
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_method_internalnearbyserver_get_current_ip(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_method_internalnearbyserver_get_device_name(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internalnearbyserver_handle_incoming_connection(
        IntPtr @ptr,
        ulong @nativeStreamHandle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_method_internalnearbyserver_request_download(
        IntPtr @ptr,
        RustBuffer @link
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_method_internalnearbyserver_restart_server(
        IntPtr @ptr
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internalnearbyserver_set_bluetooth_le_details(
        IntPtr @ptr,
        RustBuffer @bleInfo,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_method_internalnearbyserver_set_tcp_details(
        IntPtr @ptr,
        RustBuffer @tcpInfo,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_method_internalnearbyserver_share_files(
        IntPtr @ptr,
        RustBuffer @filePaths,
        sbyte @allowConvenienceShare,
        RustBuffer @progressDelegate
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_method_internalnearbyserver_share_text(
        IntPtr @ptr,
        RustBuffer @text,
        sbyte @allowConvenienceShare
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_method_internalnearbyserver_start(
        IntPtr @ptr
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_method_internalnearbyserver_stop(
        IntPtr @ptr
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_init_callback_vtable_sendprogressdelegate(
        ref _UniFFILib.UniffiVTableCallbackInterfaceSendProgressDelegate @vtable
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_init_callback_vtable_blediscoveryimplementationdelegate(
        ref _UniFFILib.UniffiVTableCallbackInterfaceBleDiscoveryImplementationDelegate @vtable
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_init_callback_vtable_bleserverimplementationdelegate(
        ref _UniFFILib.UniffiVTableCallbackInterfaceBleServerImplementationDelegate @vtable
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_init_callback_vtable_devicelistupdatedelegate(
        ref _UniFFILib.UniffiVTableCallbackInterfaceDeviceListUpdateDelegate @vtable
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_init_callback_vtable_l2capdelegate(
        ref _UniFFILib.UniffiVTableCallbackInterfaceL2CapDelegate @vtable
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_init_callback_vtable_nativestreamdelegate(
        ref _UniFFILib.UniffiVTableCallbackInterfaceNativeStreamDelegate @vtable
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_init_callback_vtable_nearbyconnectiondelegate(
        ref _UniFFILib.UniffiVTableCallbackInterfaceNearbyConnectionDelegate @vtable
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_init_callback_vtable_nearbyinstantreceivedelegate(
        ref _UniFFILib.UniffiVTableCallbackInterfaceNearbyInstantReceiveDelegate @vtable
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_init_callback_vtable_receiveprogressdelegate(
        ref _UniFFILib.UniffiVTableCallbackInterfaceReceiveProgressDelegate @vtable
    );

    [DllImport("intershare_sdk")]
    public static extern void uniffi_intershare_sdk_fn_init_callback_vtable_shareprogressdelegate(
        ref _UniFFILib.UniffiVTableCallbackInterfaceShareProgressDelegate @vtable
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_func_get_ble_discovery_characteristic_uuid(
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_func_get_ble_service_uuid(
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_func_get_log_file_path_str(
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern IntPtr uniffi_intershare_sdk_fn_func_handle_incoming_l2cap_connection(
        RustBuffer @connectionId,
        ulong @nativeStream
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer uniffi_intershare_sdk_fn_func_is_compatible(
        RustBuffer @device,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer ffi_intershare_sdk_rustbuffer_alloc(
        ulong @size,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer ffi_intershare_sdk_rustbuffer_from_bytes(
        ForeignBytes @bytes,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rustbuffer_free(
        RustBuffer @buf,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern RustBuffer ffi_intershare_sdk_rustbuffer_reserve(
        RustBuffer @buf,
        ulong @additional,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_u8(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_u8(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_u8(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern byte ffi_intershare_sdk_rust_future_complete_u8(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_i8(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_i8(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_i8(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern sbyte ffi_intershare_sdk_rust_future_complete_i8(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_u16(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_u16(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_u16(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern ushort ffi_intershare_sdk_rust_future_complete_u16(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_i16(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_i16(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_i16(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern short ffi_intershare_sdk_rust_future_complete_i16(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_u32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_u32(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_u32(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern uint ffi_intershare_sdk_rust_future_complete_u32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_i32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_i32(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_i32(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern int ffi_intershare_sdk_rust_future_complete_i32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_u64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_u64(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_u64(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern ulong ffi_intershare_sdk_rust_future_complete_u64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_i64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_i64(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_i64(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern long ffi_intershare_sdk_rust_future_complete_i64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_f32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_f32(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_f32(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern float ffi_intershare_sdk_rust_future_complete_f32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_f64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_f64(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_f64(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern double ffi_intershare_sdk_rust_future_complete_f64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_pointer(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_pointer(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_pointer(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern IntPtr ffi_intershare_sdk_rust_future_complete_pointer(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_rust_buffer(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_rust_buffer(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_rust_buffer(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern RustBuffer ffi_intershare_sdk_rust_future_complete_rust_buffer(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_poll_void(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_cancel_void(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_free_void(IntPtr @handle);

    [DllImport("intershare_sdk")]
    public static extern void ffi_intershare_sdk_rust_future_complete_void(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_func_get_ble_discovery_characteristic_uuid();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_func_get_ble_service_uuid();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_func_get_log_file_path_str();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_func_handle_incoming_l2cap_connection();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_func_is_compatible();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_sharestore_generate_link();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_sharestore_generate_qr_code();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_sharestore_send_to();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_connectionrequest_accept();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_connectionrequest_cancel();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_connectionrequest_decline();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_connectionrequest_get_clipboard_intent();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_connectionrequest_get_file_transfer_intent();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_connectionrequest_get_intent_type();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_connectionrequest_get_sender();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_connectionrequest_is_link();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_connectionrequest_set_progress_delegate();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_connectionrequest_update_progress();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internaldiscovery_add_ble_implementation();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internaldiscovery_add_discovered_device();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internaldiscovery_get_devices();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internaldiscovery_parse_discovery_message();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internaldiscovery_remove_discovered_device();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internaldiscovery_start();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internaldiscovery_stop();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_add_bluetooth_implementation();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_add_l2_cap_client();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_change_device();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_advertisement_data();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_current_ip();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_device_name();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_handle_incoming_connection();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_request_download();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_restart_server();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_set_bluetooth_le_details();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_set_tcp_details();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_share_files();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_share_text();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_start();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_internalnearbyserver_stop();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_constructor_internaldiscovery_new();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_constructor_internalnearbyserver_new();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_sendprogressdelegate_progress_changed();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_blediscoveryimplementationdelegate_start_scanning();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_blediscoveryimplementationdelegate_stop_scanning();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_bleserverimplementationdelegate_start_server();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_bleserverimplementationdelegate_stop_server();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_devicelistupdatedelegate_device_added();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_devicelistupdatedelegate_device_removed();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_l2capdelegate_open_l2cap_connection();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_nativestreamdelegate_read();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_nativestreamdelegate_write();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_nativestreamdelegate_flush();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_nativestreamdelegate_disconnect();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_nearbyconnectiondelegate_received_connection_request();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_nearbyinstantreceivedelegate_requested_instant_file_receive();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_receiveprogressdelegate_progress_changed();

    [DllImport("intershare_sdk")]
    public static extern ushort uniffi_intershare_sdk_checksum_method_shareprogressdelegate_progress_changed();

    [DllImport("intershare_sdk")]
    public static extern uint ffi_intershare_sdk_uniffi_contract_version();

    static void uniffiCheckContractApiVersion()
    {
        var scaffolding_contract_version = _UniFFILib.ffi_intershare_sdk_uniffi_contract_version();
        if (26 != scaffolding_contract_version)
        {
            throw new UniffiContractVersionException(
                $"InterShareSdk: uniffi bindings expected version `26`, library returned `{scaffolding_contract_version}`"
            );
        }
    }

    static void uniffiCheckApiChecksums()
    {
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_func_get_ble_discovery_characteristic_uuid();
            if (checksum != 41174)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_func_get_ble_discovery_characteristic_uuid` checksum `41174`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_intershare_sdk_checksum_func_get_ble_service_uuid();
            if (checksum != 559)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_func_get_ble_service_uuid` checksum `559`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_intershare_sdk_checksum_func_get_log_file_path_str();
            if (checksum != 8890)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_func_get_log_file_path_str` checksum `8890`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_func_handle_incoming_l2cap_connection();
            if (checksum != 31719)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_func_handle_incoming_l2cap_connection` checksum `31719`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_intershare_sdk_checksum_func_is_compatible();
            if (checksum != 556)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_func_is_compatible` checksum `556`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_sharestore_generate_link();
            if (checksum != 64960)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_sharestore_generate_link` checksum `64960`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_sharestore_generate_qr_code();
            if (checksum != 5886)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_sharestore_generate_qr_code` checksum `5886`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_intershare_sdk_checksum_method_sharestore_send_to();
            if (checksum != 8676)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_sharestore_send_to` checksum `8676`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_connectionrequest_accept();
            if (checksum != 46730)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_connectionrequest_accept` checksum `46730`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_connectionrequest_cancel();
            if (checksum != 56275)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_connectionrequest_cancel` checksum `56275`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_connectionrequest_decline();
            if (checksum != 58832)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_connectionrequest_decline` checksum `58832`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_connectionrequest_get_clipboard_intent();
            if (checksum != 18496)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_connectionrequest_get_clipboard_intent` checksum `18496`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_connectionrequest_get_file_transfer_intent();
            if (checksum != 5345)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_connectionrequest_get_file_transfer_intent` checksum `5345`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_connectionrequest_get_intent_type();
            if (checksum != 2989)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_connectionrequest_get_intent_type` checksum `2989`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_connectionrequest_get_sender();
            if (checksum != 48559)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_connectionrequest_get_sender` checksum `48559`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_connectionrequest_is_link();
            if (checksum != 12597)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_connectionrequest_is_link` checksum `12597`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_connectionrequest_set_progress_delegate();
            if (checksum != 13934)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_connectionrequest_set_progress_delegate` checksum `13934`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_connectionrequest_update_progress();
            if (checksum != 27929)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_connectionrequest_update_progress` checksum `27929`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internaldiscovery_add_ble_implementation();
            if (checksum != 59819)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internaldiscovery_add_ble_implementation` checksum `59819`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internaldiscovery_add_discovered_device();
            if (checksum != 37791)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internaldiscovery_add_discovered_device` checksum `37791`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internaldiscovery_get_devices();
            if (checksum != 48460)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internaldiscovery_get_devices` checksum `48460`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internaldiscovery_parse_discovery_message();
            if (checksum != 14241)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internaldiscovery_parse_discovery_message` checksum `14241`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internaldiscovery_remove_discovered_device();
            if (checksum != 12235)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internaldiscovery_remove_discovered_device` checksum `12235`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internaldiscovery_start();
            if (checksum != 23215)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internaldiscovery_start` checksum `23215`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internaldiscovery_stop();
            if (checksum != 40747)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internaldiscovery_stop` checksum `40747`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_add_bluetooth_implementation();
            if (checksum != 49906)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_add_bluetooth_implementation` checksum `49906`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_add_l2_cap_client();
            if (checksum != 5582)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_add_l2_cap_client` checksum `5582`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_change_device();
            if (checksum != 58267)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_change_device` checksum `58267`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_advertisement_data();
            if (checksum != 38682)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_advertisement_data` checksum `38682`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_current_ip();
            if (checksum != 14506)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_current_ip` checksum `14506`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_device_name();
            if (checksum != 3575)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_device_name` checksum `3575`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_handle_incoming_connection();
            if (checksum != 3472)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_handle_incoming_connection` checksum `3472`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_request_download();
            if (checksum != 30179)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_request_download` checksum `30179`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_restart_server();
            if (checksum != 27750)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_restart_server` checksum `27750`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_set_bluetooth_le_details();
            if (checksum != 26840)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_set_bluetooth_le_details` checksum `26840`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_set_tcp_details();
            if (checksum != 26689)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_set_tcp_details` checksum `26689`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_share_files();
            if (checksum != 46177)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_share_files` checksum `46177`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_share_text();
            if (checksum != 58097)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_share_text` checksum `58097`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_start();
            if (checksum != 22669)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_start` checksum `22669`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_internalnearbyserver_stop();
            if (checksum != 61145)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_internalnearbyserver_stop` checksum `61145`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_constructor_internaldiscovery_new();
            if (checksum != 23617)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_constructor_internaldiscovery_new` checksum `23617`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_constructor_internalnearbyserver_new();
            if (checksum != 19836)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_constructor_internalnearbyserver_new` checksum `19836`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_sendprogressdelegate_progress_changed();
            if (checksum != 8737)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_sendprogressdelegate_progress_changed` checksum `8737`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_blediscoveryimplementationdelegate_start_scanning();
            if (checksum != 21660)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_blediscoveryimplementationdelegate_start_scanning` checksum `21660`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_blediscoveryimplementationdelegate_stop_scanning();
            if (checksum != 45974)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_blediscoveryimplementationdelegate_stop_scanning` checksum `45974`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_bleserverimplementationdelegate_start_server();
            if (checksum != 55538)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_bleserverimplementationdelegate_start_server` checksum `55538`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_bleserverimplementationdelegate_stop_server();
            if (checksum != 27900)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_bleserverimplementationdelegate_stop_server` checksum `27900`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_devicelistupdatedelegate_device_added();
            if (checksum != 23168)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_devicelistupdatedelegate_device_added` checksum `23168`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_devicelistupdatedelegate_device_removed();
            if (checksum != 11370)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_devicelistupdatedelegate_device_removed` checksum `11370`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_l2capdelegate_open_l2cap_connection();
            if (checksum != 35884)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_l2capdelegate_open_l2cap_connection` checksum `35884`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_nativestreamdelegate_read();
            if (checksum != 15627)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_nativestreamdelegate_read` checksum `15627`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_nativestreamdelegate_write();
            if (checksum != 32491)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_nativestreamdelegate_write` checksum `32491`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_nativestreamdelegate_flush();
            if (checksum != 65506)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_nativestreamdelegate_flush` checksum `65506`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_nativestreamdelegate_disconnect();
            if (checksum != 27809)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_nativestreamdelegate_disconnect` checksum `27809`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_nearbyconnectiondelegate_received_connection_request();
            if (checksum != 38378)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_nearbyconnectiondelegate_received_connection_request` checksum `38378`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_nearbyinstantreceivedelegate_requested_instant_file_receive();
            if (checksum != 55638)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_nearbyinstantreceivedelegate_requested_instant_file_receive` checksum `55638`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_receiveprogressdelegate_progress_changed();
            if (checksum != 42587)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_receiveprogressdelegate_progress_changed` checksum `42587`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_intershare_sdk_checksum_method_shareprogressdelegate_progress_changed();
            if (checksum != 32927)
            {
                throw new UniffiContractChecksumException(
                    $"InterShareSdk: uniffi bindings expected function `uniffi_intershare_sdk_checksum_method_shareprogressdelegate_progress_changed` checksum `32927`, library returned `{checksum}`"
                );
            }
        }
    }
}

// Public interface members begin here.

#pragma warning disable 8625




class FfiConverterUInt8 : FfiConverter<byte, byte>
{
    public static FfiConverterUInt8 INSTANCE = new FfiConverterUInt8();

    public override byte Lift(byte value)
    {
        return value;
    }

    public override byte Read(BigEndianStream stream)
    {
        return stream.ReadByte();
    }

    public override byte Lower(byte value)
    {
        return value;
    }

    public override int AllocationSize(byte value)
    {
        return 1;
    }

    public override void Write(byte value, BigEndianStream stream)
    {
        stream.WriteByte(value);
    }
}

class FfiConverterUInt32 : FfiConverter<uint, uint>
{
    public static FfiConverterUInt32 INSTANCE = new FfiConverterUInt32();

    public override uint Lift(uint value)
    {
        return value;
    }

    public override uint Read(BigEndianStream stream)
    {
        return stream.ReadUInt();
    }

    public override uint Lower(uint value)
    {
        return value;
    }

    public override int AllocationSize(uint value)
    {
        return 4;
    }

    public override void Write(uint value, BigEndianStream stream)
    {
        stream.WriteUInt(value);
    }
}

class FfiConverterInt32 : FfiConverter<int, int>
{
    public static FfiConverterInt32 INSTANCE = new FfiConverterInt32();

    public override int Lift(int value)
    {
        return value;
    }

    public override int Read(BigEndianStream stream)
    {
        return stream.ReadInt();
    }

    public override int Lower(int value)
    {
        return value;
    }

    public override int AllocationSize(int value)
    {
        return 4;
    }

    public override void Write(int value, BigEndianStream stream)
    {
        stream.WriteInt(value);
    }
}

class FfiConverterUInt64 : FfiConverter<ulong, ulong>
{
    public static FfiConverterUInt64 INSTANCE = new FfiConverterUInt64();

    public override ulong Lift(ulong value)
    {
        return value;
    }

    public override ulong Read(BigEndianStream stream)
    {
        return stream.ReadULong();
    }

    public override ulong Lower(ulong value)
    {
        return value;
    }

    public override int AllocationSize(ulong value)
    {
        return 8;
    }

    public override void Write(ulong value, BigEndianStream stream)
    {
        stream.WriteULong(value);
    }
}

class FfiConverterDouble : FfiConverter<double, double>
{
    public static FfiConverterDouble INSTANCE = new FfiConverterDouble();

    public override double Lift(double value)
    {
        return value;
    }

    public override double Read(BigEndianStream stream)
    {
        return stream.ReadDouble();
    }

    public override double Lower(double value)
    {
        return value;
    }

    public override int AllocationSize(double value)
    {
        return 8;
    }

    public override void Write(double value, BigEndianStream stream)
    {
        stream.WriteDouble(value);
    }
}

class FfiConverterBoolean : FfiConverter<bool, sbyte>
{
    public static FfiConverterBoolean INSTANCE = new FfiConverterBoolean();

    public override bool Lift(sbyte value)
    {
        return value != 0;
    }

    public override bool Read(BigEndianStream stream)
    {
        return Lift(stream.ReadSByte());
    }

    public override sbyte Lower(bool value)
    {
        return value ? (sbyte)1 : (sbyte)0;
    }

    public override int AllocationSize(bool value)
    {
        return (sbyte)1;
    }

    public override void Write(bool value, BigEndianStream stream)
    {
        stream.WriteSByte(Lower(value));
    }
}

class FfiConverterString : FfiConverter<string, RustBuffer>
{
    public static FfiConverterString INSTANCE = new FfiConverterString();

    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    public override string Lift(RustBuffer value)
    {
        try
        {
            var bytes = value.AsStream().ReadBytes(Convert.ToInt32(value.len));
            return System.Text.Encoding.UTF8.GetString(bytes);
        }
        finally
        {
            RustBuffer.Free(value);
        }
    }

    public override string Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var bytes = stream.ReadBytes(length);
        return System.Text.Encoding.UTF8.GetString(bytes);
    }

    public override RustBuffer Lower(string value)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        var rbuf = RustBuffer.Alloc(bytes.Length);
        rbuf.AsWriteableStream().WriteBytes(bytes);
        return rbuf;
    }

    // TODO(CS)
    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    public override int AllocationSize(string value)
    {
        const int sizeForLength = 4;
        var sizeForString = System.Text.Encoding.UTF8.GetByteCount(value);
        return sizeForLength + sizeForString;
    }

    public override void Write(string value, BigEndianStream stream)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        stream.WriteInt(bytes.Length);
        stream.WriteBytes(bytes);
    }
}

class FfiConverterByteArray : FfiConverterRustBuffer<byte[]>
{
    public static FfiConverterByteArray INSTANCE = new FfiConverterByteArray();

    public override byte[] Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        return stream.ReadBytes(length);
    }

    public override int AllocationSize(byte[] value)
    {
        return 4 + value.Length;
    }

    public override void Write(byte[] value, BigEndianStream stream)
    {
        stream.WriteInt(value.Length);
        stream.WriteBytes(value);
    }
}

public interface IConnectionRequest
{
    List<String>? Accept();
    void Cancel();
    void Decline();
    ClipboardTransferIntent? GetClipboardIntent();
    FileTransferIntent? GetFileTransferIntent();
    ConnectionIntentType GetIntentType();
    Device GetSender();
    bool IsLink();
    void SetProgressDelegate(ReceiveProgressDelegate @delegate);
    void UpdateProgress(ReceiveProgressState @newState);
}

public class ConnectionRequest : IConnectionRequest, IDisposable
{
    protected IntPtr pointer;
    private int _wasDestroyed = 0;
    private long _callCounter = 1;

    public ConnectionRequest(IntPtr pointer)
    {
        this.pointer = pointer;
    }

    ~ConnectionRequest()
    {
        Destroy();
    }

    protected void FreeRustArcPtr()
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.uniffi_intershare_sdk_fn_free_connectionrequest(
                    this.pointer,
                    ref status
                );
            }
        );
    }

    protected IntPtr CloneRustArcPtr()
    {
        return _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_clone_connectionrequest(
                    this.pointer,
                    ref status
                );
            }
        );
    }

    public void Destroy()
    {
        // Only allow a single call to this method.
        if (Interlocked.CompareExchange(ref _wasDestroyed, 1, 0) == 0)
        {
            // This decrement always matches the initial count of 1 given at creation time.
            if (Interlocked.Decrement(ref _callCounter) == 0)
            {
                FreeRustArcPtr();
            }
        }
    }

    public void Dispose()
    {
        Destroy();
        GC.SuppressFinalize(this); // Suppress finalization to avoid unnecessary GC overhead.
    }

    private void IncrementCallCounter()
    {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        long count;
        do
        {
            count = Interlocked.Read(ref _callCounter);
            if (count == 0L)
                throw new System.ObjectDisposedException(
                    String.Format("'{0}' object has already been destroyed", this.GetType().Name)
                );
            if (count == long.MaxValue)
                throw new System.OverflowException(
                    String.Format("'{0}' call counter would overflow", this.GetType().Name)
                );
        } while (Interlocked.CompareExchange(ref _callCounter, count + 1, count) != count);
    }

    private void DecrementCallCounter()
    {
        // This decrement always matches the increment we performed above.
        if (Interlocked.Decrement(ref _callCounter) == 0)
        {
            FreeRustArcPtr();
        }
    }

    internal void CallWithPointer(Action<IntPtr> action)
    {
        IncrementCallCounter();
        try
        {
            action(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    internal T CallWithPointer<T>(Func<IntPtr, T> func)
    {
        IncrementCallCounter();
        try
        {
            return func(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    public List<String>? Accept()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterOptionalSequenceString.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_intershare_sdk_fn_method_connectionrequest_accept(
                            thisPtr,
                            ref _status
                        )
                )
            )
        );
    }

    public void Cancel()
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_connectionrequest_cancel(
                        thisPtr,
                        ref _status
                    )
            )
        );
    }

    public void Decline()
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_connectionrequest_decline(
                        thisPtr,
                        ref _status
                    )
            )
        );
    }

    public ClipboardTransferIntent? GetClipboardIntent()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterOptionalTypeClipboardTransferIntent.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_intershare_sdk_fn_method_connectionrequest_get_clipboard_intent(
                            thisPtr,
                            ref _status
                        )
                )
            )
        );
    }

    public FileTransferIntent? GetFileTransferIntent()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterOptionalTypeFileTransferIntent.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_intershare_sdk_fn_method_connectionrequest_get_file_transfer_intent(
                            thisPtr,
                            ref _status
                        )
                )
            )
        );
    }

    public ConnectionIntentType GetIntentType()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterTypeConnectionIntentType.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_intershare_sdk_fn_method_connectionrequest_get_intent_type(
                            thisPtr,
                            ref _status
                        )
                )
            )
        );
    }

    public Device GetSender()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterTypeDevice.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_intershare_sdk_fn_method_connectionrequest_get_sender(
                            thisPtr,
                            ref _status
                        )
                )
            )
        );
    }

    public bool IsLink()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterBoolean.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_intershare_sdk_fn_method_connectionrequest_is_link(
                            thisPtr,
                            ref _status
                        )
                )
            )
        );
    }

    public void SetProgressDelegate(ReceiveProgressDelegate @delegate)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_connectionrequest_set_progress_delegate(
                        thisPtr,
                        FfiConverterTypeReceiveProgressDelegate.INSTANCE.Lower(@delegate),
                        ref _status
                    )
            )
        );
    }

    public void UpdateProgress(ReceiveProgressState @newState)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_connectionrequest_update_progress(
                        thisPtr,
                        FfiConverterTypeReceiveProgressState.INSTANCE.Lower(@newState),
                        ref _status
                    )
            )
        );
    }
}

class FfiConverterTypeConnectionRequest : FfiConverter<ConnectionRequest, IntPtr>
{
    public static FfiConverterTypeConnectionRequest INSTANCE =
        new FfiConverterTypeConnectionRequest();

    public override IntPtr Lower(ConnectionRequest value)
    {
        return value.CallWithPointer(thisPtr => thisPtr);
    }

    public override ConnectionRequest Lift(IntPtr value)
    {
        return new ConnectionRequest(value);
    }

    public override ConnectionRequest Read(BigEndianStream stream)
    {
        return Lift(new IntPtr(stream.ReadLong()));
    }

    public override int AllocationSize(ConnectionRequest value)
    {
        return 8;
    }

    public override void Write(ConnectionRequest value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).ToInt64());
    }
}

public interface IInternalDiscovery
{
    void AddBleImplementation(BleDiscoveryImplementationDelegate @implementation);
    void AddDiscoveredDevice(Device @device);
    List<Device> GetDevices();
    void ParseDiscoveryMessage(byte[] @data, String? @bleUuid);
    void RemoveDiscoveredDevice(String @deviceId);
    void Start();
    void Stop();
}

public class InternalDiscovery : IInternalDiscovery, IDisposable
{
    protected IntPtr pointer;
    private int _wasDestroyed = 0;
    private long _callCounter = 1;

    public InternalDiscovery(IntPtr pointer)
    {
        this.pointer = pointer;
    }

    ~InternalDiscovery()
    {
        Destroy();
    }

    public InternalDiscovery(DeviceListUpdateDelegate? @delegate)
        : this(
            _UniffiHelpers.RustCallWithError(
                FfiConverterTypeDiscoverySetupError.INSTANCE,
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_constructor_internaldiscovery_new(
                        FfiConverterOptionalTypeDeviceListUpdateDelegate.INSTANCE.Lower(@delegate),
                        ref _status
                    )
            )
        ) { }

    protected void FreeRustArcPtr()
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.uniffi_intershare_sdk_fn_free_internaldiscovery(
                    this.pointer,
                    ref status
                );
            }
        );
    }

    protected IntPtr CloneRustArcPtr()
    {
        return _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_clone_internaldiscovery(
                    this.pointer,
                    ref status
                );
            }
        );
    }

    public void Destroy()
    {
        // Only allow a single call to this method.
        if (Interlocked.CompareExchange(ref _wasDestroyed, 1, 0) == 0)
        {
            // This decrement always matches the initial count of 1 given at creation time.
            if (Interlocked.Decrement(ref _callCounter) == 0)
            {
                FreeRustArcPtr();
            }
        }
    }

    public void Dispose()
    {
        Destroy();
        GC.SuppressFinalize(this); // Suppress finalization to avoid unnecessary GC overhead.
    }

    private void IncrementCallCounter()
    {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        long count;
        do
        {
            count = Interlocked.Read(ref _callCounter);
            if (count == 0L)
                throw new System.ObjectDisposedException(
                    String.Format("'{0}' object has already been destroyed", this.GetType().Name)
                );
            if (count == long.MaxValue)
                throw new System.OverflowException(
                    String.Format("'{0}' call counter would overflow", this.GetType().Name)
                );
        } while (Interlocked.CompareExchange(ref _callCounter, count + 1, count) != count);
    }

    private void DecrementCallCounter()
    {
        // This decrement always matches the increment we performed above.
        if (Interlocked.Decrement(ref _callCounter) == 0)
        {
            FreeRustArcPtr();
        }
    }

    internal void CallWithPointer(Action<IntPtr> action)
    {
        IncrementCallCounter();
        try
        {
            action(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    internal T CallWithPointer<T>(Func<IntPtr, T> func)
    {
        IncrementCallCounter();
        try
        {
            return func(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    public void AddBleImplementation(BleDiscoveryImplementationDelegate @implementation)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internaldiscovery_add_ble_implementation(
                        thisPtr,
                        FfiConverterTypeBleDiscoveryImplementationDelegate.INSTANCE.Lower(
                            @implementation
                        ),
                        ref _status
                    )
            )
        );
    }

    public void AddDiscoveredDevice(Device @device)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internaldiscovery_add_discovered_device(
                        thisPtr,
                        FfiConverterTypeDevice.INSTANCE.Lower(@device),
                        ref _status
                    )
            )
        );
    }

    public List<Device> GetDevices()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterSequenceTypeDevice.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_intershare_sdk_fn_method_internaldiscovery_get_devices(
                            thisPtr,
                            ref _status
                        )
                )
            )
        );
    }

    public void ParseDiscoveryMessage(byte[] @data, String? @bleUuid)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internaldiscovery_parse_discovery_message(
                        thisPtr,
                        FfiConverterByteArray.INSTANCE.Lower(@data),
                        FfiConverterOptionalString.INSTANCE.Lower(@bleUuid),
                        ref _status
                    )
            )
        );
    }

    public void RemoveDiscoveredDevice(String @deviceId)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internaldiscovery_remove_discovered_device(
                        thisPtr,
                        FfiConverterString.INSTANCE.Lower(@deviceId),
                        ref _status
                    )
            )
        );
    }

    public void Start()
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internaldiscovery_start(
                        thisPtr,
                        ref _status
                    )
            )
        );
    }

    public void Stop()
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internaldiscovery_stop(
                        thisPtr,
                        ref _status
                    )
            )
        );
    }
}

class FfiConverterTypeInternalDiscovery : FfiConverter<InternalDiscovery, IntPtr>
{
    public static FfiConverterTypeInternalDiscovery INSTANCE =
        new FfiConverterTypeInternalDiscovery();

    public override IntPtr Lower(InternalDiscovery value)
    {
        return value.CallWithPointer(thisPtr => thisPtr);
    }

    public override InternalDiscovery Lift(IntPtr value)
    {
        return new InternalDiscovery(value);
    }

    public override InternalDiscovery Read(BigEndianStream stream)
    {
        return Lift(new IntPtr(stream.ReadLong()));
    }

    public override int AllocationSize(InternalDiscovery value)
    {
        return 8;
    }

    public override void Write(InternalDiscovery value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).ToInt64());
    }
}

public interface IInternalNearbyServer
{
    void AddBluetoothImplementation(BleServerImplementationDelegate @implementation);
    void AddL2CapClient(L2CapDelegate @delegate);
    void ChangeDevice(Device @newDevice);
    Task<byte[]> GetAdvertisementData();
    String? GetCurrentIp();
    String? GetDeviceName();
    void HandleIncomingConnection(NativeStreamDelegate @nativeStreamHandle);

    /// <summary>
    /// https://share.intershare.app?id=hgf8o47fdsb394mv385&ip=192.168.12.13&port=5200&device_id=9A403351-A926-4D1C-855F-432A6ED51E0E&protocol_version=1
    /// </summary>
    /// <exception cref="RequestConvenienceShareErrors"></exception>
    Task RequestDownload(String @link);
    Task RestartServer();
    void SetBluetoothLeDetails(BluetoothLeConnectionInfo @bleInfo);
    void SetTcpDetails(TcpConnectionInfo @tcpInfo);
    Task<ShareStore> ShareFiles(
        List<String> @filePaths,
        bool @allowConvenienceShare,
        ShareProgressDelegate? @progressDelegate
    );
    Task<ShareStore> ShareText(String @text, bool @allowConvenienceShare);
    Task Start();
    Task Stop();
}

public class InternalNearbyServer : IInternalNearbyServer, IDisposable
{
    protected IntPtr pointer;
    private int _wasDestroyed = 0;
    private long _callCounter = 1;

    public InternalNearbyServer(IntPtr pointer)
    {
        this.pointer = pointer;
    }

    ~InternalNearbyServer()
    {
        Destroy();
    }

    public InternalNearbyServer(
        Device @myDevice,
        String @fileStorage,
        NearbyConnectionDelegate? @delegate
    )
        : this(
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_constructor_internalnearbyserver_new(
                        FfiConverterTypeDevice.INSTANCE.Lower(@myDevice),
                        FfiConverterString.INSTANCE.Lower(@fileStorage),
                        FfiConverterOptionalTypeNearbyConnectionDelegate.INSTANCE.Lower(@delegate),
                        ref _status
                    )
            )
        ) { }

    protected void FreeRustArcPtr()
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.uniffi_intershare_sdk_fn_free_internalnearbyserver(
                    this.pointer,
                    ref status
                );
            }
        );
    }

    protected IntPtr CloneRustArcPtr()
    {
        return _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_clone_internalnearbyserver(
                    this.pointer,
                    ref status
                );
            }
        );
    }

    public void Destroy()
    {
        // Only allow a single call to this method.
        if (Interlocked.CompareExchange(ref _wasDestroyed, 1, 0) == 0)
        {
            // This decrement always matches the initial count of 1 given at creation time.
            if (Interlocked.Decrement(ref _callCounter) == 0)
            {
                FreeRustArcPtr();
            }
        }
    }

    public void Dispose()
    {
        Destroy();
        GC.SuppressFinalize(this); // Suppress finalization to avoid unnecessary GC overhead.
    }

    private void IncrementCallCounter()
    {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        long count;
        do
        {
            count = Interlocked.Read(ref _callCounter);
            if (count == 0L)
                throw new System.ObjectDisposedException(
                    String.Format("'{0}' object has already been destroyed", this.GetType().Name)
                );
            if (count == long.MaxValue)
                throw new System.OverflowException(
                    String.Format("'{0}' call counter would overflow", this.GetType().Name)
                );
        } while (Interlocked.CompareExchange(ref _callCounter, count + 1, count) != count);
    }

    private void DecrementCallCounter()
    {
        // This decrement always matches the increment we performed above.
        if (Interlocked.Decrement(ref _callCounter) == 0)
        {
            FreeRustArcPtr();
        }
    }

    internal void CallWithPointer(Action<IntPtr> action)
    {
        IncrementCallCounter();
        try
        {
            action(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    internal T CallWithPointer<T>(Func<IntPtr, T> func)
    {
        IncrementCallCounter();
        try
        {
            return func(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    public void AddBluetoothImplementation(BleServerImplementationDelegate @implementation)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_add_bluetooth_implementation(
                        thisPtr,
                        FfiConverterTypeBleServerImplementationDelegate.INSTANCE.Lower(
                            @implementation
                        ),
                        ref _status
                    )
            )
        );
    }

    public void AddL2CapClient(L2CapDelegate @delegate)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_add_l2_cap_client(
                        thisPtr,
                        FfiConverterTypeL2CapDelegate.INSTANCE.Lower(@delegate),
                        ref _status
                    )
            )
        );
    }

    public void ChangeDevice(Device @newDevice)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_change_device(
                        thisPtr,
                        FfiConverterTypeDevice.INSTANCE.Lower(@newDevice),
                        ref _status
                    )
            )
        );
    }

    public async Task<byte[]> GetAdvertisementData()
    {
        return await _UniFFIAsync.UniffiRustCallAsync(
            // Get rust future
            CallWithPointer(thisPtr =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_get_advertisement_data(
                    thisPtr
                );
            }),
            // Poll
            (IntPtr future, IntPtr continuation, IntPtr data) =>
                _UniFFILib.ffi_intershare_sdk_rust_future_poll_rust_buffer(
                    future,
                    continuation,
                    data
                ),
            // Complete
            (IntPtr future, ref UniffiRustCallStatus status) =>
            {
                return _UniFFILib.ffi_intershare_sdk_rust_future_complete_rust_buffer(
                    future,
                    ref status
                );
            },
            // Free
            (IntPtr future) => _UniFFILib.ffi_intershare_sdk_rust_future_free_rust_buffer(future),
            // Lift
            (result) => FfiConverterByteArray.INSTANCE.Lift(result),
            // Error
            NullCallStatusErrorHandler.INSTANCE
        );
    }

    public String? GetCurrentIp()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterOptionalString.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_get_current_ip(
                            thisPtr,
                            ref _status
                        )
                )
            )
        );
    }

    public String? GetDeviceName()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterOptionalString.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_get_device_name(
                            thisPtr,
                            ref _status
                        )
                )
            )
        );
    }

    public void HandleIncomingConnection(NativeStreamDelegate @nativeStreamHandle)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_handle_incoming_connection(
                        thisPtr,
                        FfiConverterTypeNativeStreamDelegate.INSTANCE.Lower(@nativeStreamHandle),
                        ref _status
                    )
            )
        );
    }

    /// <summary>
    /// https://share.intershare.app?id=hgf8o47fdsb394mv385&ip=192.168.12.13&port=5200&device_id=9A403351-A926-4D1C-855F-432A6ED51E0E&protocol_version=1
    /// </summary>
    /// <exception cref="RequestConvenienceShareErrors"></exception>
    public async Task RequestDownload(String @link)
    {
        await _UniFFIAsync.UniffiRustCallAsync(
            // Get rust future
            CallWithPointer(thisPtr =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_request_download(
                    thisPtr,
                    FfiConverterString.INSTANCE.Lower(@link)
                );
            }),
            // Poll
            (IntPtr future, IntPtr continuation, IntPtr data) =>
                _UniFFILib.ffi_intershare_sdk_rust_future_poll_void(future, continuation, data),
            // Complete
            (IntPtr future, ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.ffi_intershare_sdk_rust_future_complete_void(future, ref status);
            },
            // Free
            (IntPtr future) => _UniFFILib.ffi_intershare_sdk_rust_future_free_void(future),
            // Error
            FfiConverterTypeRequestConvenienceShareErrors.INSTANCE
        );
    }

    public async Task RestartServer()
    {
        await _UniFFIAsync.UniffiRustCallAsync(
            // Get rust future
            CallWithPointer(thisPtr =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_restart_server(
                    thisPtr
                );
            }),
            // Poll
            (IntPtr future, IntPtr continuation, IntPtr data) =>
                _UniFFILib.ffi_intershare_sdk_rust_future_poll_void(future, continuation, data),
            // Complete
            (IntPtr future, ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.ffi_intershare_sdk_rust_future_complete_void(future, ref status);
            },
            // Free
            (IntPtr future) => _UniFFILib.ffi_intershare_sdk_rust_future_free_void(future),
            // Error
            NullCallStatusErrorHandler.INSTANCE
        );
    }

    public void SetBluetoothLeDetails(BluetoothLeConnectionInfo @bleInfo)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_set_bluetooth_le_details(
                        thisPtr,
                        FfiConverterTypeBluetoothLeConnectionInfo.INSTANCE.Lower(@bleInfo),
                        ref _status
                    )
            )
        );
    }

    public void SetTcpDetails(TcpConnectionInfo @tcpInfo)
    {
        CallWithPointer(thisPtr =>
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_set_tcp_details(
                        thisPtr,
                        FfiConverterTypeTcpConnectionInfo.INSTANCE.Lower(@tcpInfo),
                        ref _status
                    )
            )
        );
    }

    public async Task<ShareStore> ShareFiles(
        List<String> @filePaths,
        bool @allowConvenienceShare,
        ShareProgressDelegate? @progressDelegate
    )
    {
        return await _UniFFIAsync.UniffiRustCallAsync(
            // Get rust future
            CallWithPointer(thisPtr =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_share_files(
                    thisPtr,
                    FfiConverterSequenceString.INSTANCE.Lower(@filePaths),
                    FfiConverterBoolean.INSTANCE.Lower(@allowConvenienceShare),
                    FfiConverterOptionalTypeShareProgressDelegate.INSTANCE.Lower(@progressDelegate)
                );
            }),
            // Poll
            (IntPtr future, IntPtr continuation, IntPtr data) =>
                _UniFFILib.ffi_intershare_sdk_rust_future_poll_pointer(future, continuation, data),
            // Complete
            (IntPtr future, ref UniffiRustCallStatus status) =>
            {
                return _UniFFILib.ffi_intershare_sdk_rust_future_complete_pointer(
                    future,
                    ref status
                );
            },
            // Free
            (IntPtr future) => _UniFFILib.ffi_intershare_sdk_rust_future_free_pointer(future),
            // Lift
            (result) => FfiConverterTypeShareStore.INSTANCE.Lift(result),
            // Error
            NullCallStatusErrorHandler.INSTANCE
        );
    }

    public async Task<ShareStore> ShareText(String @text, bool @allowConvenienceShare)
    {
        return await _UniFFIAsync.UniffiRustCallAsync(
            // Get rust future
            CallWithPointer(thisPtr =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_share_text(
                    thisPtr,
                    FfiConverterString.INSTANCE.Lower(@text),
                    FfiConverterBoolean.INSTANCE.Lower(@allowConvenienceShare)
                );
            }),
            // Poll
            (IntPtr future, IntPtr continuation, IntPtr data) =>
                _UniFFILib.ffi_intershare_sdk_rust_future_poll_pointer(future, continuation, data),
            // Complete
            (IntPtr future, ref UniffiRustCallStatus status) =>
            {
                return _UniFFILib.ffi_intershare_sdk_rust_future_complete_pointer(
                    future,
                    ref status
                );
            },
            // Free
            (IntPtr future) => _UniFFILib.ffi_intershare_sdk_rust_future_free_pointer(future),
            // Lift
            (result) => FfiConverterTypeShareStore.INSTANCE.Lift(result),
            // Error
            NullCallStatusErrorHandler.INSTANCE
        );
    }

    public async Task Start()
    {
        await _UniFFIAsync.UniffiRustCallAsync(
            // Get rust future
            CallWithPointer(thisPtr =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_start(
                    thisPtr
                );
            }),
            // Poll
            (IntPtr future, IntPtr continuation, IntPtr data) =>
                _UniFFILib.ffi_intershare_sdk_rust_future_poll_void(future, continuation, data),
            // Complete
            (IntPtr future, ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.ffi_intershare_sdk_rust_future_complete_void(future, ref status);
            },
            // Free
            (IntPtr future) => _UniFFILib.ffi_intershare_sdk_rust_future_free_void(future),
            // Error
            NullCallStatusErrorHandler.INSTANCE
        );
    }

    public async Task Stop()
    {
        await _UniFFIAsync.UniffiRustCallAsync(
            // Get rust future
            CallWithPointer(thisPtr =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_method_internalnearbyserver_stop(
                    thisPtr
                );
            }),
            // Poll
            (IntPtr future, IntPtr continuation, IntPtr data) =>
                _UniFFILib.ffi_intershare_sdk_rust_future_poll_void(future, continuation, data),
            // Complete
            (IntPtr future, ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.ffi_intershare_sdk_rust_future_complete_void(future, ref status);
            },
            // Free
            (IntPtr future) => _UniFFILib.ffi_intershare_sdk_rust_future_free_void(future),
            // Error
            NullCallStatusErrorHandler.INSTANCE
        );
    }
}

class FfiConverterTypeInternalNearbyServer : FfiConverter<InternalNearbyServer, IntPtr>
{
    public static FfiConverterTypeInternalNearbyServer INSTANCE =
        new FfiConverterTypeInternalNearbyServer();

    public override IntPtr Lower(InternalNearbyServer value)
    {
        return value.CallWithPointer(thisPtr => thisPtr);
    }

    public override InternalNearbyServer Lift(IntPtr value)
    {
        return new InternalNearbyServer(value);
    }

    public override InternalNearbyServer Read(BigEndianStream stream)
    {
        return Lift(new IntPtr(stream.ReadLong()));
    }

    public override int AllocationSize(InternalNearbyServer value)
    {
        return 8;
    }

    public override void Write(InternalNearbyServer value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).ToInt64());
    }
}

public interface IShareStore
{
    String? GenerateLink();
    List<byte>? GenerateQrCode(bool @darkMode);

    /// <exception cref="ConnectErrors"></exception>
    Task SendTo(Device @receiver, SendProgressDelegate? @progressDelegate);
}

public class ShareStore : IShareStore, IDisposable
{
    protected IntPtr pointer;
    private int _wasDestroyed = 0;
    private long _callCounter = 1;

    public ShareStore(IntPtr pointer)
    {
        this.pointer = pointer;
    }

    ~ShareStore()
    {
        Destroy();
    }

    protected void FreeRustArcPtr()
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.uniffi_intershare_sdk_fn_free_sharestore(this.pointer, ref status);
            }
        );
    }

    protected IntPtr CloneRustArcPtr()
    {
        return _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_clone_sharestore(
                    this.pointer,
                    ref status
                );
            }
        );
    }

    public void Destroy()
    {
        // Only allow a single call to this method.
        if (Interlocked.CompareExchange(ref _wasDestroyed, 1, 0) == 0)
        {
            // This decrement always matches the initial count of 1 given at creation time.
            if (Interlocked.Decrement(ref _callCounter) == 0)
            {
                FreeRustArcPtr();
            }
        }
    }

    public void Dispose()
    {
        Destroy();
        GC.SuppressFinalize(this); // Suppress finalization to avoid unnecessary GC overhead.
    }

    private void IncrementCallCounter()
    {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        long count;
        do
        {
            count = Interlocked.Read(ref _callCounter);
            if (count == 0L)
                throw new System.ObjectDisposedException(
                    String.Format("'{0}' object has already been destroyed", this.GetType().Name)
                );
            if (count == long.MaxValue)
                throw new System.OverflowException(
                    String.Format("'{0}' call counter would overflow", this.GetType().Name)
                );
        } while (Interlocked.CompareExchange(ref _callCounter, count + 1, count) != count);
    }

    private void DecrementCallCounter()
    {
        // This decrement always matches the increment we performed above.
        if (Interlocked.Decrement(ref _callCounter) == 0)
        {
            FreeRustArcPtr();
        }
    }

    internal void CallWithPointer(Action<IntPtr> action)
    {
        IncrementCallCounter();
        try
        {
            action(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    internal T CallWithPointer<T>(Func<IntPtr, T> func)
    {
        IncrementCallCounter();
        try
        {
            return func(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    public String? GenerateLink()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterOptionalString.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_intershare_sdk_fn_method_sharestore_generate_link(
                            thisPtr,
                            ref _status
                        )
                )
            )
        );
    }

    public List<byte>? GenerateQrCode(bool @darkMode)
    {
        return CallWithPointer(thisPtr =>
            FfiConverterOptionalSequenceUInt8.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_intershare_sdk_fn_method_sharestore_generate_qr_code(
                            thisPtr,
                            FfiConverterBoolean.INSTANCE.Lower(@darkMode),
                            ref _status
                        )
                )
            )
        );
    }

    /// <exception cref="ConnectErrors"></exception>
    public async Task SendTo(Device @receiver, SendProgressDelegate? @progressDelegate)
    {
        await _UniFFIAsync.UniffiRustCallAsync(
            // Get rust future
            CallWithPointer(thisPtr =>
            {
                return _UniFFILib.uniffi_intershare_sdk_fn_method_sharestore_send_to(
                    thisPtr,
                    FfiConverterTypeDevice.INSTANCE.Lower(@receiver),
                    FfiConverterOptionalTypeSendProgressDelegate.INSTANCE.Lower(@progressDelegate)
                );
            }),
            // Poll
            (IntPtr future, IntPtr continuation, IntPtr data) =>
                _UniFFILib.ffi_intershare_sdk_rust_future_poll_void(future, continuation, data),
            // Complete
            (IntPtr future, ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.ffi_intershare_sdk_rust_future_complete_void(future, ref status);
            },
            // Free
            (IntPtr future) => _UniFFILib.ffi_intershare_sdk_rust_future_free_void(future),
            // Error
            FfiConverterTypeConnectErrors.INSTANCE
        );
    }
}

class FfiConverterTypeShareStore : FfiConverter<ShareStore, IntPtr>
{
    public static FfiConverterTypeShareStore INSTANCE = new FfiConverterTypeShareStore();

    public override IntPtr Lower(ShareStore value)
    {
        return value.CallWithPointer(thisPtr => thisPtr);
    }

    public override ShareStore Lift(IntPtr value)
    {
        return new ShareStore(value);
    }

    public override ShareStore Read(BigEndianStream stream)
    {
        return Lift(new IntPtr(stream.ReadLong()));
    }

    public override int AllocationSize(ShareStore value)
    {
        return 8;
    }

    public override void Write(ShareStore value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).ToInt64());
    }
}

public record BluetoothLeConnectionInfo(String @uuid, uint @psm) { }

class FfiConverterTypeBluetoothLeConnectionInfo : FfiConverterRustBuffer<BluetoothLeConnectionInfo>
{
    public static FfiConverterTypeBluetoothLeConnectionInfo INSTANCE =
        new FfiConverterTypeBluetoothLeConnectionInfo();

    public override BluetoothLeConnectionInfo Read(BigEndianStream stream)
    {
        return new BluetoothLeConnectionInfo(
            @uuid: FfiConverterString.INSTANCE.Read(stream),
            @psm: FfiConverterUInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(BluetoothLeConnectionInfo value)
    {
        return 0
            + FfiConverterString.INSTANCE.AllocationSize(value.@uuid)
            + FfiConverterUInt32.INSTANCE.AllocationSize(value.@psm);
    }

    public override void Write(BluetoothLeConnectionInfo value, BigEndianStream stream)
    {
        FfiConverterString.INSTANCE.Write(value.@uuid, stream);
        FfiConverterUInt32.INSTANCE.Write(value.@psm, stream);
    }
}

public record ClipboardTransferIntent(String @clipboardContent) { }

class FfiConverterTypeClipboardTransferIntent : FfiConverterRustBuffer<ClipboardTransferIntent>
{
    public static FfiConverterTypeClipboardTransferIntent INSTANCE =
        new FfiConverterTypeClipboardTransferIntent();

    public override ClipboardTransferIntent Read(BigEndianStream stream)
    {
        return new ClipboardTransferIntent(
            @clipboardContent: FfiConverterString.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(ClipboardTransferIntent value)
    {
        return 0 + FfiConverterString.INSTANCE.AllocationSize(value.@clipboardContent);
    }

    public override void Write(ClipboardTransferIntent value, BigEndianStream stream)
    {
        FfiConverterString.INSTANCE.Write(value.@clipboardContent, stream);
    }
}

public record Device(String @id, String @name, int @deviceType, uint? @protocolVersion = null) { }

class FfiConverterTypeDevice : FfiConverterRustBuffer<Device>
{
    public static FfiConverterTypeDevice INSTANCE = new FfiConverterTypeDevice();

    public override Device Read(BigEndianStream stream)
    {
        return new Device(
            @id: FfiConverterString.INSTANCE.Read(stream),
            @name: FfiConverterString.INSTANCE.Read(stream),
            @deviceType: FfiConverterInt32.INSTANCE.Read(stream),
            @protocolVersion: FfiConverterOptionalUInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(Device value)
    {
        return 0
            + FfiConverterString.INSTANCE.AllocationSize(value.@id)
            + FfiConverterString.INSTANCE.AllocationSize(value.@name)
            + FfiConverterInt32.INSTANCE.AllocationSize(value.@deviceType)
            + FfiConverterOptionalUInt32.INSTANCE.AllocationSize(value.@protocolVersion);
    }

    public override void Write(Device value, BigEndianStream stream)
    {
        FfiConverterString.INSTANCE.Write(value.@id, stream);
        FfiConverterString.INSTANCE.Write(value.@name, stream);
        FfiConverterInt32.INSTANCE.Write(value.@deviceType, stream);
        FfiConverterOptionalUInt32.INSTANCE.Write(value.@protocolVersion, stream);
    }
}

public record FileTransferIntent(String? @fileName, ulong @fileSize, ulong @fileCount) { }

class FfiConverterTypeFileTransferIntent : FfiConverterRustBuffer<FileTransferIntent>
{
    public static FfiConverterTypeFileTransferIntent INSTANCE =
        new FfiConverterTypeFileTransferIntent();

    public override FileTransferIntent Read(BigEndianStream stream)
    {
        return new FileTransferIntent(
            @fileName: FfiConverterOptionalString.INSTANCE.Read(stream),
            @fileSize: FfiConverterUInt64.INSTANCE.Read(stream),
            @fileCount: FfiConverterUInt64.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(FileTransferIntent value)
    {
        return 0
            + FfiConverterOptionalString.INSTANCE.AllocationSize(value.@fileName)
            + FfiConverterUInt64.INSTANCE.AllocationSize(value.@fileSize)
            + FfiConverterUInt64.INSTANCE.AllocationSize(value.@fileCount);
    }

    public override void Write(FileTransferIntent value, BigEndianStream stream)
    {
        FfiConverterOptionalString.INSTANCE.Write(value.@fileName, stream);
        FfiConverterUInt64.INSTANCE.Write(value.@fileSize, stream);
        FfiConverterUInt64.INSTANCE.Write(value.@fileCount, stream);
    }
}

public record TcpConnectionInfo(String @hostname, uint @port) { }

class FfiConverterTypeTcpConnectionInfo : FfiConverterRustBuffer<TcpConnectionInfo>
{
    public static FfiConverterTypeTcpConnectionInfo INSTANCE =
        new FfiConverterTypeTcpConnectionInfo();

    public override TcpConnectionInfo Read(BigEndianStream stream)
    {
        return new TcpConnectionInfo(
            @hostname: FfiConverterString.INSTANCE.Read(stream),
            @port: FfiConverterUInt32.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(TcpConnectionInfo value)
    {
        return 0
            + FfiConverterString.INSTANCE.AllocationSize(value.@hostname)
            + FfiConverterUInt32.INSTANCE.AllocationSize(value.@port);
    }

    public override void Write(TcpConnectionInfo value, BigEndianStream stream)
    {
        FfiConverterString.INSTANCE.Write(value.@hostname, stream);
        FfiConverterUInt32.INSTANCE.Write(value.@port, stream);
    }
}

public class ConnectErrors : UniffiException
{
    ConnectErrors()
        : base() { }

    ConnectErrors(String @Message)
        : base(@Message) { }

    // Each variant is a nested class

    public class InvalidProtocolVersion : ConnectErrors
    {
        public InvalidProtocolVersion()
            : base() { }
    }

    public class Unreachable : ConnectErrors
    {
        public Unreachable()
            : base() { }
    }

    public class NoTextProvided : ConnectErrors
    {
        public NoTextProvided()
            : base() { }
    }

    public class NoFilesProvided : ConnectErrors
    {
        public NoFilesProvided()
            : base() { }
    }

    public class FailedToGetConnectionDetails : ConnectErrors
    {
        public FailedToGetConnectionDetails()
            : base() { }
    }

    public class Declined : ConnectErrors
    {
        public Declined()
            : base() { }
    }

    public class FailedToGetTcpDetails : ConnectErrors
    {
        public FailedToGetTcpDetails()
            : base() { }
    }

    public class FailedToGetSocketAddress : ConnectErrors
    {
        public FailedToGetSocketAddress()
            : base() { }
    }

    public class FailedToOpenTcpStream : ConnectErrors
    {
        // Members
        public String @error;

        // Constructor
        public FailedToOpenTcpStream(String @error)
            : base("@error" + "=" + @error)
        {
            this.@error = @error;
        }
    }

    public class FailedToEncryptStream : ConnectErrors
    {
        // Members
        public String @error;

        // Constructor
        public FailedToEncryptStream(String @error)
            : base("@error" + "=" + @error)
        {
            this.@error = @error;
        }
    }

    public class FailedToDetermineFileSize : ConnectErrors
    {
        // Members
        public String @error;

        // Constructor
        public FailedToDetermineFileSize(String @error)
            : base("@error" + "=" + @error)
        {
            this.@error = @error;
        }
    }

    public class FailedToGetTransferRequestResponse : ConnectErrors
    {
        // Members
        public String @error;

        // Constructor
        public FailedToGetTransferRequestResponse(String @error)
            : base("@error" + "=" + @error)
        {
            this.@error = @error;
        }
    }

    public class FailedToGetBleDetails : ConnectErrors
    {
        public FailedToGetBleDetails()
            : base() { }
    }

    public class InternalBleHandlerNotAvailable : ConnectErrors
    {
        public InternalBleHandlerNotAvailable()
            : base() { }
    }

    public class FailedToEstablishBleConnection : ConnectErrors
    {
        public FailedToEstablishBleConnection()
            : base() { }
    }
}

class FfiConverterTypeConnectErrors
    : FfiConverterRustBuffer<ConnectErrors>,
        CallStatusErrorHandler<ConnectErrors>
{
    public static FfiConverterTypeConnectErrors INSTANCE = new FfiConverterTypeConnectErrors();

    public override ConnectErrors Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new ConnectErrors.InvalidProtocolVersion();
            case 2:
                return new ConnectErrors.Unreachable();
            case 3:
                return new ConnectErrors.NoTextProvided();
            case 4:
                return new ConnectErrors.NoFilesProvided();
            case 5:
                return new ConnectErrors.FailedToGetConnectionDetails();
            case 6:
                return new ConnectErrors.Declined();
            case 7:
                return new ConnectErrors.FailedToGetTcpDetails();
            case 8:
                return new ConnectErrors.FailedToGetSocketAddress();
            case 9:
                return new ConnectErrors.FailedToOpenTcpStream(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            case 10:
                return new ConnectErrors.FailedToEncryptStream(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            case 11:
                return new ConnectErrors.FailedToDetermineFileSize(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            case 12:
                return new ConnectErrors.FailedToGetTransferRequestResponse(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            case 13:
                return new ConnectErrors.FailedToGetBleDetails();
            case 14:
                return new ConnectErrors.InternalBleHandlerNotAvailable();
            case 15:
                return new ConnectErrors.FailedToEstablishBleConnection();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeConnectErrors.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(ConnectErrors value)
    {
        switch (value)
        {
            case ConnectErrors.InvalidProtocolVersion variant_value:
                return 4;

            case ConnectErrors.Unreachable variant_value:
                return 4;

            case ConnectErrors.NoTextProvided variant_value:
                return 4;

            case ConnectErrors.NoFilesProvided variant_value:
                return 4;

            case ConnectErrors.FailedToGetConnectionDetails variant_value:
                return 4;

            case ConnectErrors.Declined variant_value:
                return 4;

            case ConnectErrors.FailedToGetTcpDetails variant_value:
                return 4;

            case ConnectErrors.FailedToGetSocketAddress variant_value:
                return 4;

            case ConnectErrors.FailedToOpenTcpStream variant_value:
                return 4 + FfiConverterString.INSTANCE.AllocationSize(variant_value.@error);

            case ConnectErrors.FailedToEncryptStream variant_value:
                return 4 + FfiConverterString.INSTANCE.AllocationSize(variant_value.@error);

            case ConnectErrors.FailedToDetermineFileSize variant_value:
                return 4 + FfiConverterString.INSTANCE.AllocationSize(variant_value.@error);

            case ConnectErrors.FailedToGetTransferRequestResponse variant_value:
                return 4 + FfiConverterString.INSTANCE.AllocationSize(variant_value.@error);

            case ConnectErrors.FailedToGetBleDetails variant_value:
                return 4;

            case ConnectErrors.InternalBleHandlerNotAvailable variant_value:
                return 4;

            case ConnectErrors.FailedToEstablishBleConnection variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeConnectErrors.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(ConnectErrors value, BigEndianStream stream)
    {
        switch (value)
        {
            case ConnectErrors.InvalidProtocolVersion variant_value:
                stream.WriteInt(1);
                break;
            case ConnectErrors.Unreachable variant_value:
                stream.WriteInt(2);
                break;
            case ConnectErrors.NoTextProvided variant_value:
                stream.WriteInt(3);
                break;
            case ConnectErrors.NoFilesProvided variant_value:
                stream.WriteInt(4);
                break;
            case ConnectErrors.FailedToGetConnectionDetails variant_value:
                stream.WriteInt(5);
                break;
            case ConnectErrors.Declined variant_value:
                stream.WriteInt(6);
                break;
            case ConnectErrors.FailedToGetTcpDetails variant_value:
                stream.WriteInt(7);
                break;
            case ConnectErrors.FailedToGetSocketAddress variant_value:
                stream.WriteInt(8);
                break;
            case ConnectErrors.FailedToOpenTcpStream variant_value:
                stream.WriteInt(9);
                FfiConverterString.INSTANCE.Write(variant_value.@error, stream);
                break;
            case ConnectErrors.FailedToEncryptStream variant_value:
                stream.WriteInt(10);
                FfiConverterString.INSTANCE.Write(variant_value.@error, stream);
                break;
            case ConnectErrors.FailedToDetermineFileSize variant_value:
                stream.WriteInt(11);
                FfiConverterString.INSTANCE.Write(variant_value.@error, stream);
                break;
            case ConnectErrors.FailedToGetTransferRequestResponse variant_value:
                stream.WriteInt(12);
                FfiConverterString.INSTANCE.Write(variant_value.@error, stream);
                break;
            case ConnectErrors.FailedToGetBleDetails variant_value:
                stream.WriteInt(13);
                break;
            case ConnectErrors.InternalBleHandlerNotAvailable variant_value:
                stream.WriteInt(14);
                break;
            case ConnectErrors.FailedToEstablishBleConnection variant_value:
                stream.WriteInt(15);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeConnectErrors.Write()",
                        value
                    )
                );
        }
    }
}

public enum ConnectionIntentType : int
{
    FileTransfer,
    Clipboard,
}

class FfiConverterTypeConnectionIntentType : FfiConverterRustBuffer<ConnectionIntentType>
{
    public static FfiConverterTypeConnectionIntentType INSTANCE =
        new FfiConverterTypeConnectionIntentType();

    public override ConnectionIntentType Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(ConnectionIntentType), value))
        {
            return (ConnectionIntentType)value;
        }
        else
        {
            throw new InternalException(
                String.Format(
                    "invalid enum value '{0}' in FfiConverterTypeConnectionIntentType.Read()",
                    value
                )
            );
        }
    }

    public override int AllocationSize(ConnectionIntentType value)
    {
        return 4;
    }

    public override void Write(ConnectionIntentType value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

public enum ConnectionMedium : int
{
    Ble,
    WiFi,
}

class FfiConverterTypeConnectionMedium : FfiConverterRustBuffer<ConnectionMedium>
{
    public static FfiConverterTypeConnectionMedium INSTANCE =
        new FfiConverterTypeConnectionMedium();

    public override ConnectionMedium Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(ConnectionMedium), value))
        {
            return (ConnectionMedium)value;
        }
        else
        {
            throw new InternalException(
                String.Format(
                    "invalid enum value '{0}' in FfiConverterTypeConnectionMedium.Read()",
                    value
                )
            );
        }
    }

    public override int AllocationSize(ConnectionMedium value)
    {
        return 4;
    }

    public override void Write(ConnectionMedium value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

public class DiscoverySetupException : UniffiException
{
    DiscoverySetupException()
        : base() { }

    DiscoverySetupException(String @Message)
        : base(@Message) { }

    // Each variant is a nested class

    public class UnableToSetupUdp : DiscoverySetupException
    {
        public UnableToSetupUdp()
            : base() { }
    }

    public class UnableToSetupMdns : DiscoverySetupException
    {
        public UnableToSetupMdns()
            : base() { }
    }
}

class FfiConverterTypeDiscoverySetupError
    : FfiConverterRustBuffer<DiscoverySetupException>,
        CallStatusErrorHandler<DiscoverySetupException>
{
    public static FfiConverterTypeDiscoverySetupError INSTANCE =
        new FfiConverterTypeDiscoverySetupError();

    public override DiscoverySetupException Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new DiscoverySetupException.UnableToSetupUdp();
            case 2:
                return new DiscoverySetupException.UnableToSetupMdns();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeDiscoverySetupError.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(DiscoverySetupException value)
    {
        switch (value)
        {
            case DiscoverySetupException.UnableToSetupUdp variant_value:
                return 4;

            case DiscoverySetupException.UnableToSetupMdns variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeDiscoverySetupError.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(DiscoverySetupException value, BigEndianStream stream)
    {
        switch (value)
        {
            case DiscoverySetupException.UnableToSetupUdp variant_value:
                stream.WriteInt(1);
                break;
            case DiscoverySetupException.UnableToSetupMdns variant_value:
                stream.WriteInt(2);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeDiscoverySetupError.Write()",
                        value
                    )
                );
        }
    }
}

public record ReceiveProgressState
{
    public record Unknown : ReceiveProgressState { }

    public record Handshake : ReceiveProgressState { }

    public record Receiving(double @progress) : ReceiveProgressState { }

    public record Extracting : ReceiveProgressState { }

    public record Cancelled : ReceiveProgressState { }

    public record Finished : ReceiveProgressState { }
}

class FfiConverterTypeReceiveProgressState : FfiConverterRustBuffer<ReceiveProgressState>
{
    public static FfiConverterRustBuffer<ReceiveProgressState> INSTANCE =
        new FfiConverterTypeReceiveProgressState();

    public override ReceiveProgressState Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new ReceiveProgressState.Unknown();
            case 2:
                return new ReceiveProgressState.Handshake();
            case 3:
                return new ReceiveProgressState.Receiving(FfiConverterDouble.INSTANCE.Read(stream));
            case 4:
                return new ReceiveProgressState.Extracting();
            case 5:
                return new ReceiveProgressState.Cancelled();
            case 6:
                return new ReceiveProgressState.Finished();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeReceiveProgressState.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(ReceiveProgressState value)
    {
        switch (value)
        {
            case ReceiveProgressState.Unknown variant_value:
                return 4;
            case ReceiveProgressState.Handshake variant_value:
                return 4;
            case ReceiveProgressState.Receiving variant_value:
                return 4 + FfiConverterDouble.INSTANCE.AllocationSize(variant_value.@progress);
            case ReceiveProgressState.Extracting variant_value:
                return 4;
            case ReceiveProgressState.Cancelled variant_value:
                return 4;
            case ReceiveProgressState.Finished variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeReceiveProgressState.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(ReceiveProgressState value, BigEndianStream stream)
    {
        switch (value)
        {
            case ReceiveProgressState.Unknown variant_value:
                stream.WriteInt(1);
                break;
            case ReceiveProgressState.Handshake variant_value:
                stream.WriteInt(2);
                break;
            case ReceiveProgressState.Receiving variant_value:
                stream.WriteInt(3);
                FfiConverterDouble.INSTANCE.Write(variant_value.@progress, stream);
                break;
            case ReceiveProgressState.Extracting variant_value:
                stream.WriteInt(4);
                break;
            case ReceiveProgressState.Cancelled variant_value:
                stream.WriteInt(5);
                break;
            case ReceiveProgressState.Finished variant_value:
                stream.WriteInt(6);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeReceiveProgressState.Write()",
                        value
                    )
                );
        }
    }
}

public class RequestConvenienceShareErrors : UniffiException
{
    RequestConvenienceShareErrors()
        : base() { }

    RequestConvenienceShareErrors(String @Message)
        : base(@Message) { }

    // Each variant is a nested class

    public class NotAValidLink : RequestConvenienceShareErrors
    {
        public NotAValidLink()
            : base() { }
    }

    public class IncompatibleProtocolVersion : RequestConvenienceShareErrors
    {
        public IncompatibleProtocolVersion()
            : base() { }
    }

    public class FailedToConnect : RequestConvenienceShareErrors
    {
        // Members
        public String @error;

        // Constructor
        public FailedToConnect(String @error)
            : base("@error" + "=" + @error)
        {
            this.@error = @error;
        }
    }
}

class FfiConverterTypeRequestConvenienceShareErrors
    : FfiConverterRustBuffer<RequestConvenienceShareErrors>,
        CallStatusErrorHandler<RequestConvenienceShareErrors>
{
    public static FfiConverterTypeRequestConvenienceShareErrors INSTANCE =
        new FfiConverterTypeRequestConvenienceShareErrors();

    public override RequestConvenienceShareErrors Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new RequestConvenienceShareErrors.NotAValidLink();
            case 2:
                return new RequestConvenienceShareErrors.IncompatibleProtocolVersion();
            case 3:
                return new RequestConvenienceShareErrors.FailedToConnect(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeRequestConvenienceShareErrors.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(RequestConvenienceShareErrors value)
    {
        switch (value)
        {
            case RequestConvenienceShareErrors.NotAValidLink variant_value:
                return 4;

            case RequestConvenienceShareErrors.IncompatibleProtocolVersion variant_value:
                return 4;

            case RequestConvenienceShareErrors.FailedToConnect variant_value:
                return 4 + FfiConverterString.INSTANCE.AllocationSize(variant_value.@error);
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeRequestConvenienceShareErrors.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(RequestConvenienceShareErrors value, BigEndianStream stream)
    {
        switch (value)
        {
            case RequestConvenienceShareErrors.NotAValidLink variant_value:
                stream.WriteInt(1);
                break;
            case RequestConvenienceShareErrors.IncompatibleProtocolVersion variant_value:
                stream.WriteInt(2);
                break;
            case RequestConvenienceShareErrors.FailedToConnect variant_value:
                stream.WriteInt(3);
                FfiConverterString.INSTANCE.Write(variant_value.@error, stream);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeRequestConvenienceShareErrors.Write()",
                        value
                    )
                );
        }
    }
}

public record SendProgressState
{
    public record Unknown : SendProgressState { }

    public record Connecting : SendProgressState { }

    public record Requesting : SendProgressState { }

    public record ConnectionMediumUpdate(ConnectionMedium @medium) : SendProgressState { }

    public record Transferring(double @progress) : SendProgressState { }

    public record Cancelled : SendProgressState { }

    public record Finished : SendProgressState { }

    public record Declined : SendProgressState { }
}

class FfiConverterTypeSendProgressState : FfiConverterRustBuffer<SendProgressState>
{
    public static FfiConverterRustBuffer<SendProgressState> INSTANCE =
        new FfiConverterTypeSendProgressState();

    public override SendProgressState Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new SendProgressState.Unknown();
            case 2:
                return new SendProgressState.Connecting();
            case 3:
                return new SendProgressState.Requesting();
            case 4:
                return new SendProgressState.ConnectionMediumUpdate(
                    FfiConverterTypeConnectionMedium.INSTANCE.Read(stream)
                );
            case 5:
                return new SendProgressState.Transferring(FfiConverterDouble.INSTANCE.Read(stream));
            case 6:
                return new SendProgressState.Cancelled();
            case 7:
                return new SendProgressState.Finished();
            case 8:
                return new SendProgressState.Declined();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeSendProgressState.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(SendProgressState value)
    {
        switch (value)
        {
            case SendProgressState.Unknown variant_value:
                return 4;
            case SendProgressState.Connecting variant_value:
                return 4;
            case SendProgressState.Requesting variant_value:
                return 4;
            case SendProgressState.ConnectionMediumUpdate variant_value:
                return 4
                    + FfiConverterTypeConnectionMedium.INSTANCE.AllocationSize(
                        variant_value.@medium
                    );
            case SendProgressState.Transferring variant_value:
                return 4 + FfiConverterDouble.INSTANCE.AllocationSize(variant_value.@progress);
            case SendProgressState.Cancelled variant_value:
                return 4;
            case SendProgressState.Finished variant_value:
                return 4;
            case SendProgressState.Declined variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeSendProgressState.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(SendProgressState value, BigEndianStream stream)
    {
        switch (value)
        {
            case SendProgressState.Unknown variant_value:
                stream.WriteInt(1);
                break;
            case SendProgressState.Connecting variant_value:
                stream.WriteInt(2);
                break;
            case SendProgressState.Requesting variant_value:
                stream.WriteInt(3);
                break;
            case SendProgressState.ConnectionMediumUpdate variant_value:
                stream.WriteInt(4);
                FfiConverterTypeConnectionMedium.INSTANCE.Write(variant_value.@medium, stream);
                break;
            case SendProgressState.Transferring variant_value:
                stream.WriteInt(5);
                FfiConverterDouble.INSTANCE.Write(variant_value.@progress, stream);
                break;
            case SendProgressState.Cancelled variant_value:
                stream.WriteInt(6);
                break;
            case SendProgressState.Finished variant_value:
                stream.WriteInt(7);
                break;
            case SendProgressState.Declined variant_value:
                stream.WriteInt(8);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeSendProgressState.Write()",
                        value
                    )
                );
        }
    }
}

public record ShareProgressState
{
    public record Unknown : ShareProgressState { }

    public record Compressing(double @progress) : ShareProgressState { }

    public record Finished : ShareProgressState { }

    public record Error : ShareProgressState { }
}

class FfiConverterTypeShareProgressState : FfiConverterRustBuffer<ShareProgressState>
{
    public static FfiConverterRustBuffer<ShareProgressState> INSTANCE =
        new FfiConverterTypeShareProgressState();

    public override ShareProgressState Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new ShareProgressState.Unknown();
            case 2:
                return new ShareProgressState.Compressing(FfiConverterDouble.INSTANCE.Read(stream));
            case 3:
                return new ShareProgressState.Finished();
            case 4:
                return new ShareProgressState.Error();
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeShareProgressState.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(ShareProgressState value)
    {
        switch (value)
        {
            case ShareProgressState.Unknown variant_value:
                return 4;
            case ShareProgressState.Compressing variant_value:
                return 4 + FfiConverterDouble.INSTANCE.AllocationSize(variant_value.@progress);
            case ShareProgressState.Finished variant_value:
                return 4;
            case ShareProgressState.Error variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeShareProgressState.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(ShareProgressState value, BigEndianStream stream)
    {
        switch (value)
        {
            case ShareProgressState.Unknown variant_value:
                stream.WriteInt(1);
                break;
            case ShareProgressState.Compressing variant_value:
                stream.WriteInt(2);
                FfiConverterDouble.INSTANCE.Write(variant_value.@progress, stream);
                break;
            case ShareProgressState.Finished variant_value:
                stream.WriteInt(3);
                break;
            case ShareProgressState.Error variant_value:
                stream.WriteInt(4);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeShareProgressState.Write()",
                        value
                    )
                );
        }
    }
}

public class TransmissionSetupException : UniffiException
{
    TransmissionSetupException()
        : base() { }

    TransmissionSetupException(String @Message)
        : base(@Message) { }

    // Each variant is a nested class


    public class UnableToStartTcpServer : TransmissionSetupException
    {
        // Members
        public String @error;

        // Constructor
        public UnableToStartTcpServer(String @error)
            : base("@error" + "=" + @error)
        {
            this.@error = @error;
        }
    }
}

class FfiConverterTypeTransmissionSetupError
    : FfiConverterRustBuffer<TransmissionSetupException>,
        CallStatusErrorHandler<TransmissionSetupException>
{
    public static FfiConverterTypeTransmissionSetupError INSTANCE =
        new FfiConverterTypeTransmissionSetupError();

    public override TransmissionSetupException Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new TransmissionSetupException.UnableToStartTcpServer(
                    FfiConverterString.INSTANCE.Read(stream)
                );
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeTransmissionSetupError.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(TransmissionSetupException value)
    {
        switch (value)
        {
            case TransmissionSetupException.UnableToStartTcpServer variant_value:
                return 4 + FfiConverterString.INSTANCE.AllocationSize(variant_value.@error);
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeTransmissionSetupError.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(TransmissionSetupException value, BigEndianStream stream)
    {
        switch (value)
        {
            case TransmissionSetupException.UnableToStartTcpServer variant_value:
                stream.WriteInt(1);
                FfiConverterString.INSTANCE.Write(variant_value.@error, stream);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeTransmissionSetupError.Write()",
                        value
                    )
                );
        }
    }
}

public enum VersionCompatibility : int
{
    Compatible,
    OutdatedVersion,
    IncompatibleNewVersion,
}

class FfiConverterTypeVersionCompatibility : FfiConverterRustBuffer<VersionCompatibility>
{
    public static FfiConverterTypeVersionCompatibility INSTANCE =
        new FfiConverterTypeVersionCompatibility();

    public override VersionCompatibility Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(VersionCompatibility), value))
        {
            return (VersionCompatibility)value;
        }
        else
        {
            throw new InternalException(
                String.Format(
                    "invalid enum value '{0}' in FfiConverterTypeVersionCompatibility.Read()",
                    value
                )
            );
        }
    }

    public override int AllocationSize(VersionCompatibility value)
    {
        return 4;
    }

    public override void Write(VersionCompatibility value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

public interface BleDiscoveryImplementationDelegate
{
    void StartScanning();
    void StopScanning();
}

class UniffiCallbackInterfaceBleDiscoveryImplementationDelegate
{
    static void StartScanning(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeBleDiscoveryImplementationDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.StartScanning();
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void StopScanning(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeBleDiscoveryImplementationDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.StopScanning();
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void UniffiFree(ulong @handle)
    {
        FfiConverterTypeBleDiscoveryImplementationDelegate.INSTANCE.handleMap.Remove(@handle);
    }

    static _UniFFILib.UniffiCallbackInterfaceBleDiscoveryImplementationDelegateMethod0 _m0 =
        new _UniFFILib.UniffiCallbackInterfaceBleDiscoveryImplementationDelegateMethod0(
            StartScanning
        );
    static _UniFFILib.UniffiCallbackInterfaceBleDiscoveryImplementationDelegateMethod1 _m1 =
        new _UniFFILib.UniffiCallbackInterfaceBleDiscoveryImplementationDelegateMethod1(
            StopScanning
        );
    static _UniFFILib.UniffiCallbackInterfaceFree _callback_interface_free =
        new _UniFFILib.UniffiCallbackInterfaceFree(UniffiFree);

    public static _UniFFILib.UniffiVTableCallbackInterfaceBleDiscoveryImplementationDelegate _vtable =
        new _UniFFILib.UniffiVTableCallbackInterfaceBleDiscoveryImplementationDelegate
        {
            @startScanning = Marshal.GetFunctionPointerForDelegate(_m0),
            @stopScanning = Marshal.GetFunctionPointerForDelegate(_m1),
            @uniffiFree = Marshal.GetFunctionPointerForDelegate(_callback_interface_free),
        };

    public static void Register()
    {
        _UniFFILib.uniffi_intershare_sdk_fn_init_callback_vtable_blediscoveryimplementationdelegate(
            ref UniffiCallbackInterfaceBleDiscoveryImplementationDelegate._vtable
        );
    }
}

class ConcurrentHandleMap<T>
    where T : notnull
{
    Dictionary<ulong, T> map = new Dictionary<ulong, T>();

    Object lock_ = new Object();
    ulong currentHandle = 0;

    public ulong Insert(T obj)
    {
        lock (lock_)
        {
            currentHandle += 1;
            map[currentHandle] = obj;
            return currentHandle;
        }
    }

    public bool TryGet(ulong handle, out T result)
    {
        lock (lock_)
        {
#pragma warning disable 8601 // Possible null reference assignment
            return map.TryGetValue(handle, out result);
#pragma warning restore 8601
        }
    }

    public T Get(ulong handle)
    {
        if (TryGet(handle, out var result))
        {
            return result;
        }
        else
        {
            throw new InternalException("ConcurrentHandleMap: Invalid handle");
        }
    }

    public bool Remove(ulong handle)
    {
        return Remove(handle, out T result);
    }

    public bool Remove(ulong handle, out T result)
    {
        lock (lock_)
        {
            // Possible null reference assignment
#pragma warning disable 8601
            if (map.TryGetValue(handle, out result))
            {
#pragma warning restore 8601
                map.Remove(handle);
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}

static class UniffiCallbackResponseStatus
{
    public static sbyte SUCCESS = 0;
    public static sbyte ERROR = 1;
    public static sbyte UNEXPECTED_ERROR = 2;
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeBleDiscoveryImplementationDelegate
    : FfiConverter<BleDiscoveryImplementationDelegate, ulong>
{
    public static FfiConverterTypeBleDiscoveryImplementationDelegate INSTANCE =
        new FfiConverterTypeBleDiscoveryImplementationDelegate();

    public ConcurrentHandleMap<BleDiscoveryImplementationDelegate> handleMap =
        new ConcurrentHandleMap<BleDiscoveryImplementationDelegate>();

    public override ulong Lower(BleDiscoveryImplementationDelegate value)
    {
        return handleMap.Insert(value);
    }

    public override BleDiscoveryImplementationDelegate Lift(ulong value)
    {
        if (handleMap.TryGet(value, out var uniffiCallback))
        {
            return uniffiCallback;
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{value}'");
        }
    }

    public override BleDiscoveryImplementationDelegate Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override int AllocationSize(BleDiscoveryImplementationDelegate value)
    {
        return 8;
    }

    public override void Write(BleDiscoveryImplementationDelegate value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

public interface BleServerImplementationDelegate
{
    void StartServer();
    void StopServer();
}

class UniffiCallbackInterfaceBleServerImplementationDelegate
{
    static void StartServer(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeBleServerImplementationDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.StartServer();
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void StopServer(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeBleServerImplementationDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.StopServer();
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void UniffiFree(ulong @handle)
    {
        FfiConverterTypeBleServerImplementationDelegate.INSTANCE.handleMap.Remove(@handle);
    }

    static _UniFFILib.UniffiCallbackInterfaceBleServerImplementationDelegateMethod0 _m0 =
        new _UniFFILib.UniffiCallbackInterfaceBleServerImplementationDelegateMethod0(StartServer);
    static _UniFFILib.UniffiCallbackInterfaceBleServerImplementationDelegateMethod1 _m1 =
        new _UniFFILib.UniffiCallbackInterfaceBleServerImplementationDelegateMethod1(StopServer);
    static _UniFFILib.UniffiCallbackInterfaceFree _callback_interface_free =
        new _UniFFILib.UniffiCallbackInterfaceFree(UniffiFree);

    public static _UniFFILib.UniffiVTableCallbackInterfaceBleServerImplementationDelegate _vtable =
        new _UniFFILib.UniffiVTableCallbackInterfaceBleServerImplementationDelegate
        {
            @startServer = Marshal.GetFunctionPointerForDelegate(_m0),
            @stopServer = Marshal.GetFunctionPointerForDelegate(_m1),
            @uniffiFree = Marshal.GetFunctionPointerForDelegate(_callback_interface_free),
        };

    public static void Register()
    {
        _UniFFILib.uniffi_intershare_sdk_fn_init_callback_vtable_bleserverimplementationdelegate(
            ref UniffiCallbackInterfaceBleServerImplementationDelegate._vtable
        );
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeBleServerImplementationDelegate
    : FfiConverter<BleServerImplementationDelegate, ulong>
{
    public static FfiConverterTypeBleServerImplementationDelegate INSTANCE =
        new FfiConverterTypeBleServerImplementationDelegate();

    public ConcurrentHandleMap<BleServerImplementationDelegate> handleMap =
        new ConcurrentHandleMap<BleServerImplementationDelegate>();

    public override ulong Lower(BleServerImplementationDelegate value)
    {
        return handleMap.Insert(value);
    }

    public override BleServerImplementationDelegate Lift(ulong value)
    {
        if (handleMap.TryGet(value, out var uniffiCallback))
        {
            return uniffiCallback;
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{value}'");
        }
    }

    public override BleServerImplementationDelegate Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override int AllocationSize(BleServerImplementationDelegate value)
    {
        return 8;
    }

    public override void Write(BleServerImplementationDelegate value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

public interface DeviceListUpdateDelegate
{
    void DeviceAdded(Device @value);
    void DeviceRemoved(String @deviceId);
}

class UniffiCallbackInterfaceDeviceListUpdateDelegate
{
    static void DeviceAdded(
        ulong @uniffiHandle,
        RustBuffer @value,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeDeviceListUpdateDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.DeviceAdded(FfiConverterTypeDevice.INSTANCE.Lift(@value));
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void DeviceRemoved(
        ulong @uniffiHandle,
        RustBuffer @deviceId,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeDeviceListUpdateDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.DeviceRemoved(FfiConverterString.INSTANCE.Lift(@deviceId));
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void UniffiFree(ulong @handle)
    {
        FfiConverterTypeDeviceListUpdateDelegate.INSTANCE.handleMap.Remove(@handle);
    }

    static _UniFFILib.UniffiCallbackInterfaceDeviceListUpdateDelegateMethod0 _m0 =
        new _UniFFILib.UniffiCallbackInterfaceDeviceListUpdateDelegateMethod0(DeviceAdded);
    static _UniFFILib.UniffiCallbackInterfaceDeviceListUpdateDelegateMethod1 _m1 =
        new _UniFFILib.UniffiCallbackInterfaceDeviceListUpdateDelegateMethod1(DeviceRemoved);
    static _UniFFILib.UniffiCallbackInterfaceFree _callback_interface_free =
        new _UniFFILib.UniffiCallbackInterfaceFree(UniffiFree);

    public static _UniFFILib.UniffiVTableCallbackInterfaceDeviceListUpdateDelegate _vtable =
        new _UniFFILib.UniffiVTableCallbackInterfaceDeviceListUpdateDelegate
        {
            @deviceAdded = Marshal.GetFunctionPointerForDelegate(_m0),
            @deviceRemoved = Marshal.GetFunctionPointerForDelegate(_m1),
            @uniffiFree = Marshal.GetFunctionPointerForDelegate(_callback_interface_free),
        };

    public static void Register()
    {
        _UniFFILib.uniffi_intershare_sdk_fn_init_callback_vtable_devicelistupdatedelegate(
            ref UniffiCallbackInterfaceDeviceListUpdateDelegate._vtable
        );
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeDeviceListUpdateDelegate : FfiConverter<DeviceListUpdateDelegate, ulong>
{
    public static FfiConverterTypeDeviceListUpdateDelegate INSTANCE =
        new FfiConverterTypeDeviceListUpdateDelegate();

    public ConcurrentHandleMap<DeviceListUpdateDelegate> handleMap =
        new ConcurrentHandleMap<DeviceListUpdateDelegate>();

    public override ulong Lower(DeviceListUpdateDelegate value)
    {
        return handleMap.Insert(value);
    }

    public override DeviceListUpdateDelegate Lift(ulong value)
    {
        if (handleMap.TryGet(value, out var uniffiCallback))
        {
            return uniffiCallback;
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{value}'");
        }
    }

    public override DeviceListUpdateDelegate Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override int AllocationSize(DeviceListUpdateDelegate value)
    {
        return 8;
    }

    public override void Write(DeviceListUpdateDelegate value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

public interface L2CapDelegate
{
    void OpenL2capConnection(String @connectionId, String @peripheralUuid, uint @psm);
}

class UniffiCallbackInterfaceL2CapDelegate
{
    static void OpenL2capConnection(
        ulong @uniffiHandle,
        RustBuffer @connectionId,
        RustBuffer @peripheralUuid,
        uint @psm,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (FfiConverterTypeL2CapDelegate.INSTANCE.handleMap.TryGet(handle, out var uniffiObject))
        {
            uniffiObject.OpenL2capConnection(
                FfiConverterString.INSTANCE.Lift(@connectionId),
                FfiConverterString.INSTANCE.Lift(@peripheralUuid),
                FfiConverterUInt32.INSTANCE.Lift(@psm)
            );
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void UniffiFree(ulong @handle)
    {
        FfiConverterTypeL2CapDelegate.INSTANCE.handleMap.Remove(@handle);
    }

    static _UniFFILib.UniffiCallbackInterfaceL2CapDelegateMethod0 _m0 =
        new _UniFFILib.UniffiCallbackInterfaceL2CapDelegateMethod0(OpenL2capConnection);
    static _UniFFILib.UniffiCallbackInterfaceFree _callback_interface_free =
        new _UniFFILib.UniffiCallbackInterfaceFree(UniffiFree);

    public static _UniFFILib.UniffiVTableCallbackInterfaceL2CapDelegate _vtable =
        new _UniFFILib.UniffiVTableCallbackInterfaceL2CapDelegate
        {
            @openL2capConnection = Marshal.GetFunctionPointerForDelegate(_m0),
            @uniffiFree = Marshal.GetFunctionPointerForDelegate(_callback_interface_free),
        };

    public static void Register()
    {
        _UniFFILib.uniffi_intershare_sdk_fn_init_callback_vtable_l2capdelegate(
            ref UniffiCallbackInterfaceL2CapDelegate._vtable
        );
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeL2CapDelegate : FfiConverter<L2CapDelegate, ulong>
{
    public static FfiConverterTypeL2CapDelegate INSTANCE = new FfiConverterTypeL2CapDelegate();

    public ConcurrentHandleMap<L2CapDelegate> handleMap = new ConcurrentHandleMap<L2CapDelegate>();

    public override ulong Lower(L2CapDelegate value)
    {
        return handleMap.Insert(value);
    }

    public override L2CapDelegate Lift(ulong value)
    {
        if (handleMap.TryGet(value, out var uniffiCallback))
        {
            return uniffiCallback;
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{value}'");
        }
    }

    public override L2CapDelegate Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override int AllocationSize(L2CapDelegate value)
    {
        return 8;
    }

    public override void Write(L2CapDelegate value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

public interface NativeStreamDelegate
{
    byte[] Read(ulong @bufferLength);
    ulong Write(byte[] @data);
    void Flush();
    void Disconnect();
}

class UniffiCallbackInterfaceNativeStreamDelegate
{
    static void Read(
        ulong @uniffiHandle,
        ulong @bufferLength,
        ref RustBuffer @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeNativeStreamDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            var result = uniffiObject.Read(FfiConverterUInt64.INSTANCE.Lift(@bufferLength));
            @uniffiOutReturn = FfiConverterByteArray.INSTANCE.Lower(result);
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void Write(
        ulong @uniffiHandle,
        RustBuffer @data,
        ref ulong @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeNativeStreamDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            var result = uniffiObject.Write(FfiConverterByteArray.INSTANCE.Lift(@data));
            @uniffiOutReturn = FfiConverterUInt64.INSTANCE.Lower(result);
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void Flush(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeNativeStreamDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.Flush();
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void Disconnect(
        ulong @uniffiHandle,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeNativeStreamDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.Disconnect();
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void UniffiFree(ulong @handle)
    {
        FfiConverterTypeNativeStreamDelegate.INSTANCE.handleMap.Remove(@handle);
    }

    static _UniFFILib.UniffiCallbackInterfaceNativeStreamDelegateMethod0 _m0 =
        new _UniFFILib.UniffiCallbackInterfaceNativeStreamDelegateMethod0(Read);
    static _UniFFILib.UniffiCallbackInterfaceNativeStreamDelegateMethod1 _m1 =
        new _UniFFILib.UniffiCallbackInterfaceNativeStreamDelegateMethod1(Write);
    static _UniFFILib.UniffiCallbackInterfaceNativeStreamDelegateMethod2 _m2 =
        new _UniFFILib.UniffiCallbackInterfaceNativeStreamDelegateMethod2(Flush);
    static _UniFFILib.UniffiCallbackInterfaceNativeStreamDelegateMethod3 _m3 =
        new _UniFFILib.UniffiCallbackInterfaceNativeStreamDelegateMethod3(Disconnect);
    static _UniFFILib.UniffiCallbackInterfaceFree _callback_interface_free =
        new _UniFFILib.UniffiCallbackInterfaceFree(UniffiFree);

    public static _UniFFILib.UniffiVTableCallbackInterfaceNativeStreamDelegate _vtable =
        new _UniFFILib.UniffiVTableCallbackInterfaceNativeStreamDelegate
        {
            @read = Marshal.GetFunctionPointerForDelegate(_m0),
            @write = Marshal.GetFunctionPointerForDelegate(_m1),
            @flush = Marshal.GetFunctionPointerForDelegate(_m2),
            @disconnect = Marshal.GetFunctionPointerForDelegate(_m3),
            @uniffiFree = Marshal.GetFunctionPointerForDelegate(_callback_interface_free),
        };

    public static void Register()
    {
        _UniFFILib.uniffi_intershare_sdk_fn_init_callback_vtable_nativestreamdelegate(
            ref UniffiCallbackInterfaceNativeStreamDelegate._vtable
        );
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeNativeStreamDelegate : FfiConverter<NativeStreamDelegate, ulong>
{
    public static FfiConverterTypeNativeStreamDelegate INSTANCE =
        new FfiConverterTypeNativeStreamDelegate();

    public ConcurrentHandleMap<NativeStreamDelegate> handleMap =
        new ConcurrentHandleMap<NativeStreamDelegate>();

    public override ulong Lower(NativeStreamDelegate value)
    {
        return handleMap.Insert(value);
    }

    public override NativeStreamDelegate Lift(ulong value)
    {
        if (handleMap.TryGet(value, out var uniffiCallback))
        {
            return uniffiCallback;
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{value}'");
        }
    }

    public override NativeStreamDelegate Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override int AllocationSize(NativeStreamDelegate value)
    {
        return 8;
    }

    public override void Write(NativeStreamDelegate value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

public interface NearbyConnectionDelegate
{
    void ReceivedConnectionRequest(ConnectionRequest @request);
}

class UniffiCallbackInterfaceNearbyConnectionDelegate
{
    static void ReceivedConnectionRequest(
        ulong @uniffiHandle,
        IntPtr @request,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeNearbyConnectionDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.ReceivedConnectionRequest(
                FfiConverterTypeConnectionRequest.INSTANCE.Lift(@request)
            );
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void UniffiFree(ulong @handle)
    {
        FfiConverterTypeNearbyConnectionDelegate.INSTANCE.handleMap.Remove(@handle);
    }

    static _UniFFILib.UniffiCallbackInterfaceNearbyConnectionDelegateMethod0 _m0 =
        new _UniFFILib.UniffiCallbackInterfaceNearbyConnectionDelegateMethod0(
            ReceivedConnectionRequest
        );
    static _UniFFILib.UniffiCallbackInterfaceFree _callback_interface_free =
        new _UniFFILib.UniffiCallbackInterfaceFree(UniffiFree);

    public static _UniFFILib.UniffiVTableCallbackInterfaceNearbyConnectionDelegate _vtable =
        new _UniFFILib.UniffiVTableCallbackInterfaceNearbyConnectionDelegate
        {
            @receivedConnectionRequest = Marshal.GetFunctionPointerForDelegate(_m0),
            @uniffiFree = Marshal.GetFunctionPointerForDelegate(_callback_interface_free),
        };

    public static void Register()
    {
        _UniFFILib.uniffi_intershare_sdk_fn_init_callback_vtable_nearbyconnectiondelegate(
            ref UniffiCallbackInterfaceNearbyConnectionDelegate._vtable
        );
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeNearbyConnectionDelegate : FfiConverter<NearbyConnectionDelegate, ulong>
{
    public static FfiConverterTypeNearbyConnectionDelegate INSTANCE =
        new FfiConverterTypeNearbyConnectionDelegate();

    public ConcurrentHandleMap<NearbyConnectionDelegate> handleMap =
        new ConcurrentHandleMap<NearbyConnectionDelegate>();

    public override ulong Lower(NearbyConnectionDelegate value)
    {
        return handleMap.Insert(value);
    }

    public override NearbyConnectionDelegate Lift(ulong value)
    {
        if (handleMap.TryGet(value, out var uniffiCallback))
        {
            return uniffiCallback;
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{value}'");
        }
    }

    public override NearbyConnectionDelegate Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override int AllocationSize(NearbyConnectionDelegate value)
    {
        return 8;
    }

    public override void Write(NearbyConnectionDelegate value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

public interface NearbyInstantReceiveDelegate
{
    bool RequestedInstantFileReceive(Device @device, String @requestId);
}

class UniffiCallbackInterfaceNearbyInstantReceiveDelegate
{
    static void RequestedInstantFileReceive(
        ulong @uniffiHandle,
        RustBuffer @device,
        RustBuffer @requestId,
        ref sbyte @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeNearbyInstantReceiveDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            var result = uniffiObject.RequestedInstantFileReceive(
                FfiConverterTypeDevice.INSTANCE.Lift(@device),
                FfiConverterString.INSTANCE.Lift(@requestId)
            );
            @uniffiOutReturn = FfiConverterBoolean.INSTANCE.Lower(result);
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void UniffiFree(ulong @handle)
    {
        FfiConverterTypeNearbyInstantReceiveDelegate.INSTANCE.handleMap.Remove(@handle);
    }

    static _UniFFILib.UniffiCallbackInterfaceNearbyInstantReceiveDelegateMethod0 _m0 =
        new _UniFFILib.UniffiCallbackInterfaceNearbyInstantReceiveDelegateMethod0(
            RequestedInstantFileReceive
        );
    static _UniFFILib.UniffiCallbackInterfaceFree _callback_interface_free =
        new _UniFFILib.UniffiCallbackInterfaceFree(UniffiFree);

    public static _UniFFILib.UniffiVTableCallbackInterfaceNearbyInstantReceiveDelegate _vtable =
        new _UniFFILib.UniffiVTableCallbackInterfaceNearbyInstantReceiveDelegate
        {
            @requestedInstantFileReceive = Marshal.GetFunctionPointerForDelegate(_m0),
            @uniffiFree = Marshal.GetFunctionPointerForDelegate(_callback_interface_free),
        };

    public static void Register()
    {
        _UniFFILib.uniffi_intershare_sdk_fn_init_callback_vtable_nearbyinstantreceivedelegate(
            ref UniffiCallbackInterfaceNearbyInstantReceiveDelegate._vtable
        );
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeNearbyInstantReceiveDelegate
    : FfiConverter<NearbyInstantReceiveDelegate, ulong>
{
    public static FfiConverterTypeNearbyInstantReceiveDelegate INSTANCE =
        new FfiConverterTypeNearbyInstantReceiveDelegate();

    public ConcurrentHandleMap<NearbyInstantReceiveDelegate> handleMap =
        new ConcurrentHandleMap<NearbyInstantReceiveDelegate>();

    public override ulong Lower(NearbyInstantReceiveDelegate value)
    {
        return handleMap.Insert(value);
    }

    public override NearbyInstantReceiveDelegate Lift(ulong value)
    {
        if (handleMap.TryGet(value, out var uniffiCallback))
        {
            return uniffiCallback;
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{value}'");
        }
    }

    public override NearbyInstantReceiveDelegate Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override int AllocationSize(NearbyInstantReceiveDelegate value)
    {
        return 8;
    }

    public override void Write(NearbyInstantReceiveDelegate value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

public interface ReceiveProgressDelegate
{
    void ProgressChanged(ReceiveProgressState @progress);
}

class UniffiCallbackInterfaceReceiveProgressDelegate
{
    static void ProgressChanged(
        ulong @uniffiHandle,
        RustBuffer @progress,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeReceiveProgressDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.ProgressChanged(
                FfiConverterTypeReceiveProgressState.INSTANCE.Lift(@progress)
            );
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void UniffiFree(ulong @handle)
    {
        FfiConverterTypeReceiveProgressDelegate.INSTANCE.handleMap.Remove(@handle);
    }

    static _UniFFILib.UniffiCallbackInterfaceReceiveProgressDelegateMethod0 _m0 =
        new _UniFFILib.UniffiCallbackInterfaceReceiveProgressDelegateMethod0(ProgressChanged);
    static _UniFFILib.UniffiCallbackInterfaceFree _callback_interface_free =
        new _UniFFILib.UniffiCallbackInterfaceFree(UniffiFree);

    public static _UniFFILib.UniffiVTableCallbackInterfaceReceiveProgressDelegate _vtable =
        new _UniFFILib.UniffiVTableCallbackInterfaceReceiveProgressDelegate
        {
            @progressChanged = Marshal.GetFunctionPointerForDelegate(_m0),
            @uniffiFree = Marshal.GetFunctionPointerForDelegate(_callback_interface_free),
        };

    public static void Register()
    {
        _UniFFILib.uniffi_intershare_sdk_fn_init_callback_vtable_receiveprogressdelegate(
            ref UniffiCallbackInterfaceReceiveProgressDelegate._vtable
        );
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeReceiveProgressDelegate : FfiConverter<ReceiveProgressDelegate, ulong>
{
    public static FfiConverterTypeReceiveProgressDelegate INSTANCE =
        new FfiConverterTypeReceiveProgressDelegate();

    public ConcurrentHandleMap<ReceiveProgressDelegate> handleMap =
        new ConcurrentHandleMap<ReceiveProgressDelegate>();

    public override ulong Lower(ReceiveProgressDelegate value)
    {
        return handleMap.Insert(value);
    }

    public override ReceiveProgressDelegate Lift(ulong value)
    {
        if (handleMap.TryGet(value, out var uniffiCallback))
        {
            return uniffiCallback;
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{value}'");
        }
    }

    public override ReceiveProgressDelegate Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override int AllocationSize(ReceiveProgressDelegate value)
    {
        return 8;
    }

    public override void Write(ReceiveProgressDelegate value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

public interface SendProgressDelegate
{
    void ProgressChanged(SendProgressState @progress);
}

class UniffiCallbackInterfaceSendProgressDelegate
{
    static void ProgressChanged(
        ulong @uniffiHandle,
        RustBuffer @progress,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeSendProgressDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.ProgressChanged(
                FfiConverterTypeSendProgressState.INSTANCE.Lift(@progress)
            );
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void UniffiFree(ulong @handle)
    {
        FfiConverterTypeSendProgressDelegate.INSTANCE.handleMap.Remove(@handle);
    }

    static _UniFFILib.UniffiCallbackInterfaceSendProgressDelegateMethod0 _m0 =
        new _UniFFILib.UniffiCallbackInterfaceSendProgressDelegateMethod0(ProgressChanged);
    static _UniFFILib.UniffiCallbackInterfaceFree _callback_interface_free =
        new _UniFFILib.UniffiCallbackInterfaceFree(UniffiFree);

    public static _UniFFILib.UniffiVTableCallbackInterfaceSendProgressDelegate _vtable =
        new _UniFFILib.UniffiVTableCallbackInterfaceSendProgressDelegate
        {
            @progressChanged = Marshal.GetFunctionPointerForDelegate(_m0),
            @uniffiFree = Marshal.GetFunctionPointerForDelegate(_callback_interface_free),
        };

    public static void Register()
    {
        _UniFFILib.uniffi_intershare_sdk_fn_init_callback_vtable_sendprogressdelegate(
            ref UniffiCallbackInterfaceSendProgressDelegate._vtable
        );
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeSendProgressDelegate : FfiConverter<SendProgressDelegate, ulong>
{
    public static FfiConverterTypeSendProgressDelegate INSTANCE =
        new FfiConverterTypeSendProgressDelegate();

    public ConcurrentHandleMap<SendProgressDelegate> handleMap =
        new ConcurrentHandleMap<SendProgressDelegate>();

    public override ulong Lower(SendProgressDelegate value)
    {
        return handleMap.Insert(value);
    }

    public override SendProgressDelegate Lift(ulong value)
    {
        if (handleMap.TryGet(value, out var uniffiCallback))
        {
            return uniffiCallback;
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{value}'");
        }
    }

    public override SendProgressDelegate Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override int AllocationSize(SendProgressDelegate value)
    {
        return 8;
    }

    public override void Write(SendProgressDelegate value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

public interface ShareProgressDelegate
{
    void ProgressChanged(ShareProgressState @progress);
}

class UniffiCallbackInterfaceShareProgressDelegate
{
    static void ProgressChanged(
        ulong @uniffiHandle,
        RustBuffer @progress,
        IntPtr @uniffiOutReturn,
        ref UniffiRustCallStatus _uniffi_out_err
    )
    {
        var handle = @uniffiHandle;
        if (
            FfiConverterTypeShareProgressDelegate.INSTANCE.handleMap.TryGet(
                handle,
                out var uniffiObject
            )
        )
        {
            uniffiObject.ProgressChanged(
                FfiConverterTypeShareProgressState.INSTANCE.Lift(@progress)
            );
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
    }

    static void UniffiFree(ulong @handle)
    {
        FfiConverterTypeShareProgressDelegate.INSTANCE.handleMap.Remove(@handle);
    }

    static _UniFFILib.UniffiCallbackInterfaceShareProgressDelegateMethod0 _m0 =
        new _UniFFILib.UniffiCallbackInterfaceShareProgressDelegateMethod0(ProgressChanged);
    static _UniFFILib.UniffiCallbackInterfaceFree _callback_interface_free =
        new _UniFFILib.UniffiCallbackInterfaceFree(UniffiFree);

    public static _UniFFILib.UniffiVTableCallbackInterfaceShareProgressDelegate _vtable =
        new _UniFFILib.UniffiVTableCallbackInterfaceShareProgressDelegate
        {
            @progressChanged = Marshal.GetFunctionPointerForDelegate(_m0),
            @uniffiFree = Marshal.GetFunctionPointerForDelegate(_callback_interface_free),
        };

    public static void Register()
    {
        _UniFFILib.uniffi_intershare_sdk_fn_init_callback_vtable_shareprogressdelegate(
            ref UniffiCallbackInterfaceShareProgressDelegate._vtable
        );
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeShareProgressDelegate : FfiConverter<ShareProgressDelegate, ulong>
{
    public static FfiConverterTypeShareProgressDelegate INSTANCE =
        new FfiConverterTypeShareProgressDelegate();

    public ConcurrentHandleMap<ShareProgressDelegate> handleMap =
        new ConcurrentHandleMap<ShareProgressDelegate>();

    public override ulong Lower(ShareProgressDelegate value)
    {
        return handleMap.Insert(value);
    }

    public override ShareProgressDelegate Lift(ulong value)
    {
        if (handleMap.TryGet(value, out var uniffiCallback))
        {
            return uniffiCallback;
        }
        else
        {
            throw new InternalException($"No callback in handlemap '{value}'");
        }
    }

    public override ShareProgressDelegate Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override int AllocationSize(ShareProgressDelegate value)
    {
        return 8;
    }

    public override void Write(ShareProgressDelegate value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

class FfiConverterOptionalUInt32 : FfiConverterRustBuffer<uint?>
{
    public static FfiConverterOptionalUInt32 INSTANCE = new FfiConverterOptionalUInt32();

    public override uint? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterUInt32.INSTANCE.Read(stream);
    }

    public override int AllocationSize(uint? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterUInt32.INSTANCE.AllocationSize((uint)value);
        }
    }

    public override void Write(uint? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterUInt32.INSTANCE.Write((uint)value, stream);
        }
    }
}

class FfiConverterOptionalString : FfiConverterRustBuffer<String?>
{
    public static FfiConverterOptionalString INSTANCE = new FfiConverterOptionalString();

    public override String? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterString.INSTANCE.Read(stream);
    }

    public override int AllocationSize(String? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterString.INSTANCE.AllocationSize((String)value);
        }
    }

    public override void Write(String? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterString.INSTANCE.Write((String)value, stream);
        }
    }
}

class FfiConverterOptionalTypeClipboardTransferIntent
    : FfiConverterRustBuffer<ClipboardTransferIntent?>
{
    public static FfiConverterOptionalTypeClipboardTransferIntent INSTANCE =
        new FfiConverterOptionalTypeClipboardTransferIntent();

    public override ClipboardTransferIntent? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeClipboardTransferIntent.INSTANCE.Read(stream);
    }

    public override int AllocationSize(ClipboardTransferIntent? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1
                + FfiConverterTypeClipboardTransferIntent.INSTANCE.AllocationSize(
                    (ClipboardTransferIntent)value
                );
        }
    }

    public override void Write(ClipboardTransferIntent? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeClipboardTransferIntent.INSTANCE.Write(
                (ClipboardTransferIntent)value,
                stream
            );
        }
    }
}

class FfiConverterOptionalTypeFileTransferIntent : FfiConverterRustBuffer<FileTransferIntent?>
{
    public static FfiConverterOptionalTypeFileTransferIntent INSTANCE =
        new FfiConverterOptionalTypeFileTransferIntent();

    public override FileTransferIntent? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeFileTransferIntent.INSTANCE.Read(stream);
    }

    public override int AllocationSize(FileTransferIntent? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1
                + FfiConverterTypeFileTransferIntent.INSTANCE.AllocationSize(
                    (FileTransferIntent)value
                );
        }
    }

    public override void Write(FileTransferIntent? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeFileTransferIntent.INSTANCE.Write((FileTransferIntent)value, stream);
        }
    }
}

class FfiConverterOptionalTypeDeviceListUpdateDelegate
    : FfiConverterRustBuffer<DeviceListUpdateDelegate?>
{
    public static FfiConverterOptionalTypeDeviceListUpdateDelegate INSTANCE =
        new FfiConverterOptionalTypeDeviceListUpdateDelegate();

    public override DeviceListUpdateDelegate? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeDeviceListUpdateDelegate.INSTANCE.Read(stream);
    }

    public override int AllocationSize(DeviceListUpdateDelegate? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1
                + FfiConverterTypeDeviceListUpdateDelegate.INSTANCE.AllocationSize(
                    (DeviceListUpdateDelegate)value
                );
        }
    }

    public override void Write(DeviceListUpdateDelegate? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeDeviceListUpdateDelegate.INSTANCE.Write(
                (DeviceListUpdateDelegate)value,
                stream
            );
        }
    }
}

class FfiConverterOptionalTypeNearbyConnectionDelegate
    : FfiConverterRustBuffer<NearbyConnectionDelegate?>
{
    public static FfiConverterOptionalTypeNearbyConnectionDelegate INSTANCE =
        new FfiConverterOptionalTypeNearbyConnectionDelegate();

    public override NearbyConnectionDelegate? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeNearbyConnectionDelegate.INSTANCE.Read(stream);
    }

    public override int AllocationSize(NearbyConnectionDelegate? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1
                + FfiConverterTypeNearbyConnectionDelegate.INSTANCE.AllocationSize(
                    (NearbyConnectionDelegate)value
                );
        }
    }

    public override void Write(NearbyConnectionDelegate? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeNearbyConnectionDelegate.INSTANCE.Write(
                (NearbyConnectionDelegate)value,
                stream
            );
        }
    }
}

class FfiConverterOptionalTypeSendProgressDelegate : FfiConverterRustBuffer<SendProgressDelegate?>
{
    public static FfiConverterOptionalTypeSendProgressDelegate INSTANCE =
        new FfiConverterOptionalTypeSendProgressDelegate();

    public override SendProgressDelegate? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeSendProgressDelegate.INSTANCE.Read(stream);
    }

    public override int AllocationSize(SendProgressDelegate? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1
                + FfiConverterTypeSendProgressDelegate.INSTANCE.AllocationSize(
                    (SendProgressDelegate)value
                );
        }
    }

    public override void Write(SendProgressDelegate? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeSendProgressDelegate.INSTANCE.Write(
                (SendProgressDelegate)value,
                stream
            );
        }
    }
}

class FfiConverterOptionalTypeShareProgressDelegate : FfiConverterRustBuffer<ShareProgressDelegate?>
{
    public static FfiConverterOptionalTypeShareProgressDelegate INSTANCE =
        new FfiConverterOptionalTypeShareProgressDelegate();

    public override ShareProgressDelegate? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeShareProgressDelegate.INSTANCE.Read(stream);
    }

    public override int AllocationSize(ShareProgressDelegate? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1
                + FfiConverterTypeShareProgressDelegate.INSTANCE.AllocationSize(
                    (ShareProgressDelegate)value
                );
        }
    }

    public override void Write(ShareProgressDelegate? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeShareProgressDelegate.INSTANCE.Write(
                (ShareProgressDelegate)value,
                stream
            );
        }
    }
}

class FfiConverterOptionalSequenceUInt8 : FfiConverterRustBuffer<List<byte>?>
{
    public static FfiConverterOptionalSequenceUInt8 INSTANCE =
        new FfiConverterOptionalSequenceUInt8();

    public override List<byte>? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterSequenceUInt8.INSTANCE.Read(stream);
    }

    public override int AllocationSize(List<byte>? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterSequenceUInt8.INSTANCE.AllocationSize((List<byte>)value);
        }
    }

    public override void Write(List<byte>? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterSequenceUInt8.INSTANCE.Write((List<byte>)value, stream);
        }
    }
}

class FfiConverterOptionalSequenceString : FfiConverterRustBuffer<List<String>?>
{
    public static FfiConverterOptionalSequenceString INSTANCE =
        new FfiConverterOptionalSequenceString();

    public override List<String>? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterSequenceString.INSTANCE.Read(stream);
    }

    public override int AllocationSize(List<String>? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterSequenceString.INSTANCE.AllocationSize((List<String>)value);
        }
    }

    public override void Write(List<String>? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterSequenceString.INSTANCE.Write((List<String>)value, stream);
        }
    }
}

class FfiConverterSequenceUInt8 : FfiConverterRustBuffer<List<byte>>
{
    public static FfiConverterSequenceUInt8 INSTANCE = new FfiConverterSequenceUInt8();

    public override List<byte> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<byte>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterUInt8.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<byte> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item => FfiConverterUInt8.INSTANCE.AllocationSize(item))
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<byte> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterUInt8.INSTANCE.Write(item, stream));
    }
}

class FfiConverterSequenceString : FfiConverterRustBuffer<List<String>>
{
    public static FfiConverterSequenceString INSTANCE = new FfiConverterSequenceString();

    public override List<String> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<String>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterString.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<String> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item => FfiConverterString.INSTANCE.AllocationSize(item))
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<String> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterString.INSTANCE.Write(item, stream));
    }
}

class FfiConverterSequenceTypeDevice : FfiConverterRustBuffer<List<Device>>
{
    public static FfiConverterSequenceTypeDevice INSTANCE = new FfiConverterSequenceTypeDevice();

    public override List<Device> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<Device>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterTypeDevice.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<Device> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item => FfiConverterTypeDevice.INSTANCE.AllocationSize(item))
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<Device> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeDevice.INSTANCE.Write(item, stream));
    }
}

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
delegate void UniFfiFutureCallback(IntPtr continuationHandle, byte pollResult);

internal static class _UniFFIAsync
{
    internal const byte UNIFFI_RUST_FUTURE_POLL_READY = 0;

    // internal const byte UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1;

    internal static ConcurrentHandleMap<TaskCompletionSource<byte>> _async_handle_map =
        new ConcurrentHandleMap<TaskCompletionSource<byte>>();
    public static ConcurrentHandleMap<CancellationTokenSource> _foreign_futures_map =
        new ConcurrentHandleMap<CancellationTokenSource>();

    // FFI type for Rust future continuations
    internal class UniffiRustFutureContinuationCallback
    {
        public static UniFfiFutureCallback callback = Callback;

        public static void Callback(IntPtr continuationHandle, byte pollResult)
        {
            var data = _async_handle_map.Get((ulong)continuationHandle.ToInt64());
            if (data is TaskCompletionSource<byte> tcs)
            {
                tcs.SetResult(pollResult);
            }
            else
            {
                throw new InternalException(
                    "Unable to cast unmanaged IntPtr to TaskCompletionSource<byte>"
                );
            }
        }
    }

    public class UniffiForeignFutureFreeCallback
    {
        public static _UniFFILib.UniffiForeignFutureFree callback = Callback;

        public static void Callback(ulong handle)
        {
            if (_foreign_futures_map.Remove(handle, out CancellationTokenSource task))
            {
                task.Cancel();
            }
        }
    }

    public delegate F CompleteFuncDelegate<F>(IntPtr ptr, ref UniffiRustCallStatus status);

    public delegate void CompleteActionDelegate(IntPtr ptr, ref UniffiRustCallStatus status);

    private static async Task PollFuture(IntPtr rustFuture, Action<IntPtr, IntPtr, IntPtr> pollFunc)
    {
        byte pollResult;
        do
        {
            var tcs = new TaskCompletionSource<byte>(
                TaskCreationOptions.RunContinuationsAsynchronously
            );
            IntPtr callback = Marshal.GetFunctionPointerForDelegate(
                UniffiRustFutureContinuationCallback.callback
            );
            ulong mapEntry = _async_handle_map.Insert(tcs);
            pollFunc(rustFuture, callback, (IntPtr)mapEntry);
            pollResult = await tcs.Task;
        } while (pollResult != UNIFFI_RUST_FUTURE_POLL_READY);
    }

    public static async Task<T> UniffiRustCallAsync<T, F, E>(
        IntPtr rustFuture,
        Action<IntPtr, IntPtr, IntPtr> pollFunc,
        CompleteFuncDelegate<F> completeFunc,
        Action<IntPtr> freeFunc,
        Func<F, T> liftFunc,
        CallStatusErrorHandler<E> errorHandler
    )
        where E : UniffiException
    {
        try
        {
            await PollFuture(rustFuture, pollFunc);
            var result = _UniffiHelpers.RustCallWithError(
                errorHandler,
                (ref UniffiRustCallStatus status) => completeFunc(rustFuture, ref status)
            );
            return liftFunc(result);
        }
        finally
        {
            freeFunc(rustFuture);
        }
    }

    public static async Task UniffiRustCallAsync<E>(
        IntPtr rustFuture,
        Action<IntPtr, IntPtr, IntPtr> pollFunc,
        CompleteActionDelegate completeFunc,
        Action<IntPtr> freeFunc,
        CallStatusErrorHandler<E> errorHandler
    )
        where E : UniffiException
    {
        try
        {
            await PollFuture(rustFuture, pollFunc);
            _UniffiHelpers.RustCallWithError(
                errorHandler,
                (ref UniffiRustCallStatus status) => completeFunc(rustFuture, ref status)
            );
        }
        finally
        {
            freeFunc(rustFuture);
        }
    }
}
#pragma warning restore 8625
public static class InterShareSdkMethods
{
    public static String GetBleDiscoveryCharacteristicUuid()
    {
        return FfiConverterString.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_func_get_ble_discovery_characteristic_uuid(
                        ref _status
                    )
            )
        );
    }

    public static String GetBleServiceUuid()
    {
        return FfiConverterString.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_func_get_ble_service_uuid(ref _status)
            )
        );
    }

    public static String? GetLogFilePathStr()
    {
        return FfiConverterOptionalString.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_func_get_log_file_path_str(ref _status)
            )
        );
    }

    public static async Task HandleIncomingL2capConnection(
        String @connectionId,
        NativeStreamDelegate @nativeStream
    )
    {
        await _UniFFIAsync.UniffiRustCallAsync(
            // Get rust future
            _UniFFILib.uniffi_intershare_sdk_fn_func_handle_incoming_l2cap_connection(
                FfiConverterString.INSTANCE.Lower(@connectionId),
                FfiConverterTypeNativeStreamDelegate.INSTANCE.Lower(@nativeStream)
            ),
            // Poll
            (IntPtr future, IntPtr continuation, IntPtr data) =>
                _UniFFILib.ffi_intershare_sdk_rust_future_poll_void(future, continuation, data),
            // Complete
            (IntPtr future, ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.ffi_intershare_sdk_rust_future_complete_void(future, ref status);
            },
            // Free
            (IntPtr future) => _UniFFILib.ffi_intershare_sdk_rust_future_free_void(future),
            // Error
            NullCallStatusErrorHandler.INSTANCE
        );
    }

    public static VersionCompatibility IsCompatible(Device @device)
    {
        return FfiConverterTypeVersionCompatibility.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref UniffiRustCallStatus _status) =>
                    _UniFFILib.uniffi_intershare_sdk_fn_func_is_compatible(
                        FfiConverterTypeDevice.INSTANCE.Lower(@device),
                        ref _status
                    )
            )
        );
    }
}
