plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'idea'
    id "org.mozilla.rust-android-gradle.rust-android"
    id "maven-publish"
}

android {
    namespace 'com.julian_baumann.data_rct'
    compileSdk 34
    ndkVersion '26.1.10909125'

    defaultConfig {
        minSdk 29

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    libraryVariants.all { variant ->
        def t = tasks.register("generate${variant.name.capitalize()}UniFFIBindings", Exec) {
            workingDir "${project.projectDir}"
            // Runs the bindings generation, note that you must have uniffi-bindgen installed and in your PATH environment variable
            commandLine 'cargo', 'run', '--bin', 'uniffi-bindgen', 'generate', '--library', '../../../target/aarch64-linux-android/release/libdata_rct_ffi.so', '--config', '../../../src/data_rct_ffi/uniffi.toml', '--language', 'kotlin', '--out-dir', "${buildDir}/generated/source/uniffi/${variant.name}/java"
        }

        variant.javaCompileProvider.get().dependsOn(t)
        def sourceSet = variant.sourceSets.find { it.name == variant.name }
        sourceSet.java.srcDir new File(buildDir, "generated/source/uniffi/${variant.name}/java")
        // XXX: I've been trying to make this work but I can't, so the compiled bindings will show as "regular sources" in Android Studio.
        idea.module.generatedSourceDirs += file("${buildDir}/generated/source/uniffi/${variant.name}/java/uniffi")
    }

    publishing {
        singleVariant("release") {
            // if you don't want sources/javadoc, remove these lines
            withSourcesJar()
            withJavadocJar()
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/julian-baumann/data-rct")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        release(MavenPublication) {
            version = System.getenv("VERSION")
            groupId =  "com.julian_baumann"
            artifactId = "data_rct"

            afterEvaluate {
                from components.release
            }
        }
    }
}

cargo {
    module  = "../../../"       // Or whatever directory contains your Cargo.toml
    libname = "data_rct_ffi"          // Or whatever matches Cargo.toml's [package] name.
    targets = ["arm", "x86", "arm64"]  // See bellow for a longer list of options
    apiLevel = 26
    profile = "release"
}

tasks.matching { it.name.matches(/merge.*JniLibFolders/) }.configureEach {
    it.inputs.dir(new File(buildDir, "rustJniLibs/android"))
    it.dependsOn("cargoBuild")
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation "net.java.dev.jna:jna:5.12.0@aar"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
}
