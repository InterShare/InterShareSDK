// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(DataRCTFFI)
    import DataRCTFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_DataRCT_4c48_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_DataRCT_4c48_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
(_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
{
    try makeRustCall(callback, errorHandler: { try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
    case CALL_SUCCESS:
        return returnedVal

    case CALL_ERROR:
        throw try errorHandler(callStatus.errorBuf)

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol DiscoveryProtocol {
    func advertise()
    func stopAdvertising()
    func startSearch()
    func stopSearch()
    func getDevices() -> [DeviceInfo]
}

public class Discovery: DiscoveryProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(myDevice: DeviceInfo, method: DiscoveryMethod, delegate: DiscoveryDelegate?) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeDiscoverySetupError.self) {
                DataRCT_4c48_Discovery_new(
                    FfiConverterTypeDeviceInfo.lower(myDevice),
                    FfiConverterTypeDiscoveryMethod.lower(method),
                    FfiConverterOptionCallbackInterfaceDiscoveryDelegate.lower(delegate), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_DataRCT_4c48_Discovery_object_free(pointer, $0) }
    }

    public func advertise() {
        try!
            rustCall {
                DataRCT_4c48_Discovery_advertise(self.pointer, $0)
            }
    }

    public func stopAdvertising() {
        try!
            rustCall {
                DataRCT_4c48_Discovery_stop_advertising(self.pointer, $0)
            }
    }

    public func startSearch() {
        try!
            rustCall {
                DataRCT_4c48_Discovery_start_search(self.pointer, $0)
            }
    }

    public func stopSearch() {
        try!
            rustCall {
                DataRCT_4c48_Discovery_stop_search(self.pointer, $0)
            }
    }

    public func getDevices() -> [DeviceInfo] {
        return try! FfiConverterSequenceTypeDeviceInfo.lift(
            try!
                rustCall {
                    DataRCT_4c48_Discovery_get_devices(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeDiscovery: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Discovery

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Discovery {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Discovery, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Discovery {
        return Discovery(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Discovery) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol EncryptedStreamProtocol {
    func readBytes(buffer: [UInt8]) throws -> UInt64
    func writeBytes(buffer: [UInt8]) throws -> UInt64
    func flushBytes() throws
}

public class EncryptedStream: EncryptedStreamProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_DataRCT_4c48_EncryptedStream_object_free(pointer, $0) }
    }

    public func readBytes(buffer: [UInt8]) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
                rustCallWithError(FfiConverterTypeExternalIoError.self) {
                    DataRCT_4c48_EncryptedStream_read_bytes(self.pointer,
                                                            FfiConverterSequenceUInt8.lower(buffer), $0)
                }
        )
    }

    public func writeBytes(buffer: [UInt8]) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
                rustCallWithError(FfiConverterTypeExternalIoError.self) {
                    DataRCT_4c48_EncryptedStream_write_bytes(self.pointer,
                                                             FfiConverterSequenceUInt8.lower(buffer), $0)
                }
        )
    }

    public func flushBytes() throws {
        try
            rustCallWithError(FfiConverterTypeExternalIoError.self) {
                DataRCT_4c48_EncryptedStream_flush_bytes(self.pointer, $0)
            }
    }
}

public struct FfiConverterTypeEncryptedStream: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EncryptedStream

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EncryptedStream {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EncryptedStream, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EncryptedStream {
        return EncryptedStream(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EncryptedStream) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol TransmissionProtocol {
    func getIncoming() -> TransmissionRequest?
    func connectToDevice(recipient: DeviceInfo) throws -> EncryptedStream
    func getPort() -> UInt16
}

public class Transmission: TransmissionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(myDevice: DeviceInfo) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(FfiConverterTypeTransmissionSetupError.self) {
                DataRCT_4c48_Transmission_new(
                    FfiConverterTypeDeviceInfo.lower(myDevice), $0
                )
            })
    }

    deinit {
        try! rustCall { ffi_DataRCT_4c48_Transmission_object_free(pointer, $0) }
    }

    public func getIncoming() -> TransmissionRequest? {
        return try! FfiConverterOptionTypeTransmissionRequest.lift(
            try!
                rustCall {
                    DataRCT_4c48_Transmission_get_incoming(self.pointer, $0)
                }
        )
    }

    public func connectToDevice(recipient: DeviceInfo) throws -> EncryptedStream {
        return try FfiConverterTypeEncryptedStream.lift(
            try
                rustCallWithError(FfiConverterTypeConnectErrors.self) {
                    DataRCT_4c48_Transmission_connect_to_device(self.pointer,
                                                                FfiConverterTypeDeviceInfo.lower(recipient), $0)
                }
        )
    }

    public func getPort() -> UInt16 {
        return try! FfiConverterUInt16.lift(
            try!
                rustCall {
                    DataRCT_4c48_Transmission_get_port(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeTransmission: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Transmission

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Transmission {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Transmission, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Transmission {
        return Transmission(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Transmission) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public protocol TransmissionRequestProtocol {
    func getSessionUuid() -> String
    func getSenderId() -> String
    func getSenderName() -> String
    func accept() throws -> EncryptedStream
    func deny() throws
}

public class TransmissionRequest: TransmissionRequestProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_DataRCT_4c48_TransmissionRequest_object_free(pointer, $0) }
    }

    public func getSessionUuid() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    DataRCT_4c48_TransmissionRequest_get_session_uuid(self.pointer, $0)
                }
        )
    }

    public func getSenderId() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    DataRCT_4c48_TransmissionRequest_get_sender_id(self.pointer, $0)
                }
        )
    }

    public func getSenderName() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    DataRCT_4c48_TransmissionRequest_get_sender_name(self.pointer, $0)
                }
        )
    }

    public func accept() throws -> EncryptedStream {
        return try FfiConverterTypeEncryptedStream.lift(
            try
                rustCallWithError(FfiConverterTypeExternalIoError.self) {
                    DataRCT_4c48_TransmissionRequest_accept(self.pointer, $0)
                }
        )
    }

    public func deny() throws {
        try
            rustCallWithError(FfiConverterTypeExternalIoError.self) {
                DataRCT_4c48_TransmissionRequest_deny(self.pointer, $0)
            }
    }
}

public struct FfiConverterTypeTransmissionRequest: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TransmissionRequest

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransmissionRequest {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TransmissionRequest, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TransmissionRequest {
        return TransmissionRequest(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TransmissionRequest) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public struct DeviceInfo {
    public var id: String
    public var name: String
    public var port: UInt16
    public var deviceType: String
    public var ipAddress: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, name: String, port: UInt16, deviceType: String, ipAddress: String) {
        self.id = id
        self.name = name
        self.port = port
        self.deviceType = deviceType
        self.ipAddress = ipAddress
    }
}

extension DeviceInfo: Equatable, Hashable {
    public static func == (lhs: DeviceInfo, rhs: DeviceInfo) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.port != rhs.port {
            return false
        }
        if lhs.deviceType != rhs.deviceType {
            return false
        }
        if lhs.ipAddress != rhs.ipAddress {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(port)
        hasher.combine(deviceType)
        hasher.combine(ipAddress)
    }
}

public struct FfiConverterTypeDeviceInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DeviceInfo {
        return try DeviceInfo(
            id: FfiConverterString.read(from: &buf),
            name: FfiConverterString.read(from: &buf),
            port: FfiConverterUInt16.read(from: &buf),
            deviceType: FfiConverterString.read(from: &buf),
            ipAddress: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DeviceInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterUInt16.write(value.port, into: &buf)
        FfiConverterString.write(value.deviceType, into: &buf)
        FfiConverterString.write(value.ipAddress, into: &buf)
    }
}

public func FfiConverterTypeDeviceInfo_lift(_ buf: RustBuffer) throws -> DeviceInfo {
    return try FfiConverterTypeDeviceInfo.lift(buf)
}

public func FfiConverterTypeDeviceInfo_lower(_ value: DeviceInfo) -> RustBuffer {
    return FfiConverterTypeDeviceInfo.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum DiscoveryMethod {
    case both
    case mdns
    case udp
}

public struct FfiConverterTypeDiscoveryMethod: FfiConverterRustBuffer {
    typealias SwiftType = DiscoveryMethod

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiscoveryMethod {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .both

        case 2: return .mdns

        case 3: return .udp

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DiscoveryMethod, into buf: inout [UInt8]) {
        switch value {
        case .both:
            writeInt(&buf, Int32(1))

        case .mdns:
            writeInt(&buf, Int32(2))

        case .udp:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypeDiscoveryMethod_lift(_ buf: RustBuffer) throws -> DiscoveryMethod {
    return try FfiConverterTypeDiscoveryMethod.lift(buf)
}

public func FfiConverterTypeDiscoveryMethod_lower(_ value: DiscoveryMethod) -> RustBuffer {
    return FfiConverterTypeDiscoveryMethod.lower(value)
}

extension DiscoveryMethod: Equatable, Hashable {}

public enum ConnectErrors {
    // Simple error enums only carry a message
    case UnknownWriteError(message: String)

    // Simple error enums only carry a message
    case UnknownReadError(message: String)

    // Simple error enums only carry a message
    case InvalidSocketAddress(message: String)

    // Simple error enums only carry a message
    case CouldNotOpenSocket(message: String)

    // Simple error enums only carry a message
    case EncryptionError(message: String)

    // Simple error enums only carry a message
    case InvalidForeignPublicKey(message: String)

    // Simple error enums only carry a message
    case Rejected(message: String)
}

public struct FfiConverterTypeConnectErrors: FfiConverterRustBuffer {
    typealias SwiftType = ConnectErrors

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectErrors {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .UnknownWriteError(
                message: try FfiConverterString.read(from: &buf)
            )

        case 2: return .UnknownReadError(
                message: try FfiConverterString.read(from: &buf)
            )

        case 3: return .InvalidSocketAddress(
                message: try FfiConverterString.read(from: &buf)
            )

        case 4: return .CouldNotOpenSocket(
                message: try FfiConverterString.read(from: &buf)
            )

        case 5: return .EncryptionError(
                message: try FfiConverterString.read(from: &buf)
            )

        case 6: return .InvalidForeignPublicKey(
                message: try FfiConverterString.read(from: &buf)
            )

        case 7: return .Rejected(
                message: try FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConnectErrors, into buf: inout [UInt8]) {
        switch value {
        case let .UnknownWriteError(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
        case let .UnknownReadError(message):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidSocketAddress(message):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(message, into: &buf)
        case let .CouldNotOpenSocket(message):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(message, into: &buf)
        case let .EncryptionError(message):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidForeignPublicKey(message):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(message, into: &buf)
        case let .Rejected(message):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(message, into: &buf)
        }
    }
}

extension ConnectErrors: Equatable, Hashable {}

extension ConnectErrors: Error {}

public enum DiscoverySetupError {
    // Simple error enums only carry a message
    case UnableToSetupUdp(message: String)

    // Simple error enums only carry a message
    case UnableToSetupMdns(message: String)
}

public struct FfiConverterTypeDiscoverySetupError: FfiConverterRustBuffer {
    typealias SwiftType = DiscoverySetupError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiscoverySetupError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .UnableToSetupUdp(
                message: try FfiConverterString.read(from: &buf)
            )

        case 2: return .UnableToSetupMdns(
                message: try FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DiscoverySetupError, into buf: inout [UInt8]) {
        switch value {
        case let .UnableToSetupUdp(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
        case let .UnableToSetupMdns(message):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(message, into: &buf)
        }
    }
}

extension DiscoverySetupError: Equatable, Hashable {}

extension DiscoverySetupError: Error {}

public enum ExternalIoError {
    case IoError(reason: String)
}

public struct FfiConverterTypeExternalIoError: FfiConverterRustBuffer {
    typealias SwiftType = ExternalIoError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExternalIoError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .IoError(
                reason: try FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ExternalIoError, into buf: inout [UInt8]) {
        switch value {
        case let .IoError(reason):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(reason, into: &buf)
        }
    }
}

extension ExternalIoError: Equatable, Hashable {}

extension ExternalIoError: Error {}

public enum IncomingErrors {
    // Simple error enums only carry a message
    case UnknownReadError(message: String)

    // Simple error enums only carry a message
    case StringConversionError(message: String)

    // Simple error enums only carry a message
    case MissingProtocolVersion(message: String)

    // Simple error enums only carry a message
    case InvalidVersion(message: String)

    // Simple error enums only carry a message
    case InvalidUuid(message: String)

    // Simple error enums only carry a message
    case InvalidForeignPublicKey(message: String)

    // Simple error enums only carry a message
    case ErrorSendingPublicKey(message: String)

    // Simple error enums only carry a message
    case InvalidNonce(message: String)

    // Simple error enums only carry a message
    case EncryptionError(message: String)

    // Simple error enums only carry a message
    case InvalidSenderId(message: String)

    // Simple error enums only carry a message
    case InvalidSenderName(message: String)

    // Simple error enums only carry a message
    case Rejected(message: String)
}

public struct FfiConverterTypeIncomingErrors: FfiConverterRustBuffer {
    typealias SwiftType = IncomingErrors

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IncomingErrors {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .UnknownReadError(
                message: try FfiConverterString.read(from: &buf)
            )

        case 2: return .StringConversionError(
                message: try FfiConverterString.read(from: &buf)
            )

        case 3: return .MissingProtocolVersion(
                message: try FfiConverterString.read(from: &buf)
            )

        case 4: return .InvalidVersion(
                message: try FfiConverterString.read(from: &buf)
            )

        case 5: return .InvalidUuid(
                message: try FfiConverterString.read(from: &buf)
            )

        case 6: return .InvalidForeignPublicKey(
                message: try FfiConverterString.read(from: &buf)
            )

        case 7: return .ErrorSendingPublicKey(
                message: try FfiConverterString.read(from: &buf)
            )

        case 8: return .InvalidNonce(
                message: try FfiConverterString.read(from: &buf)
            )

        case 9: return .EncryptionError(
                message: try FfiConverterString.read(from: &buf)
            )

        case 10: return .InvalidSenderId(
                message: try FfiConverterString.read(from: &buf)
            )

        case 11: return .InvalidSenderName(
                message: try FfiConverterString.read(from: &buf)
            )

        case 12: return .Rejected(
                message: try FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: IncomingErrors, into buf: inout [UInt8]) {
        switch value {
        case let .UnknownReadError(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
        case let .StringConversionError(message):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(message, into: &buf)
        case let .MissingProtocolVersion(message):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidVersion(message):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidUuid(message):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidForeignPublicKey(message):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(message, into: &buf)
        case let .ErrorSendingPublicKey(message):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidNonce(message):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(message, into: &buf)
        case let .EncryptionError(message):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidSenderId(message):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(message, into: &buf)
        case let .InvalidSenderName(message):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(message, into: &buf)
        case let .Rejected(message):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(message, into: &buf)
        }
    }
}

extension IncomingErrors: Equatable, Hashable {}

extension IncomingErrors: Error {}

public enum TransmissionSetupError {
    // Simple error enums only carry a message
    case UnableToStartTcpServer(message: String)
}

public struct FfiConverterTypeTransmissionSetupError: FfiConverterRustBuffer {
    typealias SwiftType = TransmissionSetupError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransmissionSetupError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .UnableToStartTcpServer(
                message: try FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransmissionSetupError, into buf: inout [UInt8]) {
        switch value {
        case let .UnableToStartTcpServer(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
        }
    }
}

extension TransmissionSetupError: Equatable, Hashable {}

extension TransmissionSetupError: Error {}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias UniFFICallbackHandle = UInt64
private class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0

// Declaration and FfiConverters for DiscoveryDelegate Callback Interface

public protocol DiscoveryDelegate: AnyObject {
    func deviceAdded(value: DeviceInfo)
    func deviceRemoved(deviceId: String)
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceDiscoveryDelegate: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func invokeDeviceAdded(_ swiftCallbackInterface: DiscoveryDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            var reader = createReader(data: Data(rustBuffer: args))
            swiftCallbackInterface.deviceAdded(
                value: try FfiConverterTypeDeviceInfo.read(from: &reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }
        func invokeDeviceRemoved(_ swiftCallbackInterface: DiscoveryDelegate, _ args: RustBuffer) throws -> RustBuffer {
            defer { args.deallocate() }

            var reader = createReader(data: Data(rustBuffer: args))
            swiftCallbackInterface.deviceRemoved(
                deviceId: try FfiConverterString.read(from: &reader)
            )
            return RustBuffer()
            // TODO: catch errors and report them back to Rust.
            // https://github.com/mozilla/uniffi-rs/issues/351
        }

        let cb: DiscoveryDelegate
        do {
            cb = try FfiConverterCallbackInterfaceDiscoveryDelegate.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("DiscoveryDelegate: Invalid handle")
            return -1
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceDiscoveryDelegate.drop(handle: handle)
            // No return value.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return 0
        case 1:
            do {
                out_buf.pointee = try invokeDeviceAdded(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }
        case 2:
            do {
                out_buf.pointee = try invokeDeviceRemoved(cb, args)
                // Value written to out buffer.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 1
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return -1
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
            return -1
        }
    }

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceDiscoveryDelegate {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            ffi_DataRCT_4c48_DiscoveryDelegate_init_callback(foreignCallbackCallbackInterfaceDiscoveryDelegate, err)
        }
    }

    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<DiscoveryDelegate>()
}

extension FfiConverterCallbackInterfaceDiscoveryDelegate: FfiConverter {
    typealias SwiftType = DiscoveryDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

private struct FfiConverterOptionTypeTransmissionRequest: FfiConverterRustBuffer {
    typealias SwiftType = TransmissionRequest?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTransmissionRequest.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTransmissionRequest.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionCallbackInterfaceDiscoveryDelegate: FfiConverterRustBuffer {
    typealias SwiftType = DiscoveryDelegate?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterCallbackInterfaceDiscoveryDelegate.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceDiscoveryDelegate.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeDeviceInfo: FfiConverterRustBuffer {
    typealias SwiftType = [DeviceInfo]

    public static func write(_ value: [DeviceInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeDeviceInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [DeviceInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [DeviceInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeDeviceInfo.read(from: &buf))
        }
        return seq
    }
}

public func getLocalIp() -> String {
    return try! FfiConverterString.lift(
        try!

            rustCall {
                DataRCT_4c48_get_local_ip($0)
            }
    )
}

/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum DataRctLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {}
}
