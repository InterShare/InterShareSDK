namespace InterShareSDK {
};

dictionary Device {
    string id;
    string name;
    i32 device_type;
};

[Error]
interface TransmissionSetupError {
    UnableToStartTcpServer(string error);
};

[Error]
interface ConnectErrors {
    Unreachable();
    NoFilesProvided();
    FailedToGetConnectionDetails();
    Declined();
    FailedToGetTcpDetails();
    FailedToGetSocketAddress();
    FailedToOpenTcpStream();
    FailedToEncryptStream(string error);
    FailedToDetermineFileSize(string error);
    FailedToGetTransferRequestResponse(string error);
    FailedToGetBleDetails();
    InternalBleHandlerNotAvailable();
    FailedToEstablishBleConnection();
};

[Error]
enum DiscoverySetupError {
    "UnableToSetupUdp",
    "UnableToSetupMdns"
};

callback interface DiscoveryDelegate {
    void device_added(Device value);
    void device_removed(string device_id);
};

dictionary BluetoothLeConnectionInfo {
    string uuid;
    u32 psm;
};

dictionary TcpConnectionInfo {
    string hostname;
    u32 port;
};

dictionary FileTransferIntent {
    string? file_name;
    u64 file_size;
    u64 file_count;
};

dictionary ClipboardTransferIntent {
    string clipboard_content;
};

enum ConnectionIntentType {
    "FileTransfer",
    "Clipboard"
};

[Enum]
interface ReceiveProgressState {
    Unknown();
    Handshake();
    Receiving(double progress);
    Extracting();
    Cancelled();
    Finished();
};

callback interface ReceiveProgressDelegate {
    void progress_changed(ReceiveProgressState progress);
};

interface ConnectionRequest {
    Device get_sender();
    ConnectionIntentType get_intent_type();
    FileTransferIntent? get_file_transfer_intent();
    ClipboardTransferIntent? get_clipboard_intent();
    void set_progress_delegate(ReceiveProgressDelegate delegate);

    void cancel();
    sequence<string>? accept();
    void decline();
};

callback interface NearbyConnectionDelegate {
    void received_connection_request(ConnectionRequest request);
};

enum ConnectionMedium {
    "BLE",
    "WiFi"
};

[Enum]
interface SendProgressState {
    Unknown();
    Connecting();
    Requesting();
    ConnectionMediumUpdate(ConnectionMedium medium);
    Compressing();
    Transferring(double progress);
    Cancelled();
    Finished();
    Declined();
};

callback interface SendProgressDelegate {
    void progress_changed(SendProgressState progress);
};

interface Discovery {
    [Throws=DiscoverySetupError]
    constructor(DiscoveryDelegate? delegate);
    sequence<Device> get_devices();
    void start();
    void stop();
};

interface NearbyServer {
    constructor(Device my_device, NearbyConnectionDelegate? delegate);
    void start();
    void stop();
    void restart_server();

    [Throws=ConnectErrors]
    void send_files(Device receiver, sequence<string> file_paths, SendProgressDelegate? progress_delegate);
};